Vulnerability,Category,Length
"            f""str$id""""str$id""""str$id""            delete from {carts_table}             where user_id={userid} && product_id={productid}            cursor.execute(sql_query)",sql_injection,9
"    client.listentcp()    proxy = proxy(proxy_port=""str$id"", app_port=""str$id"")    context.call_to_terminate_proxy = proxy.run_on_a_thread()",xsrf,8
"from django.http import httpresponse, httpresponseredirectfrom django.shortcuts import get_object_or_404, render",open_redirect,9
"def write_preset(conn, queryin, descriptin):	cursor = conn.cursor()	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	extable = table(""str$id"")	q = mysqlquery.into(extable).columns(""str$id"", ""str$id"").insert(queryin, descriptin)	print(q)	quer = str(q)	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)def edit_preset(conn, key, queryin, descriptin):	cursor = conn.cursor()	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	if (queryin != ""str$id""):		quer = ""str$id""+queryin+""str$id""+str(key)+""str$id""		cursor.execute(quer)	if (descriptin != ""str$id""):		quer = ""str$id""+descriptin+""str$id""+str(key)+""str$id""		cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	cursor = conn.cursor()	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id"" +key;	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)def get_preset(conn, key):	cursor = conn.cursor()	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	extable = table(""str$id"")	q = mysqlquery.from_(extable).select(		extable.querval	).where(		extable.id == key	)	print(q)	quer = str(q)	cursor.execute(quer)	row = cursor.fetchone()	strrow = str(row)	return (strrow[num%id:-num%id])def get_descriptin(conn, key):	cursor = conn.cursor()	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	extable = table(""str$id"")	q = mysqlquery.from_(extable).select(		extable.description	).where(		extable.id == key	)	print(q)	quer = str(q)	cursor.execute(quer)	row = cursor.fetchone()	strrow = str(row)	return (strrow[num%id:-num%id])",sql_injection,175
"                        update_query = self.update_template.format(oracle_id, local_id)                        self.db.execute(update_query)                        print ""str$id"", local_id, ""str$id"", oracle_id                    print ""str$id""            print ""str$id""",sql_injection,14
"            limiting_str = int(args.split(""str$id"")[num%id])            limiting_str = default_limit        ordering_str = ""str$id""",sql_injection,9
    decimal_places = utils.get_decimal_places(zoom_level),sql_injection,3
"        csessid = request.args.get(""str$id"")[num%id]",xss,3
"from snakemake.io import iofile, _iofile, periodicitydetector, wait_for_files",remote_code_execution,7
"                 f""str$id"")            cursor = db.execute_query(query)",sql_injection,4
        response = self.client.post(url),xsrf,3
"    response = self.app.get(""str$id"")",xsrf,3
"        if request.args.get(""str$id"", none):            return redirect(request.args.get(""str$id""))",xsrf,5
"        out = self._cli_run(""str$id"", none)",command_injection,4
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"				from oses where name = ""str$id"") order by device,partid,fstype,size""str$id""""str$id""""str$id"" % args[num%id]				where name = ""str$id"") order by device,partid,fstype, size""str$id"""" % args[num%id]		self.db.execute(query)		i = num%id		for row in self.db.fetchall():			name, device, mountpoint, size, fstype, options, partid = row				name = args[num%id]	",command_injection,41
"        packagedef = self.splitcmd(self.docclasscmd, config.getraw(""str$id""))            packagedef += self.splitcmd(self.packagecmd, pkg)        outerpreamble = ""str$id""        for k in self.preamblecmds:            if k in config.effectiveconfig:                outerpreamble += self.preamblecmds[k] % config.getraw(k)        innerpreamble = verbatimenv.preambledefs        if config.effectiveconfig.get(""str$id"", ""str$id"") in [""str$id"", ""str$id"", ""str$id"", true]:            innerpreamble += self.titlepagecmd        self.before = packagedef + outerpreamble + self.begin + innerpreamble",command_injection,47
"        query = ""str$id""""str$id""""str$id""""str$id""\""str$id""        cursor = g.conn.execute(query)",sql_injection,6
"		blacklisted_keywords = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""]			frappe.throw(_(""str$id""), frappe.dataerror)",sql_injection,11
"query = ""str$id""+str(int(round(volume)))+""str$id""cur.execute(query)",sql_injection,3
"        cmd = ""str$id"" % src_name            cmd += ""str$id"" % snap_cpg            cmd += ""str$id""            cmd += cpg + ""str$id""        cmd += dest_name        self._cli_run(cmd, none)",command_injection,23
"                   ""str$id"", (winner, loser, ts))",sql_injection,4
            redirect_output=self._ray_params.redirect_worker_output),open_redirect,1
"result = stringio.stringio()c.setopt(pycurl.writefunction, result.write)def auto_detect(track_id):    url = ""str$id""    c.setopt(pycurl.customrequest, ""str$id"")        c.setopt(pycurl.url, url + ""str$id"" + track_id)",sql_injection,16
	return event,sql_injection,2
"                sql = ""str$id"" + username + ""str$id"" + pass_hash + ""str$id""                c.execute(sql)",sql_injection,12
"    def get(self, path, get_args=""str$id"", as_json=true):        request = request_mock(path)    def post(self, path, body=""str$id"", headers=none):        request = request_mock(path=path, method=""str$id"", body=body, headers=headers)    def put(self, path, body):        request = request_mock(path=path, method=""str$id"", body=body, headers={""str$id"": [""str$id""]})    def delete(self, path, body=""str$id""):        request = request_mock(path=path, body=body, headers={""str$id"": [""str$id""]}, method=""str$id"")",xsrf,41
"                      (""str$id"" % filter if filter else ""str$id""))",sql_injection,7
"            self.cursor.execute(""str$id"".format(url))",sql_injection,1
"from elasticsearch_dsl.query import simplequerystring, bool",xss,5
"                       where tweets.text like ""str$id"" ""str$id""""str$id""and tweets.text like ""str$id"" "" * (len(keywords) - num%id)    select_tweets = select_tweets.format(*keywords)    cursor.execute(select_tweets)",sql_injection,17
from pants.engine.isolated_process import fallibleexecuteprocessresult,remote_code_execution,4
"    query = ""str$id""+str(x+num%id)+""str$id""+str(x)+""str$id""    cur.execute(query)",sql_injection,4
"    self._temp_options_filename = none      self._temp_options_filename = options_file.name      json.dump( dict( self._user_options ), options_file )",remote_code_execution,12
    m.text = text    m.cachedtext = compile_markdown(text)    m.category = category    m.headline = headline,xss,12
"        ssh_cmd = (""str$id""                   % {""str$id"": chap_secret, ""str$id"": host_name})",command_injection,8
"    time.sleep(num%id.num%id)    thirdpage, thirdheaders = request.querypage(content=true)    condition  = firstpage == secondpage    condition &= secondpage == thirdpage",command_injection,15
"                  ""str$id"", ""str$id"", ""str$id"", ""str$id"",                  ""str$id"")",command_injection,5
"import common, sqlite3, subprocess, networkmanager, os, crypt, pwd, getpass, spwd ",remote_code_execution,10
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,10
"	def _raise_exception():		frappe.throw(_(""str$id""), frappe.dataerror)			_raise_exception()			_raise_exception()			_raise_exception()			_raise_exception()",sql_injection,8
"            ""str$id"" \            .format(x)    c.execute(query)",sql_injection,4
"    docclasscmd = (r""str$id"", r""str$id"")    packagecmd = (r""str$id"", r""str$id"")    titlepagecmd = ""str$id""    begin = ""str$id""    end = ""str$id""    preamblecmds = {""str$id""    : ""str$id"",                    ""str$id""   : ""str$id"",                    ""str$id""    : ""str$id"",                    ""str$id""   : ""str$id"",                    ""str$id"": ""str$id"",                    ""str$id""     : ""str$id""}        if txt.find(""str$id"") > -num%id:            warn(""str$id"")        super(document, self).__init__(docparser.parse(txt, doclexer), after=self.end)",command_injection,45
"        c.execute(""str$id""                  ""str$id""+dte+""str$id""+cladd+""str$id""+cmd+""str$id""+path+""str$id""+useragentstring+""str$id""+rvers+""str$id""                  )            c.execute(                ""str$id""                    ""str$id""+useragentstring+""str$id""            )            refid = c.execute(""str$id""+useragentstring+""str$id"").fetchone()                resp = c.execute(""str$id""+str(refid[num%id])+""str$id"").fetchall()",sql_injection,13
"from flask import redirect, make_responsefrom random import randintimport redisimport uuidimport timedef initredis_db():    r = redis.redis(host=""str$id"",port=num%id,db=num%id)    return rdef generatesession(user_id, r):    salt = ""str$id"".join([chr(randint(num%id, num%id)) for _ in range(num%id)])    generate_uuid = str(uuid.uuid3(uuid.namespace_dns, str(user_id + time.time()) + salt))    r.set(generate_uuid, user_id)    response = make_response(redirect(""str$id""))    response.set_cookie(""str$id"", bytes(generate_uuid, ""str$id""))",sql_injection,43
"	if attacktype == sql_injection:		falsepayload = sqli.get_false()[num%id]		badhtml = ""str$id""		if method == ""str$id"":			geturl = url + ""str$id"" + paramname+""str$id""+falsepayload			content = requests.get(geturl)			badhtml =  content.text		elif method == ""str$id"":			content = requests.post(url, data={paramname:falsepayload})			badhtml = content.text		compare_res = sqli.compare_html(badhtml, html)				match = re.findall(r""str$id"", compare_res)		return none",sql_injection,48
"        cur.execute(""str$id"".format(key, value))",sql_injection,2
"                for malt_row in cursor.execute(""str$id""%s\""str$id"" % recipe.name):                for rest_row in cursor.execute(""str$id""%s\""str$id"" % recipe.name):                for hop_dosage_row in cursor.execute(""str$id""%s\""str$id"" % recipe.name):",sql_injection,18
	return event,sql_injection,2
"            cur.execute(""str$id"" %name)",command_injection,2
"    annotated = flag(value, ""str$id"")",remote_code_execution,4
"			elif re.compile(""str$id"").match(field):",sql_injection,2
"      ""str$id"": bundle.json,      ""str$id"": json.dumps(coordinators),",xss,4
"        if metadata:            extra = []            for (n, v) in metadata.iteritems():                if type(v) in (int, long):                    extra.append(""str$id"" % (n, v))                else:                    extra.append(""str$id"" % (n, v))            extraq = ""str$id"".join(extra)            query = (""str$id""                     ""str$id"" %                     (self.table, ndata, extraq, now, id)                     )        else:            query = (""str$id""                     ""str$id"" %                     (self.table, ndata, now, id)                     )            self._query(query)",sql_injection,50
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,12
"            xsrf_header = request.getheader(""str$id"")",xsrf,3
"                where id=""str$id""            ""str$id""' % id",sql_injection,5
    return none ,sql_injection,2
"            self.gigachannel_community = community_cls(peer, self.ipv8.endpoint, self.ipv8.network, self.mds)",sql_injection,6
"      self.assertequal(""str$id"", swarming_server.url)",xsrf,2
"    return {""str$id"": retval}",sql_injection,3
                try: o[k[num%id:]] = eval(v[i])                except: o[k[num%id:]] = v[i]            if b: return eval(b)            else: raise,remote_code_execution,14
"        if not data[""str$id""].isalpha():            return jsonify({""str$id"": num%id, ""str$id"": ""str$id""логин\""str$id""})",sql_injection,8
"        out = self._cli_run(""str$id"", none)",command_injection,4
"  def assertbasechecks(self, mc, request):",xsrf,4
import shlex,command_injection,2
"        self.url = ""str$id"" % (self.base_url, submission_id)",xsrf,6
"        ssh_cmd = (""str$id""                   % {""str$id"": extend_amt, ""str$id"": volume[""str$id""]})",command_injection,8
"            conds.append(""str$id"" % (self.table, oid))            conds.append(""str$id"" % (name, value))        self._query(query)",sql_injection,9
"    self._temp_options_filename = none      self._temp_options_filename = options_file.name      json.dump( dict( self._user_options ), options_file )",remote_code_execution,12
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"        if ""str$id"" in line:            ip = line.split()[-num%id].split(""str$id"")[-num%id]            if ip not in ips:                ips[ip] = num%id                print(ip)                sys.stdout.flush()            else:                ips[ip] += num%id            if ip not in banned and ips[ip] >= config.count:                banned.add(ip)                cmd = ""str$id"" % ip                print(cmd, file=sys.stderr)                sys.stderr.flush()                os.system(cmd)",command_injection,40
"            field=models.foreignkey(to=""str$id""),            field=models.foreignkey(to=""str$id""),",sql_injection,2
                try: o[k[num%id:]] = eval(v[i])                except: o[k[num%id:]] = v[i]            if b: return eval(b)            else: raise,remote_code_execution,14
"    query = ""str$id""+account_id+""str$id""    cur.execute(query)",sql_injection,4
"            self.execute(""str$id"" % table)",sql_injection,3
"def login():   if request.method == ""str$id"":      session[""str$id""] = request.form[""str$id""]      return redirect(url_for(""str$id""))",sql_injection,11
"from .tasks import taskviewset, tasktiles, tasktilesjson, taskassets",path_disclosure,7
"        show_vlun_cmd = ""str$id""",command_injection,3
"    if hasattr(worker, ""str$id""):        del worker.raylet_client    if hasattr(worker, ""str$id""):        worker.plasma_client.disconnect()",open_redirect,9
        self.kp = num%id.num%id * num%id   #wzmocnienie czesci proporcjonalnej        self.ki = num%id.num%id * num%id    #wzmocnienie czesci calkujacej,path_disclosure,16
"			query=""str$id"".format(data)				cursor.execute(query)",sql_injection,2
    path_sub_update_delta = num%id.num%id    #co ile sekund aktualizowac podsciezke?,path_disclosure,8
"        self.do_step(loginrequest(self.browser,                                  self.username,                                  self.password,                                  base_url=self.base_url))",xsrf,4
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.delete(url)",xsrf,14
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,3
"        ssh_cmd = ""str$id"" % pool",command_injection,5
"from twisted.application import service, strports",xsrf,5
"def listen_error_messages_raylet(worker, task_error_queue):",open_redirect,3
"		tableid = none		if scope == ""str$id"":			tableid = -num%id		elif scope == ""str$id"":			self.db.execute(""str$id""""str$id""""str$id"" % name)			tableid, = self.db.fetchone()			self.db.execute(""str$id""""str$id""""str$id"", name)			tableid, = self.db.fetchone()			self.db.execute(""str$id""""str$id""""str$id"" % name)			tableid, = self.db.fetchone()				sqlvars = ""str$id""		sqldata = ""str$id"" % \			(scope, tableid, device, mountpt, size, fstype, options)		if partid:			sqlvars += ""str$id""			sqldata += ""str$id"" % partid		self.db.execute(""str$id""""str$id""""str$id"" % (sqlvars, sqldata))",command_injection,60
"    sql = ""str$id"" + documentobject.__class__.__name__ + ""str$id"" + documentobject.id + ""str$id""        if columntype == ""str$id"":            quote = ""str$id""        elif columntype == ""str$id"":            quote = ""str$id""        else:            assert false            quote = ""str$id""        sql += ""str$id""            sql += quote + parentobject.id + quote            sql += quote + str(getattr(documentobject, columnname)) + quote    self.database.execute(sql)",sql_injection,50
"            ""str$id"": {""str$id"": ""str$id""},      (        ""str$id"",        {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},        {""str$id"": ""str$id""},      ),",xsrf,13
            level = by_hash[pick],path_disclosure,3
"    query = ""str$id""  % search_enzyme    query = ""str$id"" % search_process1    query = ""str$id"" % search_process2    query = ""str$id"" % search_enzyme2    query = ""str$id"" % search_process3    query = ""str$id"" % sub    query = ""str$id"" % inter    query = ""str$id"" % search_process5    query = ""str$id"" % (search_enzyme3, reac)    query = ""str$id"" % search_enzyme4    query = ""str$id"" % inter2",sql_injection,56
"            if _valid_command(grain[key]):                value = __salt__[""str$id""](""str$id"".format(grain[key])).split(""str$id"")[num%id].strip()                grains[key] = value            if _valid_command(pillar[key]):                value = __salt__[""str$id""](""str$id"".format(pillar[key])).split(""str$id"")[num%id].strip()                grains[key] = valuedef _valid_command(string):    ""str$id""""str$id""""str$id""    invalid_characters = re.findall(""str$id"",string)    if len(invalid_characters) > num%id:        log.info(""str$id"".format(string, invalid_characters))        return false    else:        return true",command_injection,32
"        ajax = self.get_argument(""str$id"", false)        if ajax:            x, y = template_name.split(""str$id"")            template_name = ""str$id"".join([x,""str$id""])",xsrf,13
"            self.logger.info(""str$id"" % base)",sql_injection,3
"                            db.log_event_exception(                                ""str$id"")                        self.serial.port+""str$id""+str(self.result_data[""str$id""])+""str$id""",command_injection,3
"                                               ""str$id"": ""str$id"",",open_redirect,2
"        c.execute(""str$id"", (username, ))            c.execute(""str$id"", (new_hash_salt[num%id], new_hash_salt[num%id], username))",sql_injection,7
"                        event_buff = buff.replace(event_buff_logged, ""str$id"")                        db.log_event(self.result_data[""str$id""],                                     (""str$id"" if not self.aux else ""str$id""),                                     ""str$id"", event_buff)                        event_buff_logged += event_buff",command_injection,16
"            field=models.foreignkey(related_name=""str$id"", to=""str$id""),            field=models.foreignkey(related_name=""str$id"", to=""str$id""),",sql_injection,4
"    ""str$id""""str$id""%s""str$id""%s""str$id""%s/%s/%s""str$id""%s/%s/%s"".' % (                master_name, builder_name, build_number), num%id)      analysis = build_failure_analysis_pipelines.scheduleanalysisifneeded(          master_name, builder_name, build_number,          build_completed=build_completed, force=force,          queue_name=constants.waterfall_analysis_queue)",xsrf,16
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,9
"        show_vlun_cmd = ""str$id""",command_injection,3
"from cms import config, servicecoord, get_service_addressfrom cmstestsuite.web.cwsrequests import homepagerequest, loginrequest, \",xsrf,11
"                  campaign=false, success=none):",command_injection,2
"            where pt.id = %d and            order by abs(ai.date_invoice - date ""str$id"")        ""str$id"""" % (prod.id, in_date)        self._cr.execute(query)        invoice_lines = self._cr.fetchall()        if invoice_lines:            for invoice_line in invoice_lines:",sql_injection,25
"            field=models.foreignkey(related_name=""str$id"", null=true, to=""str$id"", blank=true),",sql_injection,4
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.delete(url)",xsrf,14
"	import get_leave_allocation_records, get_leave_balance_on, get_approved_leaves_for_period					_(""str$id"") + ""str$id"", 		_(""str$id"") + ""str$id"", ",sql_injection,10
"    with open(""str$id"", ""str$id"") as f:        sql_raw = f.read()    sql_template = template(sql_raw)",sql_injection,11
"        sys.exit(num%id)	",path_disclosure,1
"                %s,                %s,                %s,                %s        ""str$id""' % (y_ts, inverter_serial, etoday, etotal)        self.c.execute(query)",sql_injection,11
"	return ""str$id""",xss,2
"    cursor.execute(""str$id"", match)",sql_injection,2
"    c.execute(""str$id""""str$id""""str$id"" % (winner, loser))                                               c.execute(""str$id""""str$id""""str$id"" % (winner,))                                                     c.execute(""str$id""""str$id""""str$id"" % (loser,))                                                  ",sql_injection,10
"    answers = db.execute(""str$id"" % (pollid, answerindex))    db.execute(""str$id"", (sender, pollid))    db.execute(""str$id"", (answerid, sender))",sql_injection,12
        response = self.client.get(url),xsrf,3
"        return database_utilities.execute_query(f""str$id""""str$id""""str$id"")        return database_utilities.execute_query(f""str$id""""str$id""""str$id"")        query += f""str$id""""str$id""""str$id""        parameters = (json_data[""str$id""], )",sql_injection,11
"			stmt = ""str$id"".format(name_filter)",sql_injection,3
from benwaonline.gallery import galleryfrom benwaonline.gallery.forms import images,open_redirect,7
    if user:,xsrf,2
            csr_state_id=csr_state_logout.csr_state_id,open_redirect,1
        for f in self.forums:,remote_code_execution,4
"    def add_store(self, store):        ""str$id""""str$id""add new store""str$id""""        t = (store[num%id], )        self.cursor.execute(""str$id"", t)        self.connection.commit()",sql_injection,13
"		print ""str$id""		print ""str$id"", anglewant		print ""str$id"", anglehave",path_disclosure,8
"from marshmallow import schema,fields",sql_injection,4
"			if port == ""str$id"":port = num%id",command_injection,6
"                        pipeline.get_login_url(provider_id, pipeline.auth_entry_login, redirect_url=redirect_to)        except (keyerror, valueerror, indexerror):            pass",open_redirect,8
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id"")",command_injection,7
"                files = {""str$id"": img_file}                r = self.session.post(image_upload_url, files=files, headers={""str$id"": token})                if (r.status_code != num%id):                    print(r.status_code)                except (keyerror, valueerror) as e:",xsrf,20
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,36
from django import forms,open_redirect,4
"                        db.log_event_exception(                            ""str$id"")                    self.serial.port+""str$id""+str(self.result_data[""str$id""])+""str$id""",command_injection,3
"def shutdown(app, context):    ""str$id""""str$id""""str$id""    with app.app_context():        get_db(app, context).close()",sql_injection,8
            resp = self.assertraises(,xsrf,3
"        ssh_cmd = (""str$id""                   % {""str$id"": extend_amt, ""str$id"": volume[""str$id""]})",command_injection,8
"        sql_str = ""str$id""        if self.end_date:            sql_str = f""str$id""            cursor.execute(sql_str)",sql_injection,9
"        ssh_cmd = ""str$id""",command_injection,3
import re,sql_injection,2
"				 ""str$id"".join(self.or_conditions)",sql_injection,1
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,3
"            sql = ""str$id"" + str(base_url) + ""str$id""            result = self.db.exec(sql)",sql_injection,10
"                    vrf=dstt[""str$id""][""str$id""], l2path=l2path)def get_switched_path(switch1, switch2, rtype=""str$id"", verbose=true):    ""str$id""""str$id""""str$id""    rtypes = (""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"")    if rtype in rtypes:        logger.info(""str$id"",                    switch1, switch2, nglib.user)        pathlist = []        ngtree = nglib.ngtree.get_ngtree(""str$id"", tree_type=""str$id"")        ngtree[""str$id""] = switch1 + ""str$id"" + switch2        dist = dict()        swp = nglib.py2neo_ses.cypher.execute(            ""str$id""            + ""str$id""            + ""str$id""            + ""str$id""            + ""str$id""            + ""str$id""            + ""str$id""            + ""str$id""            + ""str$id""            + ""str$id"",            {""str$id"": switch1, ""str$id"": switch2})        last = num%id        for rec in swp:            swptree = nglib.ngtree.get_ngtree(""str$id"", tree_type=""str$id"")            if rec.distance == num%id:                swptree[""str$id""] = rec.distance + num%id                last = num%id            elif last:                if rec.distance == last:                    last += num%id                    swptree[""str$id""] = rec.distance + num%id                elif rec.distance == (last-num%id):                    swptree[""str$id""] = rec.distance + num%id                else:                    swptree[""str$id""] = rec.distance                    last = num%id            else:                swptree[""str$id""] = rec.distance            swptree[""str$id""] = ""str$id"" + str(swptree[""str$id""]) + ""str$id"" + \            rec.psw + ""str$id"" + rec.pport +  ""str$id"" \            + rec.csw + ""str$id"" + rec.cport + ""str$id""            nglib.ngtree.add_child_ngtree(ngtree, swptree)            swptree[""str$id""] = rec.csw            swptree[""str$id""] = rec.cport            swptree[""str$id""] = rec.psw            swptree[""str$id""] = rec.pport            if rec.cpc:                swptree[""str$id""] = rec.cpc                swptree[""str$id""] = rec.ppc            if rec.rvlans:                swptree[""str$id""] = rec.vlans                swptree[""str$id""] = rec.rvlans                swptree[""str$id""] = rec.p_rvlans                swptree[""str$id""] = rec.native            pathlist.append(swptree)        if pathlist:            ngtree[""str$id""] = len(pathlist)            ngtree[""str$id""] = max([s[""str$id""] for s in pathlist])            if rtype == ""str$id"":                nglib.query.print_dict_csv(pathlist)            else:                ngtree = nglib.query.exp_ngtree(ngtree, rtype)                return ngtree        elif verbose:            print(""str$id"".format(switch1, switch2))    returndef get_routed_path(net1, net2, rtype=""str$id"", vrf=""str$id"", verbose=true, l2path=true):",path_disclosure,219
"                path.push(parent, attr, rel_op)                self.traverse_many(path.clone(), attr, src_items, tgt_items,                                   visitor)                path.pop()        visitor.visit(path, attribute, source, target)    def traverse_many(self, path, attribute, source_sequence,                      target_sequence, visitor):",path_disclosure,20
"                                     ""str$id"", file_)",command_injection,2
"            with open(self.cache_file(self.plugin_cache_file), ""str$id"") as f:                x = data1.text.encode(""str$id"", ""str$id"")            with open(self.cache_file(self.version_cache_file), ""str$id"") as f:                x = data2.text.encode(""str$id"", ""str$id"")            self.logger.error(""str$id"" % str(e))",sql_injection,21
"        self.cookies.save()        os.chmod(self.cookies.filename, num%id)",xsrf,3
"                               help=""str$id"")",command_injection,1
"            ngtree = get_routed_path(src, dst, verbose=false)                 ",path_disclosure,5
        if not self._path:,path_disclosure,3
"    if not app.config[""str$id""]:        abort(num%id)    if request.json is none:",command_injection,8
"    ""str$id""""extract keywords from the list of strings",remote_code_execution,7
"        self.client.login(username=""str$id"", password=""str$id"")",open_redirect,2
       .add_constraint(jc.equivalent(expect_images))),path_disclosure,1
"				opening = get_leave_balance_on(employee.name, leave_type, filters.from_date,					allocation_records_based_on_from_date.get(employee.name, frappe._dict()))",sql_injection,7
"                        if power>num%id:                            print(""str$id"" % (power, i))                            with suppress_stdout():                                send(ip(src=target, dst=""str$id"" % i) / udp(dport=num%id)/raw(load=data), count=power)                        elif power==num%id:                            print(""str$id"" % i)                                send(ip(src=target, dst=""str$id"" % i) / udp(dport=num%id)/raw(load=data), count=power)                        if power>num%id:                            print(""str$id"" % (power, result[""str$id""]))                            with suppress_stdout():                                send(ip(src=target, dst=""str$id"" % result[""str$id""]) / udp(dport=num%id)/raw(load=data), count=power)                        elif power==num%id:                            print(""str$id"" % result[""str$id""])                                send(ip(src=target, dst=""str$id"" % result[""str$id""]) / udp(dport=num%id)/raw(load=data), count=power)",command_injection,54
"    cursor.execute(""str$id""""str$id""%s""str$id""%s""str$id""""str$id"" % (player1,player2,size))",sql_injection,3
            return false,path_disclosure,2
    return json.dumps([]),sql_injection,2
"                    next=request.args.get(""str$id"", ""str$id"")",xsrf,2
"    runs a command in shell and returns the read stdout and stderr data.    this function waits for the process to exit.    :param command: the command to run on shell.    :param kwargs:  additional keyword arguments to pass to ``subprocess.popen``                    that is used to spawn the process (except ``shell``,                    ``stdout``, ``stderr``, ``stdin`` and",command_injection,51
"                    label=q.question, required=q.required,                    label=q.question, required=q.required,                    label=q.question, required=q.required,                    label=q.question, required=q.required,",xss,8
"                    sql = ""str$id"" + str(new_last) + ""str$id""+str(base_url)+""str$id""                    self.db.exec(sql)",sql_injection,8
"    escape a literal value for use in a sql clause    if isinstance(value, literal):        return value.literal    elif isinstance(value, six.string_types):        value = value.replace(""str$id"", ""str$id"")",sql_injection,22
"    list_display = (""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"")    search_fields = (""str$id"", ""str$id"", ""str$id"")    fields = (""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"")",xss,21
"    def _run_ssh(self, command, check_exit=true, attempts=num%id):",command_injection,5
"			command = ""str$id"".format(table_name, pth)			data = self._run_command(command)",sql_injection,7
"        self._r_steps_.append((f""str$id"", roamer))        self._r_steps_.append((item_desc, roamer))        last_found_step = none, none, none            desc, roamer = step            if roamer != missing:                last_found_step = i, desc, roamer            desc, roamer = step            if roamer == missing:                return i, desc, roamer        return none, none, none",path_disclosure,38
    def unbind_methods(self):  ,remote_code_execution,2
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"          ""str$id"" \",sql_injection,2
            return other._r_item_ == self._r_item_        return other == self._r_item_,path_disclosure,8
                                start_node_found_outside = search_start_node_outside(edge.from_node),path_disclosure,3
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)",xsrf,17
from datetime import timedelta,remote_code_execution,4
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"        end_date = datetime.strptime(old_repeating_event.date_end, ""str$id"")            new_start_date = datetime.strptime(old_repeating_event.date_begin, ""str$id"") + relativedelta(days=+num%id)        end_date = datetime.strptime(old_repeating_event.date_end, ""str$id"")            new_start_date = datetime.strptime(old_repeating_event.date_begin, ""str$id"") + relativedelta(days=+num%id)        end_date = datetime.strptime(old_repeating_event.date_end, ""str$id"")            new_start_date = datetime.strptime(old_repeating_event.date_begin, ""str$id"") + relativedelta(months=+num%id)",open_redirect,30
"    user_engine.execute(        ""str$id"".        format(endpoint_url))",sql_injection,3
"        is_up = true if os.system(""str$id"" % hostname) is num%id else false",open_redirect,11
"    path = posixpath.normpath(unquote(path))    path = path.lstrip(""str$id"")    newpath = ""str$id""    for part in path.split(""str$id""):        if not part:            continue        drive, part = os.path.splitdrive(part)        head, part = os.path.split(part)        if part in (os.curdir, os.pardir):            continue        newpath = os.path.join(newpath, part).replace(""str$id"", ""str$id"")    if newpath and path != newpath:        return httpresponseredirect(newpath)    fullpath = os.path.join(document_root, newpath)            return directory_index(newpath, fullpath)",open_redirect,51
"            json_data = db.select(""str$id"")            return [str.encode(json.dumps({""str$id"":""str$id"",""str$id"": num%id,""str$id"": ""str$id"", ""str$id"": ""str$id""}))]",sql_injection,9
"			active_employees = frappe.get_all(""str$id"", 		filters = { ""str$id"": ""str$id"", ""str$id"": filters.company}, 	",sql_injection,10
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"from .tasks import taskviewset, tasktiles, tasktilesjson, taskassets",path_disclosure,7
"    sql = ""str$id"".format(tag)    scenes = db.exec(sql)",sql_injection,6
"            except:                pass    def recursiveupdate(target, content):        for k in content:            if k in target and isinstance(content[k], dict) and isinstance(target[k], dict):                config.recursiveupdate(target[k], content[k])            elif k in target and isinstance(content[k], list) and isinstance(target[k], list):                target[k] += content[k]                target[k] = content[k]",command_injection,37
"            [jc.pathcontainspredicate(""str$id"", server_group_name),             jc.pathcontainspredicate(",path_disclosure,3
        response = self.client.post(url),xsrf,3
"        csessid = request.args.get(""str$id"")[num%id]",xss,3
		self.set_order_by(args)		self.check_sort_by_table(args.order_by),sql_injection,2
"            qa_notes_field = self.browser.find_element_by_xpath(                ""str$id"")            self.assertin(""str$id"", qa_notes_field.get_attribute(""str$id""))",open_redirect,6
"    def __init__(self, webport, local_access=false):",xsrf,4
"        self.cursor.execute(""str$id""%(money, user_id))        self.cursor.execute(""str$id"" % (money, project_id))        self.cursor.execute(""str$id"" % (project_id, user_id, money))        self.cursor.execute(""str$id"" % (project_id, user_id, money))        self.cursor.execute(""str$id"" % project_id)        self.cursor.execute(""str$id"" % (user_id, money))",sql_injection,23
from django.test import testcase,xsrf,4
"            http_x_deis_version=""str$id""",xsrf,1
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"    results = check_output([""str$id"", ""str$id"", ""str$id""])    assert b""str$id"" not in results.lower()    results = check_output([""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""])    assert b""str$id"" in results.lower()",command_injection,21
                                                         stdin=stdin_input),command_injection,1
    headers = {},sql_injection,3
"		command = ""str$id"".format(table_name, pth)		self._run_command(command)",sql_injection,5
"		data_user = (nome, sobrenome, endereco)",sql_injection,5
"        update_clause, query_params = self._build_update_clause(obj)        query = ""str$id"" + self.table_name + ""str$id"" + update_clause + ""str$id"" + str(obj_id) + ""str$id""        feedback = self.sql.perform(query, query_params)        return self.read({""str$id"" : obj_id})[num%id]    def delete(self, obj_id):        ""str$id""""str$id""""str$id""        query = ""str$id"" + self.table_name + ""str$id"" + self.holder        feedback = self.sql.perform(query, (obj_id,))    def _build_where_clause(self, query_params):        ""str$id""""str$id""""str$id""        raw_clauses = []        query_items = []        for field, value in query_params.iteritems():            if field in self.where_params:                raw_clauses.append(field + ""str$id"" + self.holder)                query_items.append(value)            else:                raise modelexception(""str$id"" % field)        raw_clause = ""str$id"".join(raw_clauses)        return raw_clause, query_items    def _build_update_clause(self, obj):        ""str$id""""str$id""""str$id""        raw_clauses = []        for field, value in obj.iteritems():            raw_clauses.append(field + ""str$id"" + self.holder)        raw_clause = ""str$id"".join(raw_clauses)        return raw_clause, obj.values()    def _get_latest_id(self):        query = ""str$id"" + self.table_name + ""str$id""        results = self.sql.perform(query)        if not results:            return num%id # the very first        return results[num%id][""str$id""]",sql_injection,126
"    deladname = ""str$id""            deladname = val        api.delete_ad_using_title(deladname)",xsrf,7
"            query = ""str$id"".format(data)                cursor.execute(query)",sql_injection,4
        print(q),sql_injection,1
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"            se_level = find(east[""str$id""][num%id])[num%id]            sw_level = find(west[""str$id""][num%id])[num%id]            ne_level = find(east[""str$id""][num%id])[num%id]            nw_level = find(west[""str$id""][num%id])[num%id]",path_disclosure,12
"  def get_binary_path_from_tgz(self, supportdir, version, filename, inpackage_path):    unpacked_dir = os.path.join(work_dir, ""str$id"")    if not os.path.exists(unpacked_dir):      with temporary_dir(root_dir=work_dir) as tmp_dist:        tgz.extract(tarball_filepath, tmp_dist)        os.rename(tmp_dist, unpacked_dir)    binary_path = os.path.join(unpacked_dir, inpackage_path)    return binary_path  @memoized_property  def path(self):    ""str$id""""str$id""""str$id""    node_path = self.get_binary_path_from_tgz(      supportdir=self._relpath, version=self.version, filename=""str$id"",      inpackage_path=""str$id"")    logger.debug(""str$id"", node_path)    return node_path  @memoized_property  def yarnpkg_path(self):    ""str$id""""returns the root path of yarnpkg distribution.    :returns: the yarnpkg root path.    yarnpkg_path = self.get_binary_path_from_tgz(      supportdir=""str$id"", version=self.yarnpkg_version, filename=""str$id"",      inpackage_path=""str$id"")    logger.debug(""str$id"", yarnpkg_path)    return yarnpkg_path  class command(namedtuple(""str$id"", [""str$id"", ""str$id"", ""str$id""])):",command_injection,73
"        from_date=context.get(""str$id"",false)        to_date=context.get(""str$id"",false)        date_str=false            date_str=""str$id""%(from_date,to_date)            date_str=""str$id""%(from_date)            date_str=""str$id""%(to_date)",sql_injection,6
"      return responses.starttask(request.path, context=context)",xsrf,3
"    tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")        tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")",open_redirect,10
        parsed = vars(self.parse_known_args(nohelp=true)[num%id]),command_injection,3
"            orders[re_match[num%id]] = (request.args.get(arg), request.args.get(""str$id"" + re_match[num%id]))",sql_injection,6
"    root_file = urtext.urtextfile(os.path.join(self.path, self.view.file_name()))    root_meta = nodemetadata(os.path.join(self.path, root_file.filename))",path_disclosure,8
"        value = u""str$id"".format(value)",sql_injection,3
        pass,xsrf,1
class taskassets(tasknestedview):,path_disclosure,2
"    inventory, smartinventorymembership,",command_injection,2
        if not self._cert_provider:,xsrf,3
"        self.asserttrue(            self.client.login(username=username, password=password))        response = self.client.delete(url)        self.assertfalse(            self.client.login(username=username, password=passwo",xsrf,9
"from flask import blueprint, request, session, g, redirect, url_for, \     render_template, flashfrom benwaonline.models import user_datastore, user",open_redirect,16
"    r""str$id""",command_injection,1
"    warn (""str$id"", t)",command_injection,3
"    bot.send_message(telegram_id, ""str$id"")    explorers[telegram_id] = explorer(telegram_id)def content_builder(content, up=true):    markup = telebot.types.inlinekeyboardmarkup()    if (up):        markup.add(telebot.types.inlinekeyboardbutton(""str$id"", callback_data=""str$id""))    if (content[""str$id""]):        for each in content[""str$id""]:            markup.add(                    telebot.types.inlinekeyboardbutton(""str$id"" + each[""str$id""], callback_data=""str$id"" + str(each[""str$id""])),                    telebot.types.inlinekeyboardbutton(""str$id"", callback_data=""str$id"" + str(each[""str$id""])),                )    if (content[""str$id""]):        for each in content[""str$id""]:            if (each[""str$id""] in icon_mime):                icon = icon_mime[each[""str$id""]]            else:                icon = icon_mime[""str$id""]            markup.add(                    telebot.types.inlinekeyboardbutton(icon + ""str$id"" + each[""str$id""], callback_data=""str$id"" + str(each[""str$id""])),                    telebot.types.inlinekeyboardbutton(""str$id"", callback_data=""str$id"" + str(each[""str$id""])),                )    return markup        explorers[telegram_id].new_file(message.message_id, message.document.file_name, mime, message.document.file_size)        explorers[telegram_id].new_file(message.message_id, ""str$id"" + str(message.date), ""str$id"", message.audio.file_size)        explorers[telegram_id].new_file(message.message_id, ""str$id"" + str(message.date), ""str$id"", message.document.file_size)        explorers[telegram_id].new_file(message.message_id, ""str$id"" + str(message.date), ""str$id"", message.photo[num%id].file_size)        explorers[telegram_id].new_file(message.message_id, ""str$id"" + str(message.date), ""str$id"", message.video.file_size)        explorers[telegram_id].new_file(message.message_id, ""str$id"" + str(message.date), ""str$id"", message.video_note.file_size)        explorers[telegram_id].new_file(message.message_id, ""str$id"" + str(message.date), ""str$id"", message.voice.file_size)        explorers[telegram_id].new_file(message.message_id, ""str$id"" + str(message.date), ""str$id"", message.contact.file_size)    bot.reply_to(message, ""str$id"")    explorers[telegram_id].new_directory(new_directory_name)    content = explorers[telegram_id].get_directory_content()    keyboard = content_builder(content, len(explorers[telegram_id].path) > num%id)    message_sent = bot.send_message(telegram_id, explorers[telegram_id].get_path_string(), reply_markup=keyboard)    explorers[telegram_id].last_action_message_ids.append(message_sent.message_id)        explorers[telegram_id].go_to_parent_directory()        explorers[telegram_id].go_to_directory(content_id)",sql_injection,131
"def get_full_by_id(db, id):    return get_full_sql(db, ""str$id"" % id)[num%id]def get_full_sql(db, filter):",sql_injection,10
"        cur.execute(""str$id""""str$id""%s""str$id""%s""str$id""%s""str$id""%s""str$id""""str$id""                        % (person, expense_date, amount, category, description))",sql_injection,7
"""str$id""""str$id""drop table""str$id""funny""str$id""restore table""str$id""""str$id""from django.http import httpresponseservererrorclass sqlinjectionmiddleware(object):    def process_request(self, request):        for var in request.get:            val = request.get.get(var).lower()            if ""str$id"" in val:                request.session[""str$id""] = val            if ""str$id"" in val and ""str$id"" in request.session:                del request.session[""str$id""]        if ""str$id"" in request.session:            return httpresponseservererror(""str$id""egg.py\""str$id"", cont",sql_injection,41
"        query = conn.execute(""str$id""+name+""str$id""+password+""str$id"");",sql_injection,3
"                                     ""str$id"", (p1_code,))",sql_injection,2
"            method=""str$id""):",xsrf,1
"    home_url = flask.url_for(""str$id"")    url = flask.request.args.get(""str$id"") or \        flask.request.referrer or \        home_url    if url == flask.request.url:        return home_url    return url",open_redirect,20
"            return ""str$id"" % (lhs, self.nested_operator), [key_transforms] + params            int(self.key_name)            lookup = ""str$id"" % self.key_name        else:            lookup = ""str$id"" % self.key_name        return ""str$id"" % (lhs, self.operator, lookup), params",sql_injection,27
"            result = self.etcd.get(os.path.join(self.namespace, key))        path = os.path.join(self.namespace, key)",path_disclosure,8
        for i in xrange(sleep_num):,xsrf,4
"        if cursor.execute(""str$id"" + str(gettitle(submission)) + ""str$id"").fetchone()[num%id] != num%id:",sql_injection,8
        self.filter_tuples = (),sql_injection,3
"            options.update(entry.get(""str$id"", {}))",path_disclosure,2
        return httpresponsebadrequest(form.errors.as_json()),xss,2
"    adname = ""str$id""            adname = val    allads = api.get_all_ads()    return [t for t, i in allads if t == adname]",xsrf,20
"        response = self.client.get(url)            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,9
    state_name = session.query(state).filter(state.name.contains(argv[num%id])),sql_injection,3
"		list_context.sub_title = _(""str$id"").format(frappe.local.form_dict.txt)",xss,3
"        ssh_cmd = (""str$id"" %                   {""str$id"": port1, ""str$id"": host_name})            ssh_cmd = (""str$id"" % (port, host_name))",command_injection,14
    cycles_between = column()    num_checkpoints = column(),command_injection,6
"		if d.fieldtype == ""str$id"": d.ignore_xss_filter = num%id",xss,7
"        self.verify_xss = kwargs.get(""str$id"", os.environ.get(""str$id"", false))",xss,5
"            ""str$id"" % uuid)",xsrf,3
"    record_log_files_in_redis(        redis_address,        node_ip_address, [stdout_file, stderr_file],        password=redis_password)",open_redirect,6
    for expired_reporter in range(least_recent_index):        reporters_dict.pop(expired_reporter),sql_injection,5
"        ""str$id"": ""str$id"", # obvs        ""str$id"": ""str$id"",        ""str$id"": ""str$id"",        ""str$id"": true,        ""str$id"": ""str$id"",        ""str$id"": {",command_injection,14
"    @throttle(min_time_between_updates)        ""str$id""""str$id""""str$id""        import pyatmo        self.station_data = pyatmo.weatherstationdata(self.auth)        if self.station is not none:            self.data = self.station_data.lastdata(                station=self.station, exclude=num%id)        else:            self.data = self.station_data.lastdata(exclude=num%id)",remote_code_execution,21
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"                if (t in self.pc.sets[""str$id""]                    or t in self.pc.sets[""str$id""]                    or t in self.targets):",remote_code_execution,12
from .extracted_list_presence import extractedlistpresence,open_redirect,4
"            was_prev_closed = pd.read_sql(f""str$id"", conn).iloc[num%id].closed",sql_injection,4
"            print ""str$id""            raise",remote_code_execution,3
"        ""str$id"": project    handle, path = tempfile.mkstemp(dir=private_data_dir)    f = os.fdopen(handle, ""str$id"")    json.dump(json_cred, f)    f.close()",command_injection,13
"        query = ""str$id"".format(rno = rno)        self.cursor.execute(query)",sql_injection,6
"        return render_template(""str$id"",                                invites_list=invites_list, ",open_redirect,3
min_time_between_updates = timedelta(seconds=num%id),remote_code_execution,3
"    def test_login(self):        resp = self.client.get(url_for(""str$id"", remote_app=""str$id""))        self.assertequal(            resp.location,            ""str$id""            ""str$id"" % quote_plus(url_for(                ""str$id"", remote_app=""str$id"", _external=true            ))",xsrf,16
"query = ""str$id"" + val + ""str$id"" + val +""str$id"" + valcur.execute(""str$id"" + val + ""str$id"" + val +""str$id"" + val)",sql_injection,21
"        req_data = ""str$id"" % (provider.username,                                                    provider.password)                               data=req_data, headers=req_headers,                               skip_cert=true)",xsrf,9
"			log=""str$id""+str(values[num%id])+""str$id""+str(values[num%id])+""str$id""+str(values[num%id])+""str$id""+str(values[num%id])+""str$id"" % (datetime.now(),datetime.now(),)			write_to_db(log)def write_to_db(log):		con.cursor().execute(log)",sql_injection,6
"    def test_token_getter_setter(self, save_session):",xsrf,3
        onboarding.step_8,open_redirect,1
                dut_scp = scpclient(ssh.get_transport()),command_injection,3
"@profile_module.route(""str$id"")",sql_injection,1
"        if not pwd in self.auth.iuser:            h = [u""str$id""]            self.loud_reply(u""str$id"".format(pwd), headers=h)            h = [""str$id"".format(pwd)]            self.loud_reply(u""str$id"", headers=h)",path_disclosure,15
"    cred_file = args.foldername + ""str$id""",xsrf,5
"    cursor.execute(""str$id"" % player)                   ""str$id"" % (player_name, player_country, player))",sql_injection,8
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"            query = ""str$id"".format(data)                cursor.execute(query)",sql_injection,4
            urtext_file = urtextfile(self.sorted_menu[index][num%id]),path_disclosure,3
"  c.execute(""str$id"" % content)",sql_injection,3
"    cursor.execute(""str$id"", player)                   ""str$id""",sql_injection,3
"    query = ""str$id"".format(page_id)    self.cursor.execute(query)",sql_injection,4
"    query = db.query(""str$id"" % page_name).namedresult()",sql_injection,5
"        create_testcases_celery(object_id, call_from=""str$id"")",path_disclosure,2
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(    url_helper.urllib2.urlopen(mox.ignorearg(), mox.ignorearg(),",xsrf,5
        result = -num%id,remote_code_execution,3
"        self.svcr.assertbasechecks, none, self.request)",xsrf,3
"    url_helper.urllib2.urlopen(mox.strcontains(url),",xsrf,1
"    query = ""str$id""+asset_id+""str$id""    cur.execute(query)",sql_injection,4
"            ssh_cmd = ""str$id"" % \                (host_name, vol_name)",command_injection,7
"        text = self.get(url).text        version_check_1 = re.search(""str$id"", text, re.ignorecase)        if version_check_1:            return version_check_1.group(num%id)        result = self.get(check2_url).text        version_check_2 = re.search(""str$id"", result, re.ignorecase)        if version_check_2:            return version_check_2.group(num%id)",sql_injection,24
"        insert_query = self.insert_template.format(            self.is_none(ambient_temperature),             self.is_none(ground_temperature),             self.is_none(air_quality),             self.is_none(air_pressure),             self.is_none(humidity),             self.is_none(wind_direction),             self.is_none(wind_speed),             self.is_none(wind_gust_speed),             self.is_none(rainfall),             created)        print insert_query        self.db.execute(insert_query)            print rows_count, ""str$id""",sql_injection,19
"            ssh_cmd = ""str$id"" % host",command_injection,5
"	def check_sort_by_table(self, order_by):		if ""str$id"" in order_by:			tbl = order_by.split(""str$id"")[num%id]			if tbl not in self.tables:				if tbl.startswith(""str$id""):					tbl = tbl[num%id:-num%id]				frappe.throw(_(""str$id"").format(tbl))",sql_injection,21
"    def protected(self):        return self.exists and not os.access(self.file, os.w_ok)        if not self.exists and lstat(self.file):",remote_code_execution,13
report_cooldown = num%id,sql_injection,3
"                raise valueerror(""str$id"" % entity.id)            self.__id_map[entity.id] = entity",path_disclosure,7
"url = ""str$id""null = [""str$id"", ""str$id"", ""str$id"", ""str$id""]response = api_session.get(url, params=sqli)while not response.ok:    null.pop(-num%id)    null.extend([""str$id"", ""str$id""])    sqli[""str$id""] = f""str$id""    response = api_session.get(url, params=sqli)print(f""str$id"")print(response.url)",sql_injection,23
"            for file_name in os.listdir(target_path):                try: # in case of a permission error.                    attrib[""str$id""] = true                    attrib[""str$id""] = files.format_file_size(os.path.getsize(actual_path))                    attrib[""str$id""] = ""str$id""                    attrib[""str$id""] = time.ctime(os.path.getctime(actual_path))                    if os.path.isdir(actual_path):",sql_injection,26
"                                      and t.project_id = {num%id}                                      and t.project_id = {num%id}        ""str$id""'.format(project_id)        results = db.engine.execute(contrib_query)",sql_injection,12
"                where winner=""str$id"" and player2=""str$id"" and date=""str$id"";""str$id"".format(tag, tag, date)        data = data + db.exec(sql)",sql_injection,13
"		cursor.execute(""str$id"" + session[""str$id""] + ""str$id"")",sql_injection,5
"  def testunauthorizedusercannotschedulenewanalysis(self):    self.assertraisesregexp(        webtest.app.apperror,        re.compile(""str$id"", re.multiline | re.dotall),        self.test_app.get,        ""str$id"",        params={            ""str$id"": buildbot.createbuildurl(                master_name, builder_name, build_number),            ""str$id"": step_name,            ""str$id"": test_name,            ""str$id"": ""str$id""})  @mock.patch.object(check_flake, ""str$id"",                     return_value={                         ""str$id"": num%id,                         ""str$id"": num%id,                         ""str$id"": ""str$id"",                         ""str$id"": num%id})  @mock.patch.object(check_flake, ""str$id"",                     return_value=[[num%id, num%id.num%id, ""str$id"", num%id, ""str$id"",                                    num%id, ""str$id""]])  def testrequestexistinganalysis(self, *_):    success_rate = num%id.num%id    data_point = datapoint()    data_point.build_number = build_number - num%id    data_point.pass_rate = success_rate    previous_analysis.data_points.append(data_point)    previous_analysis.status = analysis_status.completed    previous_analysis.suspected_flake_build_number = num%id    previous_analysis.request_time = datetime.datetime(num%id, num%id, num%id, num%id, num%id, num%id)    previous_analysis.start_time = datetime.datetime(num%id, num%id, num%id, num%id, num%id, num%id)    previous_analysis.end_time = datetime.datetime(num%id, num%id, num%id, num%id, num%id, num%id)    previous_analysis.algorithm_parameters = {""str$id"": num%id}",xsrf,94
"    def match_versions(self, version, fixed_in):        if version == fixed_in:            return false        parts_version = version.split(""str$id"")        parts_fixed_in = fixed_in.split(""str$id"")        if len(parts_version) <= len(parts_fixed_in):            for x in range(len(parts_version)):                if int(parts_version[x]) < int(parts_fixed_in[x]):                    return true                if int(parts_version[x]) > int(parts_fixed_in[x]):                    return false            return false        else:            for x in range(len(parts_fixed_in)):                if int(parts_version[x]) < int(parts_fixed_in[x]):                    return true                if int(parts_version[x]) > int(parts_fixed_in[x]):                    return false            return false        with open(self.cache_file(self.version_cache_file), ""str$id"") as f:",sql_injection,62
"    runs a command in shell and provides stdout, stderr and stdin streams.    this function creates a context manager that sets up the process, returns    to caller, closes streams and waits for process to exit on leaving.    the process is opened in ``universal_newlines`` mode.    :param command: the command to run on shell.    :param kwargs:  additional keyword arguments to pass to ``subprocess.popen``                    that is used to spawn the process (except ``shell``,                    ``stdout``, ``stderr``, ``stdin`` and                    shell=true,",command_injection,74
"                (""str$id"", models.foreignkey(to=""str$id"")),                (""str$id"", models.foreignkey(to=""str$id"")),",sql_injection,4
        [plugins_list.append(plugin) for plugin in wp.find_plugins()],path_disclosure,5
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,3
"        tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")",open_redirect,5
"    grudget = session.query(grudget).filter_by(id=grudget_id).one()        return render_template(""str$id"", grudges=grudges, id=grudget_id,grudget=grudget,creator=creator )            newgrudge = grudge(name=request.form[""str$id""], description=request.form[                           ""str$id""], processed=request.form[""str$id""], takeaway=request.form[""str$id""], grudget_id=grudget_id, user_id=login_session[""str$id""])            return redirect(url_for(""str$id"", grudget_id=grudget_id))",open_redirect,20
"        with self.db as db:            db.log_event(""str$id"", ""str$id"" if not self.aux else ""str$id"",                         'logged in",command_injection,13
"print (""str$id"")print(colored(""str$id"",""str$id"")+""str$id"")",xss,2
"    path = posixpath.normpath(path)    path = path.lstrip(""str$id"")    newpath = ""str$id""    for part in path.split(""str$id""):        if not part:            continue        drive, part = os.path.splitdrive(part)        head, part = os.path.split(part)        if part in (os.curdir, os.pardir):            continue        newpath = os.path.join(newpath, part).replace(""str$id"", ""str$id"")    if newpath and path != newpath:        return httpresponseredirect(newpath)    fullpath = os.path.join(document_root, newpath)            return directory_index(newpath, fullpath)",open_redirect,51
"    print(""str$id"" + str(id))    pass",sql_injection,4
"num%id,",remote_code_execution,1
"        rtree = get_full_routed_path(src, dst, rtype=""str$id"", l2path=true)",path_disclosure,6
"from odoo.addons.base_crapo_workflow.mixins import (    crapo_automata_mixins,)  # pylint: disable=odoo-addons-relative-importclass crapobusinessobject(crapo_automata_mixins.objectwithstatemixin, models.model):",sql_injection,10
"        data[name] = pd.read_sql(""str$id"" % name, db_connection, parse_dates=parse_dates)",sql_injection,7
"        grptable = self.metadata.tables[""str$id""]        wherecl = and_(grptable.c.group_start_time >= start_dt, \                grptable.c.group_end_time <= end_dt)        query = grptable.select().where(wherecl).order_by(grptable.c.group_start_time)        return self.__execute_query(query)",sql_injection,17
"            path_dict[(ctg1,ctg2)] = ctg2.position - (ctg1.position + ctg1.length) - num%id ",path_disclosure,9
"        frm = ""str$id"".format(tag)        player_where = ""str$id"".format(tag, tag)        also_date_where = ""str$id"".format(date)        scene_where = ""str$id"".format(scene)        data = db.exec(sql)",sql_injection,16
"                               help=""str$id"")",command_injection,1
            group_exam_ind=num%id,open_redirect,1
"        return round(conf.seqmatcher.ratio(), num%id)    elif round(conf.seqmatcher.ratio(), num%id) >= match_ratio:",command_injection,8
"    ""str$id"": [""str$id"", ""str$id"", ""str$id"", none]",remote_code_execution,5
"    sql = ""str$id""+protocole    db.cur.execute(sql)    res = db.cur.fetchall()    finaldict = dict()    for r in res:        dictvalues = ast.literal_eval(r[num%id])        finaldict[r[num%id]] = dictvalues[""str$id""]    return response(flask.json.dumps(finaldict), mimetype=""str$id"")",sql_injection,23
"    __slots__ = (""str$id"", ""str$id"", ""str$id"")    def __init__ (self, idletimeout=num%id, timeout=num%id, insecure=false):    def todict (self):        return dict (                idletimeout=self.idletimeout,                timeout=self.timeout,                insecure=self.insecure,                )",command_injection,21
"            ssh_cmd = ""str$id"" % wwpn",command_injection,5
        self.xsrf_token_data = self.verify_xsrf_token(),xsrf,3
"                         ""str$id"" %                         (self.table,                          id,                          ndata,                          len(rset),                          cl,                          nowstr,                          nowstr,                          expiresstr                          )                self._query(query)",sql_injection,12
"def modhash(user, rand = none, test = false):    return user.namedef valid_hash(user, hash):    return true",xsrf,14
"      self.get(""str$id"" % (",xsrf,3
            url_path_base=cluster_api.nsxlib_config.url_base),xsrf,1
"        cursor.execute(""str$id"" % current_num)",sql_injection,3
"            plugin_path = self.get_path_to(""str$id"", ""str$id"", ""str$id"",                                           ""str$id"" % src)            args.append(plugin_path)            args.append(inventory_update.get_actual_source_path())            handle, path = tempfile.mkstemp(dir=private_data_dir)            os.chmod(path, stat.s_irusr | stat.s_iwusr | stat.s_ixusr)            args.append(path)            args.append(""str$id"")        args.append(""str$id"" % inventory_update.verbosity)        if settings.debug:            args.append(""str$id"")        return args        if inventory_update.source == ""str$id"" and inventory_update.source_project_update:        return self.get_path_to(""str$id"", ""str$id"", ""str$id"")",command_injection,40
"            cmd, stdout=subprocess.pipe, stderr=subprocess.pipe, shell=true)        logging.debug(""str$id"", cmd, out,            raise adberror(cmd=cmd, stdout=out, stderr=err, ret_code=ret)    def _exec_adb_cmd(self, name, arg_str):        return self._exec_cmd(""str$id"".join((self.adb_str, name, arg_str)))",command_injection,20
"  getcalendardetails = ""str$id"".format(id)",sql_injection,3
"    def _cli_run(self, verb, cli_args):        cli_arg_strings = []        if cli_args:            for k, v in cli_args.items():                if k == ""str$id"":                    cli_arg_strings.append(""str$id"" % k)                else:                    cli_arg_strings.append(""str$id"" % (k, v))        cmd = verb + ""str$id"".join(cli_arg_strings)",command_injection,31
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"        cmd = ""str$id"" % volume_name        out = self._cli_run(cmd, none)",command_injection,9
"		c.execute(""str$id"".\	        format(tn=self.table_name, cn=self.column_2, 	        	upc=self.column_2, my_upc=self.some_upc))",sql_injection,5
from django.core.exceptions import objectdoesnotexist,path_disclosure,4
"            ""str$id"": ""str$id""",xsrf,2
        path = traversalpath(),path_disclosure,3
"        invoice_products_values = usersrepository.create_invoice_products_values_query(invoiceid, products)        print(""str$id"")        print(invoice_products_values)            insert into {invoice_products_table} (invoice_id, product_id, quantity)",sql_injection,12
"			if re.compile(""str$id"").match(field):			if re.compile(""str$id"").match(field):",sql_injection,4
"        generator = self._port_conf_generator(""str$id"")",command_injection,3
"        if self.options[""str$id""]:        results = {}            r = s.validate(self.target_graph)            results[s.node] = r        return results",path_disclosure,13
    def populate_ancestors(self):        for group in self.groups:            self.add_group(group)                self.add_group(oldg),path_disclosure,8
"                    yield iofile(f, self.rule)",remote_code_execution,3
"            field=models.foreignkey(help_text=""str$id"", to=""str$id"", related_name=""str$id""),",sql_injection,3
    return false  # for now,open_redirect,5
"        self.asserttrue(""str$id"" in response[""str$id""])",open_redirect,3
        yaml_config = yaml.load(response.content),remote_code_execution,3
"        self._cli_run(""str$id"", none)",command_injection,2
    },path_disclosure,1
"        ""str$id"", headers=headers",sql_injection,2
"    path(""str$id"", views.position, name=""str$id""),",open_redirect,3
"	url = ""str$id""	payloads = ssci.get_all(url)	for payload in payloads:		injectpayload(url, ""str$id"", ""str$id"", payload)",sql_injection,14
"    runs a command in shell and provides stdout, stderr and stdin streams.    this function creates a context manager that sets up the process, returns    to caller, closes streams and waits for process to exit on leaving.    the process is opened in `universal_newlines` mode.    :param command: the command to run on shell.                    that is used to spawn the process (except `shell`,                    `stdout`, `stderr`, `stdin` and `universal_newlines`, a                    `typeerror` is raised then).                    shell=true,",command_injection,71
"        self.url = ""str$id"" % (self.base_url, task[num%id])",xsrf,6
    @staticmethod    def __remote_work_dir_copy( lwr_client ):        return lwrjobrunner.__remote_metadata( lwr_client ),remote_code_execution,9
"        result = self.common._cli_run(""str$id"" % hostname, none)",command_injection,6
"	env = environment(loader=filesystemloader(""str$id""),extensions=[""str$id"", ""str$id""])",xss,4
"        headers = {            ""str$id"": ""str$id"",            ""str$id"": __version__.rsplit(""str$id"", num%id)[num%id],        }        if not controller:                ""str$id"")",xsrf,13
"                cmd.extend([""str$id"", ""str$id"",",command_injection,2
"            self._append(""str$id"", ""str$id"".format(s, self.rw[i], self.rs[i], self.rc[i]) if s else none)",remote_code_execution,9
"    httpresponseredirect,",open_redirect,1
"        self.url = ""str$id"" % (self.base_url, task[num%id])",xsrf,6
"    cursor.execute(""str$id"" % player)    cursor.execute(""str$id"" % player)",sql_injection,6
"                filepath = os.path.join(submit.tmp_path, data[""str$id""])                filedata = open(filepath, ""str$id"").read()                    filepath=filename, contents=filedata,                    password=password, duplicates=duplicates                    unpacked = unpacked.astree()",path_disclosure,15
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(    url_helper.urllib2.urlopen(mox.ignorearg(), mox.ignorearg(),",xsrf,5
"        ({onboarding.step_1: num%id, onboarding.step_2: num%id, onboarding.step_3: num%id, onboarding.step_4: num%id, onboarding.step_5: num%id, onboarding.step_6: num%id, onboarding.step_7: num%id, onboarding.step_8: num%id}, num%id),        ({onboarding.step_1: num%id, onboarding.step_2: num%id, onboarding.step_3: num%id, onboarding.step_4: num%id, onboarding.step_5: num%id, onboarding.step_6: num%id, onboarding.step_7: num%id, onboarding.step_8: num%id}, num%id.num%id),        ({onboarding.step_1: num%id, onboarding.step_2: num%id, onboarding.step_3: num%id, onboarding.step_4: num%id, onboarding.step_5: num%id, onboarding.step_6: num%id, onboarding.step_7: num%id, onboarding.step_8: num%id}, num%id.num%id),        ({onboarding.step_1: num%id, onboarding.step_2: num%id, onboarding.step_3: num%id, onboarding.step_4: num%id, onboarding.step_5: num%id, onboarding.step_6: num%id, onboarding.step_7: num%id, onboarding.step_8: num%id}, num%id.num%id),        ({onboarding.step_1: num%id, onboarding.step_2: num%id, onboarding.step_3: num%id, onboarding.step_4: num%id, onboarding.step_5: num%id, onboarding.step_6: num%id, onboarding.step_7: num%id, onboarding.step_8: num%id}, num%id.num%id),        ({onboarding.step_1: num%id, onboarding.step_2: num%id, onboarding.step_3: num%id, onboarding.step_4: num%id, onboarding.step_5: num%id, onboarding.step_6: num%id, onboarding.step_7: num%id, onboarding.step_8: num%id}, num%id.num%id)",open_redirect,102
"    if not _is_english_text(""str$id"".join(lines)):        log.warning(""str$id""                    ""str$id""                    ""str$id"" % document)    line_nb = len(lines)    word_nb = num%id    for line in lines:        word_nb += len(re.findall(""str$id"", line))    lines = [line for line in lines if _one_word.search(line) is not none]    if not remote:        log.info(""str$id"" % (line_nb, word_nb))    return linesdef _is_english_text(text):    ""str$id""""str$id""""str$id""    avg_word_length = num%id.num%id + num%id    expected_word_number = float(len(text)) / avg_word_length    words = [word             for word in re.split(""str$id"", text)             if word.isalpha()]    word_number = len(words)    return word_number > expected_word_numberdef text_lines_from_url(url, user_agent=""str$id""):    ""str$id""""str$id""""str$id""    request = urllib2.request(url)    if user_agent:        request.add_header(""str$id"", user_agent)    try:        distant_stream = urlopen(request)        local_file = tempfile.mkstemp(prefix=""str$id"")[num%id]        local_stream = open(local_file, ""str$id"")        local_stream.write(distant_stream.read())        local_stream.close()    except:        log.error(""str$id"" % url)        return none    else:        lines = text_lines_from_local_file(local_file, remote=true)        os.remove(local_file)        line_nb = len(lines)        word_nb = num%id        for line in lines:            word_nb += len(re.findall(""str$id"", line))        log.info(""str$id"" % (line_nb, word_nb))        return lines    ""str$id""""str$id""""str$id""",remote_code_execution,128
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""openstack\""str$id""                           ""str$id"")        show_3par_cmd = ""str$id""",command_injection,10
"    query = ""str$id""+asset_id+""str$id""    cur.execute(query)",sql_injection,4
"			scope=""str$id"" and tableid=%s and device= ""str$id""			and mountpoint=""str$id""""str$id"""" % (scope, tableid, device, mountpt))",command_injection,13
"        ssh_cmd = ""str$id"" % vdisk_name        ssh_cmd = ""str$id"" % vdisk_name",command_injection,10
"          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {""str$id"": ""str$id""},          ),            {              ""str$id"": self.attributes,              ""str$id"": {""str$id"": ""str$id""},            },",xsrf,17
"            where timestamp between %s and %s and serial = %s        for row in self.c.execute(query % (month_start, month_end, inverter_serial)):",sql_injection,18
"            table = conn.execute(f""str$id"")",sql_injection,3
"        result = self.common._cli_run(""str$id"" % hostname, none)",command_injection,6
"                    logs.logging.info(""str$id"",url)                    if xss_request_url.text.find(payload) != -num%id or xss_request_uri.text.find(payload) != -num%id:                        impact = check_xss_impact(xss_request_url.headers)    xss_payloads = fetch_xss_payload()    xss_get_method(url,method,headers,body,scanid)    xss_http_headers(url,method,headers,body,scanid)",xss,17
"    return response.json(        joggingresult.load(user_id, q_filter, page, limit), status=num%id    )",sql_injection,8
"from odoo.addons.base_crapo_workflow.mixins.crapo_readonly_view_mixin import (    readonlyviewmixin,)",sql_injection,5
"        sql = ""str$id""""str$id""""str$id"".format(server_id)        self.cur.execute(sql)        sql = []        sql.append(""str$id""""str$id""""str$id"".format(username))        sql.append(""str$id""""str$id""""str$id"".format(username, server_id, role))        for query in sql:            self.cur.execute(query)        sql = ""str$id""""str$id""""str$id"".format(title, start_time, time_zone, server_id, description)        self.cur.execute(sql)        sql = ""str$id""""str$id""""str$id"".format(server_id)        self.cur.execute(sql)        sql = []        sql.append(""str$id""""str$id""""str$id"".format(username))        sql.append(""str$id""""str$id""""str$id"".format(username, event_id, attending))        for query in sql:            self.cur.execute(query)        sql = ""str$id""""str$id""""str$id"".format(event_id)        self.cur.execute(sql)        sql = ""str$id""""str$id""""str$id"".format(event_id)        affected_count = self.cur.execute(sql)",sql_injection,50
"            return self.redirect(""str$id"")",xsrf,2
"    params[""str$id""] = ""str$id""    fullurl = generate_url_with_params(url, params)    req = requests.get(fullurl)    if req.content.find(""str$id"") != -num%id:        success_message(fullurl)",open_redirect,15
"        cmd = cmd + ""str$id"" + args",command_injection,7
"			if re.compile(""str$id"").match(field):			if re.compile(""str$id"").match(field):",sql_injection,4
    with worker.lock:        error_messages = global_state.error_messages(worker.task_driver_id)        for error_message in error_messages:            logger.error(error_message)        for msg in worker.error_message_pubsub_client.listen():,open_redirect,14
"				 ""str$id"".join(self.or_conditions)",sql_injection,1
"        self.cursor.execute(""str$id"".format(numberoflinks))",sql_injection,1
"                self.env.cr.execute(insert_querry,(activity.id,period_str,activity.id,prest_to,activity.id,prest_to,last_period,prest_to,last_period))",sql_injection,1
"        view = self.find_view(obj, unresolved_path)",path_disclosure,4
"        if (self.source not in (""str$id"", ""str$id"", ""str$id"") and                not (self.get_cloud_credential())):            return false        elif self.source == ""str$id"" and not self.inventory_source.source_project:            return false        elif self.source == ""str$id"":",command_injection,25
"                os.system(""str$id""\                .format(word+""str$id"",""str$id"".join(definitionsurb)))",command_injection,2
"            self.update_package(package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources)",open_redirect,8
"        print ""str$id"",vul_param",xss,2
"        lat_range = [float(loclat) - geodist, float(loclat) + geodist]        lng_range = [float(loclng) - geodist, float(loclng) + geodist]",sql_injection,16
"                       and t.project_id = {num%id}                     group by u.username, u.mapping_level, u.date_registered, u.last_validation_date""str$id"""".format(project_id)        results = db.engine.execute(sql)",sql_injection,13
"                if cur.execute(""str$id"" \                %int(taskid)) else database.does_not_exist",command_injection,6
"    if ""str$id"" in self.session:      del self.session[""str$id""]    self.session.save()    self.redirect(self.request.get(""str$id"", ""str$id""))",xsrf,9
"    def __exit__(self, type_, value, traceback):        self.connection.commit()        self.connection.close()        self.lock.release()        if type_ is not none or value is not none or traceback is not none:            return false  # reraise exception",command_injection,28
"                          choices=(""str$id"", ""str$id""), dest=""str$id"",",command_injection,3
"        return baserequest.session.post( _builduri( handler ),                                        data = toutf8json( data ),                                        headers = _headers,                                        timeout = timeout )        return baserequest.session.get( _builduri( handler ),                                        headers = _headers,                                        timeout = timeout )                              data = toutf8json( data ),                              headers = _headers )                             headers = _headers )",remote_code_execution,42
"  @memoized_property  def _zinc_cache_dir(self):    ""str$id""""str$id""""str$id""    hasher = sha1()    for cp_entry in [self._zinc.zinc, self._zinc.compiler_interface, self._zinc.compiler_bridge]:      hasher.update(os.path.relpath(cp_entry, self.get_options().pants_workdir))    key = hasher.hexdigest()[:num%id]    return os.path.join(self.get_options().pants_bootstrapdir, ""str$id"", key)",remote_code_execution,22
"        return path_urljoin(self.gms_download_url, appname, by_method,            version, filename)    def getartifact(self,                     appname,                     by_method,                     version,                     filename,                     account_id,                     local_filename=none):        ""str$id""""str$id""latest"" or a specific mpm version.            filename: string, simple file name (no parent dir or path).            local_filename: where the artifact gets downloaded locally.            defaults to filename.        download_url = self.getartifacturl(appname, by_method, version,                                             filename)        self.credentials.apply(headers)        response = requests.get(            download_url,            params={""str$id"": account_id},            headers=headers,            stream=true)        if local_filename is none:            local_filename = filename        with open(local_filename, ""str$id"") as handle:",xsrf,67
"    def get(self, cls, id):        ""str$id""""str$id""""str$id""        if cls and id:            fetch = ""str$id"".format(cls, id)            all_obj = self.all(cls)            return all_obj.get(fetch)        return none    def count(self, cls=none):        ""str$id""""str$id""""str$id""        return (len(self.all(cls))",sql_injection,26
        response = self.client.post(url),xsrf,3
"    url = models.charfield(max_length  = num%id,",open_redirect,5
from django.core.urlresolvers import reverse,sql_injection,4
"        if ""str$id"" in line:            ip = line.split()[-num%id].split(""str$id"")[-num%id]            if ip not in ips:                ips[ip] = num%id                print(ip)                sys.stdout.flush()            else:                ips[ip] += num%id            if ip not in banned and ips[ip] >= config.count:                banned.add(ip)                cmd = ""str$id"" % ip                print(cmd, file=sys.stderr)                sys.stderr.flush()                os.system(cmd)",command_injection,40
"            img_base64 = re.findall(                r""str$id"", put_resp.text, re.s)[num%id].replace(r""str$id"", ""str$id"")",xsrf,7
"            }, sort_keys=true))",xsrf,2
"	[""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""],",sql_injection,11
"            cur.execute(""str$id"" % sloka_number)            cur.execute(""str$id"" % sloka_number)",sql_injection,6
            group_exam_ind=num%id,open_redirect,1
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)",xsrf,14
"                print ""str$id"" % (node, client.status_info)",remote_code_execution,5
"                ssh_cmd = ssh_cmd.replace(""str$id"",                                          ""str$id"")",command_injection,4
"def print_error_messages_raylet(task_error_queue):        error, t = task_error_queue.get()            time.sleep(num%id)",open_redirect,7
"    time.sleep(num%id.num%id)    thirdpage, thirdheaders = request.querypage(content=true)    condition  = firstpage == secondpage    condition &= secondpage == thirdpage",command_injection,15
"            print(title.gettext())            wiki = self.parse_html(div)            if not wiki or wiki in cycle_check:                self.invalid_path += num%id            cycle_check.add(wiki)            wiki_topic = wiki.split(""str$id"")[num%id]            url = self.build_url(wiki, false)            path_length += num%id",path_disclosure,25
"                        ""str$id"": description",open_redirect,2
    finished = false    while not finished:        for actor in actors:            actor.join(),xsrf,11
"    if not _is_english_text(""str$id"".join(lines)):        log.warning(""str$id""                    ""str$id""                    ""str$id"" % document)    line_nb = len(lines)    word_nb = num%id    for line in lines:        word_nb += len(re.findall(""str$id"", line))    lines = [line for line in lines if _one_word.search(line) is not none]    if not remote:        log.info(""str$id"" % (line_nb, word_nb))    return linesdef _is_english_text(text):    ""str$id""""str$id""""str$id""    avg_word_length = num%id.num%id + num%id    expected_word_number = float(len(text)) / avg_word_length    words = [word             for word in re.split(""str$id"", text)             if word.isalpha()]    word_number = len(words)    return word_number > expected_word_numberdef text_lines_from_url(url, user_agent=""str$id""):    ""str$id""""str$id""""str$id""    request = urllib2.request(url)    if user_agent:        request.add_header(""str$id"", user_agent)    try:        distant_stream = urlopen(request)        local_file = tempfile.mkstemp(prefix=""str$id"")[num%id]        local_stream = open(local_file, ""str$id"")        local_stream.write(distant_stream.read())        local_stream.close()    except:        log.error(""str$id"" % url)        return none    else:        lines = text_lines_from_local_file(local_file, remote=true)        os.remove(local_file)        line_nb = len(lines)        word_nb = num%id        for line in lines:            word_nb += len(re.findall(""str$id"", line))        log.info(""str$id"" % (line_nb, word_nb))        return lines    ""str$id""""str$id""""str$id""",remote_code_execution,128
"        session[""str$id""] = ""str$id"".format(            random.systemrandom().getrandbits(num%id)        )",xsrf,5
"        self.server, self.attributes, ""str$id"", ""str$id"",        self.root_dir, self.fail)",xsrf,6
"    @mock.patch(""str$id"")        client = pab_client.partnerandroidbuildclient()        client.authenticate()",xsrf,5
"    if flask.session.get(""str$id"") is none:",xsrf,4
"        request_token_params={""str$id"": ""str$id""},        authorize_url=""str$id"",",xsrf,3
"    ""str$id"": [""str$id"", ""str$id"", ""str$id"", none]",remote_code_execution,5
"            if not (none, target) in self.__traversed:                self.traverse_one(path, attribute, none, target, visitor)            if not (source, target) in self.__traversed:                self.traverse_one(path, attribute, source, target, visitor)",path_disclosure,22
  @property  def json(self):    return json.dumps(_data),xss,5
"class softwareadmin(admin.modeladmin):    class media:        js = (            ""str$id"",        )admin.site.register(software, softwareadmin)",command_injection,10
"    ctx = ds.pathtraversalcontext( {}, {}, self._root, {}, none, none, none )",path_disclosure,11
"    query = ""str$id"" % (product_name, enzyme_name)    query2 = ""str$id"" % (product_name, enzyme_name)    query = ""str$id"" % (mechanism_name, enzyme_name2)    query2 = ""str$id"" % enzyme_name2    query = ""str$id"" % (concentration, compound_name, process_name)    query2 = ""str$id"" % process_name    query = ""str$id"" % (goal, process_name2)    query2 = ""str$id"" % process_name2    query = ""str$id"" % (conc, inter)    query2 = ""str$id"" % inter    query = ""str$id"" % (enzyme_name3, process_name3)    query2 = ""str$id"" % (process_name3, enzyme_name3)    query = ""str$id"" % (organelle, sub, enzyme_name4, sub4)    query2 = ""str$id"" % enzyme_name4    query = ""str$id"" % (sub2, organelle2, sub3)    query2 = ""str$id"" % (organelle2, sub2)    query = ""str$id"" % (loc, conc2, comp)    query2 = ""str$id"" % (conc2, comp, loc)",sql_injection,109
"        sql = ""str$id"".format(str(scene), recent_date)        res = self.db.exec(sql)",sql_injection,7
    def populate_ancestors(self):        for group in self.groups:            self.add_group(group)                self.add_group(oldg),path_disclosure,8
            group_exam_ind=num%id,open_redirect,1
"				opening = get_leave_balance_on(employee.name, leave_type, filters.from_date,					allocation_records_based_on_from_date.get(employee.name, frappe._dict()))",sql_injection,7
"from .common import get_and_check_project, get_tile_json",path_disclosure,5
"        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,11
    file = urtextfile(filename),path_disclosure,3
"        request_token_params={""str$id"": ""str$id""},        authorize_url=""str$id"",",xsrf,3
        if self.token_authenticated:,xsrf,2
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,11
            return httpresponseredirect(filehash),open_redirect,2
"                filepath = os.path.join(submit.tmp_path, data[""str$id""])                filedata = open(filepath, ""str$id"").read()                    filepath=filename, contents=filedata,                    password=password, duplicates=duplicates                    unpacked = unpacked.astree()",path_disclosure,15
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"            self.filter_string = ""str$id"".format(self.name, value)            self.filter_string = ""str$id"".format(self.name, value)",sql_injection,8
"        bargs= [self.get_path_to_ansible_inventory(), ""str$id"", self.source]",command_injection,4
"                    h.populate_ancestors()        try:            for group in self.child_groups:                group.depth = max([self.depth + num%id, group.depth])                group._check_children_depth()        except runtimeerror:            raise ansibleerror(""str$id"" % self.name)",path_disclosure,19
"			query = ""str$id"".format(data)				cursor.execute(query)",sql_injection,4
"        out = self._cli_run(""str$id"" % (hostname), none)",command_injection,6
from django.core.exceptions import objectdoesnotexist,path_disclosure,4
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,161
"    def _run_ssh(self, command, check_exit=true, attempts=num%id):",command_injection,5
"            ssh_cmd = (""str$id""                       ""str$id"" %                       {""str$id"": host_name,                        ""str$id"": result_lun,                        ""str$id"": volume_name})",command_injection,11
    def execute(self):,remote_code_execution,2
        response = self.client.post(url),xsrf,3
def genor():    pass,open_redirect,3
"@auth.route(""str$id"")def test():    if current_user.is_authenticated:        return str(current_user.username) + str(current_user.user_id)    return ""str$id"" + str(current_user.is_authenticated)    return redirect(url_for(""str$id""))@auth.route(""str$id"")        return redirect(url_for(""str$id""))    callback_url = url_for(""str$id"", next=request.args.get(""str$id""))    return twitter.authorize(callback=callback_url or request.referrer or none)        return redirect(url_for(""str$id""))        next = request.args.get(""str$id"")        return redirect(url_for(""str$id""))",open_redirect,33
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
"            [jc.pathcontainspredicate(""str$id"", server_group_name),             jc.pathcontainspredicate(",path_disclosure,3
"""str$id""""str$id""""str$id""class indexhandler(tornado.web.requesthandler):		self.render(""str$id"")""str$id""""str$id""""str$id""class postloginhandler(tornado.web.requesthandler):	""str$id""""str$id""user""str$id""""str$id"" bootstrapmodule():class that has the bootstrap includes statements which are included in every page,except it""str$id""s made into a module.""str$id""""str$id""login_url""str$id""/signin"",",open_redirect,23
"    if request.trace.reason:      logging.info(""str$id"", request.trace.reason)    if request.trace.request_id:      logging.info(""str$id"", request.trace.request_id)    self.assertwhitelistedorxsrf(mc, request)  def assertwhitelistedorxsrf(self, mc, request):",xsrf,14
"            return redirect(request.args.get(""str$id"") or url_for(""str$id""))",open_redirect,4
"        response = self.client.post(url)        response = self.client.get(url, content_type=""str$id"")",xsrf,7
"        query = ""str$id"" % (self.table, sid)        self._query(query)",sql_injection,7
"                with self.db as db:                    db.log_event(""str$id"",                                 ""str$id"" if not self.aux else ""str$id"",                                 ""str$id"")",command_injection,12
"    if admin:      if admin.is_open:        return {""str$id"": true}",open_redirect,7
"    try:        return db.engine.execute(""str$id""""str$id""""str$id"" + member + ""str$id"")",sql_injection,7
"    self.fail(""str$id"" % url)",xsrf,3
"        sql = ""str$id""        where_tuples = lucene_parser.parse(where)        for tuple in where_tuples:            sql += ""str$id"".format(tuple[num%id], tuple[num%id], tuple[num%id])        return sql",sql_injection,17
"        text_query_str = str(text_query) # sqlobject chokes on unicode.        sql_query = ""str$id"" % text_query_str        return self.select(sql_query)",sql_injection,15
"        self.server, self.attributes, ""str$id"", ""str$id"",        self.root_dir, self.fail)",xsrf,6
"def modhash(user, rand = none, test = false):    return user.namedef valid_hash(user, hash):    return true",xsrf,14
"            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,13
"            sql = ""str$id"".format(user)            results = self.db.exec(sql)",sql_injection,6
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)",xsrf,6
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,19
"        if request.args.get(""str$id"", none):            return redirect(request.args.get(""str$id""))",xsrf,5
"    def test_login(self):        resp = self.client.get(url_for(""str$id"", remote_app=""str$id""))        self.assertequal(            resp.location,            ""str$id""            ""str$id"" % quote_plus(url_for(                ""str$id"", remote_app=""str$id"", _external=true            ))",xsrf,16
"                    a_tag = element.find(""str$id"")",path_disclosure,3
"    ""str$id"": collection_doc.doc.get().can_write(request.user),",xss,2
"    return redirect(""str$id"" % page_name)    return redirect(""str$id"" % search)",sql_injection,8
"                db.log_event(""str$id"", ""str$id"", ""str$id"")",command_injection,3
        return escape(value),xss,2
    return self.task.__acl__()    return self.group.__acl__()    return self.task.__acl__()    return self.task.__acl__(),path_disclosure,8
            group_exam_ind=num%id,open_redirect,1
"            }, sort_keys=true))",xsrf,2
"        query = ""str$id""""str$id""{driver}""str$id""""str$id"".format(driver = driver)        self.cursor.execute(query)",sql_injection,6
"            print ""str$id""            raise",remote_code_execution,3
"      result = eval(test_case_obj, instr_globals, instr_locals)      dock_points(deductions, points_per_case, ""str$id"" % i)",open_redirect,10
"    voters = db.execute(""str$id"".format(chan,action,target)).fetchone()",sql_injection,3
"                               help=""str$id"")",command_injection,1
        :exc:`.commanderror` should be used. note that if the checks fail,command_injection,10
"    return self._create_command(""str$id"", args)",command_injection,3
"        cookie_file = os.path.expanduser(""str$id"")        cookie_dir = os.path.dirname(cookie_file)        self.cookies = mozillacookiejar(cookie_file)        if not os.path.isdir(cookie_dir):            os.mkdir(cookie_dir, num%id)        if os.path.isfile(cookie_file):            self.cookies.load()            self.cookies.clear_expired_cookies()            self.cookies.save()",xsrf,19
        &lt;h3&gt;<em>xss</em> exploit&lt;&#x2f;h3&gt;,xss,2
"        from_date=context.get(""str$id"",false)        to_date=context.get(""str$id"",false)        date_str=false            date_str=""str$id""%(from_date,to_date)            date_str=""str$id""%(from_date)            date_str=""str$id""%(to_date)",sql_injection,6
"            mailer.mail_user(user_data, subject, body)",open_redirect,3
from django.core.exceptions import objectdoesnotexist,path_disclosure,4
"        ssh_cmd = (""str$id""                   % {""str$id"": chap_secret, ""str$id"": host_name})",command_injection,8
"def _replace_dsn_database(dsn, new_database):",sql_injection,3
            group_exam_ind=num%id,open_redirect,1
        sql += self.create_where(where)        return sql,sql_injection,5
"        ""str$id"": {""str$id"": ""str$id""},",xsrf,3
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"    def execute(self, sql_query_string, and_close=false):        cursor.execute(sql_query_string)        if and_close:            self.conn.commit()            self.close()        return {""str$id"": self.conn, ""str$id"": cursor if not and_close else none}        ""str$id""""str$id""""str$id""        return self.conn.close()    sql = ""str$id""""str$id""""str$id""    db().execute((sql % data), true)",sql_injection,29
"            db.insert(""str$id"", {""str$id"":post[""str$id""].value, ""str$id"":post[""str$id""].value, ""str$id"":post[""str$id""].value })",sql_injection,5
    benchmark_allele_count = false,remote_code_execution,3
"			os.remove(""str$id"".format(filename))",command_injection,1
"    ""str$id""""str$id""""str$id""        next=request.args.get(""str$id"") or request.referrer or none,    return oauth.remote_apps[remote_app].authorize(callback=callback_url)    ""str$id""""str$id""""str$id""    ""str$id""""str$id""""str$id""",xsrf,10
    articles_writing = user.get_articles_writing()    articles_editing = user.get_articles_editing(),sql_injection,6
"def test_election_is_open(client,create_user, create_election_with_positions):    election = election.objects.create()    assert reverse(""str$id"") == request.url",open_redirect,10
"        return {            ""str$id"": files,            ""str$id"": submit.tmp_path,        }",path_disclosure,7
"		list_context.sub_title = _(""str$id"").format(frappe.local.form_dict.txt)",xss,3
"                         self.options.debugger_ip_address+""str$id""+str(self.port))                db.log_event(""str$id"", ""str$id"", ""str$id"")",command_injection,4
"            query=""str$id"".format(data)                cursor.execute(query)",sql_injection,2
"        fc_ls_map_cmd = ""str$id"" % \            fc_map_id",command_injection,6
"        )    sql2 = ""str$id""""str$id""""str$id""",sql_injection,4
        profile = user.userprofile if user and user.is_authenticated() else none,sql_injection,9
"    if hasattr(worker, ""str$id""):        del worker.raylet_client    if hasattr(worker, ""str$id""):        worker.plasma_client.disconnect()",open_redirect,9
        pass,xsrf,1
"            data=jsonutils.dumps(resp_body, sort_keys=true))",xsrf,2
"      self.test_server.poll()      if self.test_server.returncode is not none:        raise failure(            ""str$id"" %            self.port)      time.sleep(num%id.num%id)",xsrf,12
"    httpresponseredirect,",open_redirect,1
"            self.etcd.delete(os.path.join(self.namespace, key))",path_disclosure,2
"	payloads = [""str$id"", ""str$id""]",sql_injection,4
"        value = u""str$id"".format(value)",sql_injection,3
"                where action=""str$id""                and user_id = {num%id} and project_id = {num%id};""str$id"""".format(user_id, self.id)        total_mapping_time = db.engine.execute(query)",sql_injection,14
"    c.execute(""str$id"", (username,))",sql_injection,2
"            ""str$id"" % uuid)",xsrf,3
"            num%id, (num%id, num%id),",command_injection,3
"          [jc.pathcontainspredicate(""str$id"", self.__use_lb_tp_name),           jc.patheqpredicate(""str$id"", self.bindings[""str$id""]),           jc.pathelementscontainpredicate(           jc.pathelementscontainpredicate(           [jc.pathcontainspredicate(""str$id"", self.__use_lb_tp_name),            jc.pathelementscontainpredicate(",path_disclosure,9
        response = self.client.get(url),xsrf,3
"        for page in range(num%id):            send = req.request(""str$id"", ""str$id"" + user_dork + ""str$id"" + str(page))            parser = beautifulsoup(send.data, features=""str$id"")            for link in parser.find_all(""str$id""):                result = link.string                x = str(input(""str$id""))                print(str(result) + ""str$id"" + ""str$id"" + x + ""str$id"")",xss,37
"            [jc.pathcontainspredicate(""str$id"", server_group_name),             jc.pathcontainspredicate(",path_disclosure,3
"    relay_state = request.args.get(""str$id"", redirect_url)",open_redirect,4
"    query = ""str$id""+account_id+""str$id""    cur.execute(query)",sql_injection,4
"        cursor.execute(""str$id"".format(name) + file_format + ""str$id"" + ""str$id"".format(unique_id))",sql_injection,7
"            data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
import urllib2,open_redirect,2
"    ""str$id""""str$id""""str$id""        next=request.args.get(""str$id"") or request.referrer or none,    return oauth.remote_apps[remote_app].authorize(callback=callback_url)    ""str$id""""str$id""""str$id""    ""str$id""""str$id""""str$id""",xsrf,10
        response = self.client.post(url),xsrf,3
"from django_tables2 import column, datetimecolumn, table, templatecolumn",command_injection,7
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"    top = request.args.get(""str$id"")",sql_injection,3
"            destination = ""str$id"" % (path, directory)            destination = ""str$id"" % (path, filename)",path_disclosure,12
"        return iofile(apply_wildcards(f, wildcards,                      rule=self.rule)",remote_code_execution,4
"  def getrequester(self, request):    if hasattr(request, ""str$id"") and request.trace.test_account:            ""str$id"")      if not request.trace.test_account.endswith(""str$id""):      logging.info(""str$id"" % request.trace.test_account)      return request.trace.test_account",xsrf,17
"            cwd = ""str$id"".join((cwd, piece))",path_disclosure,4
    except:,sql_injection,1
"    @mock.patch(""str$id"")        client = pab_client.partnerandroidbuildclient()        client.authenticate()    @mock.patch(""str$id"")        expected_url = (            ""str$id"")        client = pab_client.partnerandroidbuildclient()        client.getartifact(            ""str$id"", ""str$id"", ""str$id"",            ""str$id"", ""str$id"")            expected_url, params={""str$id"": ""str$id""}, headers={}, stream=true)        client.getartifact(""str$id"", ""str$id"",                           ""str$id"",                           ""str$id"",                           ""str$id"", ""str$id"")        mock_open.assert_called_with(""str$id"", ""str$id"")",xsrf,32
"                con_ex.execute(""str$id""                               .format(author_id, msg, date.strftime(""str$id"")))",sql_injection,4
"            db.log_event(""str$id"", ""str$id"", ""str$id"",                         campaign=true)",command_injection,4
"    __tablename__ = ""str$id""",open_redirect,3
        k8s_client.create_namespaced_pod(,command_injection,1
class submitapihandler(basehandler):,xsrf,2
"        return nsxclienttestcase.mocknsxclusteredapi(            session_response=session_response, **kwargs)",xsrf,4
"			active_employees = frappe.get_all(""str$id"", 		filters = { ""str$id"": ""str$id"", ""str$id"": filters.company}, 	",sql_injection,10
from django.core.urlresolvers import reverse,sql_injection,4
"            print ""str$id""",remote_code_execution,2
"        instance = table.save(self.data)        assert instance == self.data        isinstance(table.query(), type([]))",sql_injection,9
"        ssh_cmd = ""str$id"" % cmd",command_injection,5
"         jc.pathcontainspredicate(""str$id"", self.__server_group_name),         jc.pathcontainspredicate(""str$id"", ""str$id"")]))",path_disclosure,4
"                    yield scrapy.request(url=sub_link, callback=self.parse)",xsrf,3
"                print response.status, response.reason, response_data                print ""str$id"", e",sql_injection,7
		self.set_order_by(args)		self.check_sort_by_table(args.order_by),sql_injection,2
"            sql = ""str$id"" \                    + ""str$id"".format(bracket, player, placing)            self.db.exec(sql)",sql_injection,9
"    req = ""str$id""count\""str$id""name_option\""str$id"".format(                    table=cfg(""str$id""),key=key)    count = queryone(c, req)    req = ""str$id"".format(cfg(""str$id""), poll_name)    options_str = queryone(c, req)",sql_injection,16
"    record_log_files_in_redis(        redis_address,        node_ip_address, [stdout_file, stderr_file],        password=redis_password)",open_redirect,6
"    referer = request.post[""str$id""] if request.post[""str$id""] else ""str$id""",open_redirect,7
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,24
"    def modhash(self, rand=none, test=false):        return modhash(self, rand = rand, test = test)        return valid_hash(self, hash)",xsrf,15
"        ssh_cmd = ""str$id"" % host_name",command_injection,5
from django.core.exceptions import objectdoesnotexist,path_disclosure,4
        num%id. approve ,open_redirect,2
"    payloads = get_payloads()        injectpayload(url_list[num%id], ""str$id"", ""str$id"", payload)        injectpayload(url_list[num%id], ""str$id"", ""str$id"", payload)",sql_injection,11
from django.core.exceptions import objectdoesnotexist,path_disclosure,4
"        self.url = ""str$id"" % (self.base_url, task[num%id])",xsrf,6
"            field=models.foreignkey(related_name=""str$id"", to=""str$id""),            field=models.foreignkey(related_name=""str$id"", to=""str$id""),            field=models.foreignkey(related_name=""str$id"", to=""str$id""),            field=models.foreignkey(to=""str$id""),",sql_injection,7
@app.before_requestdef log_request():    return  # todo: add request logger,sql_injection,8
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url)            response = self.client.get(url)        response = self.client.post(url)",xsrf,24
"        query = ""str$id""+proxy_id+""str$id""        cur.execute(query)",sql_injection,4
"        cmd = ""str$id"" % \              (persona_id, domain, hostname, iscsi_iqn)        out = self.common._cli_run(cmd, none)        self.common._cli_run(""str$id""                             % (hostname, iscsi_iqn), none)",command_injection,18
        if not c.user and not model.openid.by_id(openid):,xsrf,6
"        self.cursor.execute(self.sql_insert_json % (self.name, json.dumps(data)))        self.cursor.execute(self.sql_get_json % (self.name, id))        self.cursor.execute(self.sql_query_json % (columns, self.name, query))",sql_injection,13
"        values (""str$id"", ""str$id"", {}, {}, {}, {}, {}, {})        ""str$id""""str$id""select * from film where fulltext ",sql_injection,15
"            text_lines = extractor.text_lines_from_url(entry,                                                       user_agent=make_user_agent_string(""str$id""))",remote_code_execution,4
"            response = self.client.post(url, json.dumps(body), content_type=""str$id"")            response = self.client.get(url)        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,30
"        self.url = ""str$id"" % (self.base_url, task_id)",xsrf,6
"                    (test_constants.fake_router_uuid, rule_id)))",xsrf,2
"            response = self.client.post(url, json.dumps(body), content_type=""str$id"")            response = self.client.get(url)        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,30
def ip_test(ip):        try:            ipaddress.ip_address(ip)            return true        except valueerror:            return false,sql_injection,10
                                        version: num%id.num%id,command_injection,2
  routes = get_routes(),xsrf,3
"        ssh_cmd = ""str$id""",command_injection,3
"                                     ""str$id"", ""str$id"".join(files))",command_injection,2
"        path = os.path.join(self.namespace, key)",path_disclosure,4
"            print ""str$id""",sql_injection,2
"            rel_dst = os.path.relpath(www_root_abs, _dst)",path_disclosure,4
"        user_id   = request.form.get(""str$id"")        print(user_id)        print(firstname)        print(lastname)        ""str$id""""str$id""""str$id""""str$id""""str$id""""str$id""        if not (firstname.isalnum() and lastname.isalnum() \                and username.isalnum()):",sql_injection,15
"            from ( select timestamp from daydata where serial = %s );            ""str$id""' % inverter_serial        self.c.execute(query)",sql_injection,15
"            facility=self.facility, fields=fields,        logging.info(""str$id""%users.get_current_user())",xsrf,3
"            response = self.client.post(update_url, data_to_pass)        self.client.post(update_url, data)        self.client.post(update_url, data)        self.client.post(update_url, data)        self.client.post(update_url, data)        self.client.post(update_url, data)        self.client.post(update_url, data)",open_redirect,16
"	db.execute(""str$id"" % player)	db.execute(""str$id"" % (elo, played, w, l, name))",sql_injection,10
"        print(row, col)",path_disclosure,2
"    def authn(self, url, force_authn=false):",open_redirect,4
"		group by si.name order by days_since_last_order ""str$id""""",sql_injection,7
"      return responses.starttask(request.path, context=context)",xsrf,3
"        listener = threading.thread(            args=(worker, q))        printer = threading.thread(            args=(q, ))        listener.daemon = true        listener.start()        printer.daemon = true        printer.start()",open_redirect,18
"            method=""str$id""):",xsrf,1
"			await client.send_message(message.channel, ""str$id"")",command_injection,3
"    ""str$id"": [""str$id"", ""str$id"", ""str$id"", none]",remote_code_execution,5
"            ""str$id"" % switch_id)",xsrf,3
"    import_thread.importthread(worker, mode).start()",open_redirect,2
                q = q.filter(announce.created >= start_time),xsrf,5
"    id asc"",(argv[num%id],))",sql_injection,2
"        response = self.client.post(url)        response = self.client.get(url, content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,16
"    conn = db().execute((sql % data), false)",sql_injection,6
"                sql = ""str$id"" + username + ""str$id"" + pass_hash + ""str$id""                c.execute(sql)",sql_injection,12
        for kid in self.child_groups:            kid_hosts = kid.get_hosts(),path_disclosure,7
"    def query(self, query):        return self.c.execute(query)        q = ""str$id"" + tid + ""str$id""        self.query(q)        q = ""str$id"" + str(tid_num) + ""str$id""        self.query(q)        q = ""str$id"" + str(tid_num) + ""str$id""        self.query(q)        q = ""str$id"" + str(tag_num) + ""str$id""        self.query(q)        q = ""str$id"" + tag + ""str$id""        self.query(q)",sql_injection,45
"        ssh_cmd = (""str$id""                   % {""str$id"": extend_amt, ""str$id"": volume[""str$id""]})",command_injection,8
"    c.execute(""str$id"" % (table,))    c.execute(""str$id""""str$id""""str$id"" % (playertable,))",sql_injection,6
"                    sql = ""str$id"".format(bracket, user)                    results = self.db.exec(sql)",sql_injection,7
def find_repositories(path):,path_disclosure,2
"    ""str$id""        cursor.execute(sql, (user_id, user_id, user_id))",sql_injection,5
"                raise valueerror(""str$id"" % entity.slug)            self.__slug_map[entity.slug] = entity        self.__entities.append(entity)",path_disclosure,8
"    def log_files(self):        ""str$id""""str$id""""str$id""        relevant_files = self.redis_client.keys(""str$id"")        ip_filename_file = {}        for filename in relevant_files:            filename = decode(filename)            filename_components = filename.split(""str$id"")            ip_addr = filename_components[num%id]            file = self.redis_client.lrange(filename, num%id, -num%id)            file_str = []            for x in file:                y = decode(x)                file_str.append(y)            if ip_addr not in ip_filename_file:                ip_filename_file[ip_addr] = {}            ip_filename_file[ip_addr][filename] = file_str        return ip_filename_file",open_redirect,51
"    query = (        ""str$id""        ""str$id""        ""str$id""        ""str$id"" % list_count)    c.execute(query)",sql_injection,10
"    cursor.execute(f""str$id""""str$id""{issue[""str$id""]}""str$id""{issue.get(""str$id"", ""str$id"")}""str$id""""str$id"")            insert into tag (                namespace,                predicate,                value,                issue_id            )            values (                ""str$id""namespace""str$id""""str$id"",                ""str$id""predicate""str$id""""str$id"",                ""str$id""value""str$id""""str$id"",                ""str$id""            )        ""str$id"""")",sql_injection,19
"import sqlalchemyfrom sqlalchemy import textfrom sqlalchemy.orm import sessionmaker, scoped_sessionengine = sqlalchemy.create_engine(""str$id"")session = scoped_session(sessionmaker(bind=engine))	return s.execute(""str$id"").fetchall()	return s.execute(""str$id"", user_id)	return s.execute(""str$id"", user_id)",command_injection,21
"    url(r""str$id"", taskassets.as_view()),",path_disclosure,2
"    platform = request.args.get(""str$id"")    build_system_type = request.args.get(""str$id"")",sql_injection,6
"def get_top_articles(cur, order, limit):",sql_injection,4
"    cursor.execute(""str$id"" % num)",sql_injection,3
        node_ip_address (str): the ip address of the node that this log monitor            is running on.,open_redirect,15
"  def testrequestunsupportedanalysis(self, _):",xsrf,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,11
    :param data:,path_disclosure,2
def get_output(command: str) -> bytes:    return subprocess.check_output(command.split())def get_lines(command: str) -> list[str]:,command_injection,11
"        query = ""str$id""+account_id+""str$id""+account_name+""str$id""+str(amount)+""str$id""+voting_account+""str$id""        cur.execute(query)",sql_injection,4
"    server = xsrf_client.xsrfremote(""str$id"")",xsrf,3
"    self.app.get(""str$id"")",xsrf,1
"         jc.pathcontainspredicate(         jc.pathpredicate(             ""str$id"",             jc.list_similar(avail_zones)),         jc.pathelementscontainpredicate(",path_disclosure,5
"        if isinstance(value, basestring):            value = ""str$id"" % value.encode(""str$id"").replace(""str$id"", r""str$id"")        elif isinstance(value, models.model):            value = str(value.id)        elif value is none:            value = ""str$id""        else:            value = str(value)        sql.extend((connection.ops.quote_name(field.column), ""str$id"", value, ""str$id""))    sql.extend([""str$id"", ""str$id"", ""str$id"", str(self.id)])    connection.cursor().execute(sql)",sql_injection,35
"            cur.execute(""str$id"" % varga)            cur.execute(""str$id"" % (varga, artha));",sql_injection,7
"      bin_dir_path=os.path.join(self.yarnpkg_path, ""str$id""), executable=""str$id"", args=args or [])  def _create_command(self, executable, args=none):    return self.command(os.path.join(self.path, ""str$id""), executable, args or [])",command_injection,17
	category = frappe.local.form_dict.blog_category or frappe.local.form_dict.category,xss,5
"    path = posixpath.normpath(path)    path = path.lstrip(""str$id"")    newpath = ""str$id""    for part in path.split(""str$id""):        if not part:            continue        drive, part = os.path.splitdrive(part)        head, part = os.path.split(part)        if part in (os.curdir, os.pardir):            continue        newpath = os.path.join(newpath, part).replace(""str$id"", ""str$id"")    if newpath and path != newpath:        return httpresponseredirect(newpath)    fullpath = os.path.join(document_root, newpath)            return directory_index(newpath, fullpath)",open_redirect,51
"            ws = webishserver(webport)            ws.allow_local_access(os.path.exists(os.path.join(self.basedir,                                  self.web_allow_local_access_file)))            self.add_service(ws)",xsrf,6
"        query = f""str$id""            table = conn.execute(f""str$id"")                query += f""str$id""        result = conn.execute(query)",sql_injection,12
"  usercheckquery = ""str$id"".format(username)    timeslotquery = ""str$id"".format(calendarid, userresult[num%id])      querystring = ""str$id""""str$id""""str$id"".format(",sql_injection,10
"        sql = adapter.get_sql(select, table, filter, sort_by, offset, limit)",sql_injection,8
"    db.execute(""str$id"".format(        id=id, playlist_id=playlist_id))    db.execute(""str$id"".format(        playlist_id=playlist_id))    db.execute(""str$id"".format(id=id))    db.execute(""str$id"".format(        playlist_id=playlist_id))    db.execute(        ""str$id"".format(            playlist_id=playlist_id, title=title, thumbnail=thumbnail, position=position))    db.execute(""str$id"".format(        removed_position=removed_position))    db.execute(""str$id"".format(        position=position, next_position=next_position))",sql_injection,19
"        from_date=context.get(""str$id"",false)        to_date=context.get(""str$id"",false)        date_str=false            date_str=""str$id""%(from_date,to_date)            date_str=""str$id""%(from_date)            date_str=""str$id""%(to_date)",sql_injection,6
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,10
"          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {""str$id"": ""str$id""},          ),              ""str$id"": {""str$id"": ""str$id""},",xsrf,13
"        request.trace.token, mc.auth.user_id, xsrf.xhr_servlet_path,",xsrf,3
"		device, size, fstype, mountpt, options, partid = \			self.fillparams([				(""str$id"", none, true),				(""str$id"", none), 				(""str$id"", none), 				(""str$id"", none),				(""str$id"", none),				(""str$id"", none),				])		if size:			try:				s = int(size)			except:				if mountpt == ""str$id"" and \					size not in [""str$id"", ""str$id""]:						raise paramtype(self, ""str$id"", ""str$id"")				else:					raise paramtype(self, ""str$id"", ""str$id"")",command_injection,50
"from snakemake.io import iofile, _iofile, periodicitydetector, wait_for_files",remote_code_execution,7
            resp = self.assertraises(,xsrf,3
"            values ({}, {})            values ({}, {})            conn.cursor().execute(fake_dilfo_insert.format(job_number, was_prev_closed))                    conn.cursor().execute(fake_match_insert.format(job_number, num%id))                    conn.cursor().execute(fake_match_insert.format(job_number, num%id))            df_dilfo_pre = pd.read_sql(f""str$id"", conn)            df_matched_pre = pd.read_sql(f""str$id"", conn)            df_dilfo_post = pd.read_sql(f""str$id"", conn)            df_matched_post = pd.read_sql(f""str$id"", conn)",sql_injection,28
        if user.is_authenticated():,sql_injection,2
"            packagelist = config.getraw(""str$id"", ""str$id"")            cls.preambledefs = config.getraw(""str$id"", ""str$id"", package) + ""str$id""                    cls.preambledefs += config.getraw(""str$id"", ""str$id"", package) % (                    cls.preambledefs += config.getraw(""str$id"", ""str$id"", package) % (",command_injection,25
        self.wz_poll_timeout = num%id,remote_code_execution,3
"            cwd = ""str$id"".join((cwd, piece))",path_disclosure,4
"            cursor.execute(""str$id""""str$id""%s""str$id""""str$id"", (result,game))",sql_injection,2
"from snakemake.io import protected, temp, temporary, expand, dynamic, glob_wildcards, flag, not_iterable, touch",remote_code_execution,12
"        output = str(subprocess.check_output(""str$id"" % url, stderr=subprocess.stdout,                                             shell=true)).strip()",command_injection,7
"        copyflag = ""str$id"" if full_copy else ""str$id""        fc_map_cli_cmd = (""str$id""                          ""str$id"" %                          {""str$id"": source,                           ""str$id"": target,                           ""str$id"": copyflag})",command_injection,18
"  def handleget(self):    key = self.request.get(""str$id"")    if key:      analysis = ndb.key(urlsafe=key).get()      if not analysis:  # pragma: no cover        return self.createerror(""str$id"", num%id)    else:      build_url = self.request.get(""str$id"", ""str$id"").strip()      build_info = buildbot.parsebuildurl(build_url)      if not build_info:  # pragma: no cover        return self.createerror(""str$id"", num%id)      master_name, builder_name, build_number = build_info      step_name = self.request.get(""str$id"", ""str$id"").strip()      test_name = self.request.get(""str$id"", ""str$id"").strip()      bug_id = self.request.get(""str$id"", ""str$id"").strip()      error = self._validateinput(step_name, test_name, bug_id)      if error:  # pragma: no cover        return error      build_number = int(build_number)      bug_id = int(bug_id) if bug_id else none      user_email = auth_util.getuseremail()      is_admin = auth_util.iscurrentuseradmin()      request = flakeanalysisrequest.create(test_name, false, bug_id)      request.addbuildstep(master_name, builder_name, build_number, step_name,                           time_util.getutcnow())      scheduled = flake_analysis_service.scheduleanalysisforflake(          request, user_email, is_admin, triggering_sources.findit_ui)      analysis = masterflakeanalysis.getversion(          master_name, builder_name, build_number, step_name, test_name)      if not analysis:        if scheduled is none:          return {              ""str$id"": ""str$id"",              ""str$id"": {                  ""str$id"":                      (""str$id""                       ""str$id""),              },              ""str$id"": num%id,          }        request = flakeanalysisrequest.getversion(key=test_name)        if not (request and request.analyses):          return {              ""str$id"": ""str$id"",              ""str$id"": {                  ""str$id"": (                      ""str$id""                      ""str$id""                      ""str$id""),              },              ""str$id"": num%id,          }        analysis = request.findmatchinganalysisforconfiguration(            master_name, builder_name)        if not analysis:  # pragma: no cover          logging.error(""str$id"")          return {              ""str$id"": ""str$id"",              ""str$id"": {                  ""str$id"": ""str$id"",              },              ""str$id"": num%id          }",xsrf,177
"            ""str$id"")        client = pab_client.partnerandroidbuildclient()        url = client.getartifacturl(            ""str$id"")    @mock.patch(""str$id"")        client = pab_client.partnerandroidbuildclient()        client.authenticate()",xsrf,13
"    def close(self):        self.debugger.dut.flush()        if self.db.campaign[""str$id""]:            self.debugger.aux.flush()        if self.db.result:",command_injection,8
"  def testgeneratetoken_differenttimesgetdifferenttokens(self):    test_time = int(time.time())    self.assertnotequal(        xsrf.generatetoken(111l, ""str$id"", token_time=test_time),        xsrf.generatetoken(111l, ""str$id"", token_time=test_time + num%id))",xsrf,14
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,11
"        self.insert_template = ""str$id""        self.update_template =  ""str$id""",sql_injection,6
"      self.assertequal(botobj.remote, self.server)      self.assertequal(self.server, botobj._remote)    self.mock(bot_main, ""str$id"", lambda: self.server)",xsrf,8
	category = frappe.local.form_dict.blog_category or frappe.local.form_dict.category,xss,5
"          jc.pathcontainspredicate(""str$id"", load_balancer_name),          jc.pathcontainspredicate(""str$id"", target_pool_name)]))",path_disclosure,4
"		list_context.sub_title = _(""str$id"").format(frappe.local.form_dict.txt)",xss,3
"from flask import flask,requestfrom termcolor import coloredfrom time import sleep",xss,10
from homeassistant.util import throttle,remote_code_execution,4
"        c.execute(""str$id""+dte+""str$id""+cladd+""str$id""+cmd+""str$id""+path+""str$id""+useragentstring+""str$id""+rvers+""str$id"") # logging            c.execute(""str$id""+useragentstring+""str$id"") # trying to find all the new useragentstrings            refid = c.execute(""str$id""+useragentstring+""str$id"").fetchone() #get refid if there is one - should be set in backend                resp = c.execute(""str$id""+str(refid[num%id])+""str$id"").fetchall()",sql_injection,30
"            plasma_store_socket_name=self._plasma_store_socket_name,            redis_password=self._ray_params.redis_password)",open_redirect,2
from application.help import getarticleswithcondition,sql_injection,4
"    return render(request, ""str$id"")",xsrf,3
import xsrf_client,xsrf,2
        return flag in value.flags,remote_code_execution,4
"from mock import magicmock, patchfrom six.moves.urllib_parse import quote_plusfrom invenio.testsuite import make_test_suite, run_test_suite",xsrf,12
"    def test_token_getter_setter(self, save_session):",xsrf,3
"        ssh_cmd = ""str$id"" % cmd",command_injection,5
"    keyword = forms.charfield(label=""str$id"", max_length=num%id, required=true)",open_redirect,5
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,13
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)",xsrf,14
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""openstack\""str$id""                           ""str$id"")",command_injection,7
"                                  ""str$id"")",command_injection,1
"         jc.pathcontainspredicate(         jc.pathpredicate(             ""str$id"",             jc.list_similar(avail_zones)),         jc.pathelementscontainpredicate(",path_disclosure,5
"      package_data={ ""str$id"": [""str$id"", ""str$id""] },",xsrf,5
"            out, err = self._run_ssh(""str$id"" % fc_map_id)",command_injection,6
"                       plasma_store_socket_name=none,                       redis_password=none):",open_redirect,2
"        path = os.path.join(self.namespace, keyfilter)",path_disclosure,4
"                ""str$id""                ""str$id""",sql_injection,2
"			elif re.compile(""str$id"").match(field):",sql_injection,2
    code = request.data,open_redirect,3
"        query = ""str$id""+account_id+""str$id""+account_name+""str$id""+str(amount)+""str$id""+voting_account+""str$id""        cur.execute(query)",sql_injection,4
"		cursor.execute(""str$id"" + session[""str$id""] + ""str$id"")",sql_injection,5
        return str_query,sql_injection,2
"products_table = ""str$id""products_types_table = ""str$id""reviews_table = ""str$id""users_table = ""str$id""            f""str$id""""            from {products_table} as p inner join {products_types_table} as pt on            where p.rating >= {filters[""str$id""]}            order by p.id limit {offset}, {filters[""str$id""]}            cursor.execute(sql_query)",sql_injection,31
"    query=""str$id""""str$id""roi lipman""str$id""roi lipman""}) ",path_disclosure,3
"    out_hostname, _ = run_shell_command([""str$id"", ""str$id""])    out_0, _ = run_shell_command([""str$id"", ""str$id""])",command_injection,10
"from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown",xss,9
"        def when_call_root_redirect(self):            self.response = client.get(reverse(""str$id""))",open_redirect,5
"            query = ""str$id""+id_+""str$id""+data[num%id][""str$id""]+""str$id""+str(block_num)+""str$id""+str(trx_in_block)+""str$id""+str(op_in_trx)+""str$id""+account_id+""str$id""+str(op_type)+""str$id""+account_name+""str$id""            cur.execute(query)",sql_injection,4
"    with open(""str$id"", ""str$id"") as f:        sql_raw = f.read()    sql_template = template(sql_raw)",sql_injection,11
"      for entry in self.compile_classpath_entries(classpath_product_key, target, extra_cp_entries)",remote_code_execution,6
from django.test import transactiontestcase,xsrf,4
"        return check_component(comp, self.session, self.logger)",remote_code_execution,4
"            def get_non_duplicate_path(file_path):                if not os.path.exists(""str$id"" + file_path):                    return file_path                duplicate = num%id                while duplicate < num%id:                    new_path = re.sub(r""str$id"", ""str$id"" % duplicate, file_path)                    if not os.path.exists(""str$id"" + new_path):                        return new_path                    duplicate = duplicate + num%id                return ""str$id""            file_path = get_non_duplicate_path(target_path + file_name)            if not file_path:                future.set_result(""str$id"")                return            file_stream = open(file_path, ""str$id"")            file_stream.write(upload_data)            file_stream.close()",sql_injection,53
"    self._temp_options_filename = none      self._temp_options_filename = options_file.name      json.dump( dict( self._user_options ), options_file )",remote_code_execution,12
"        if inventory_update.source == ""str$id"":            env[""str$id""] = inventory_update.source_regions if inventory_update.source_regions != ""str$id"" else ""str$id""  # noqa            cp = configparser.configparser()            cp.add_section(""str$id"")            cp.set(""str$id"", ""str$id"", ""str$id"")            handle, path = tempfile.mkstemp(dir=private_data_dir)            cp.write(os.fdopen(handle, ""str$id""))            os.chmod(path, stat.s_irusr | stat.s_iwusr)            env[""str$id""] = path        elif inventory_update.source in [""str$id"", ""str$id""]:        elif inventory_update.source == ""str$id"":            env[""str$id""] = inventory_update.instance_filters            env[""str$id""] = get_licenser().validate()[""str$id""]",command_injection,50
"        return {            ""str$id"": files,            ""str$id"": submit.tmp_path,        }",path_disclosure,7
"from itsdangerous import timedjsonwebsignatureserializer, signatureexpired",open_redirect,5
"                        db.log_event_exception(                            ""str$id"")                    self.serial.port+""str$id""+str(self.result_data[""str$id""])+""str$id""",command_injection,3
        arg_list = cmd.split(),command_injection,3
"            if view == ""str$id"":                self.status_view_fs(fs)            elif view.startswith(""str$id""):                self.status_view_targets(fs)            elif view.startswith(""str$id""):                self.status_view_disks(fs)            else:                raise commandbadparametererror(self.view_support.get_view(),                        ""str$id"")",remote_code_execution,15
"		blacklisted_keywords = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"",			""str$id"", ""str$id"", ""str$id"", ""str$id""]",sql_injection,13
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id"")",command_injection,7
"            f""str$id""""            insert into {invoices_table} (user_id)            values ({userid})            cursor.execute(sql_query)",sql_injection,8
"                next_url = request.get[""str$id""]",open_redirect,3
"			active_employees = frappe.get_all(""str$id"", 		filters = { ""str$id"": ""str$id"", ""str$id"": filters.company}, 	",sql_injection,10
"			if regex.match(field):				if any(keyword in field.lower() for keyword in blacklisted_keywords):				if any(""str$id"".format(keyword) in field.lower() \					for keyword in blacklisted_functions):",sql_injection,19
"        filetype = file_output.split(""str$id"")[num%id]                  ""str$id"")    ""str$id""""returns the fulltext of the local file.",remote_code_execution,11
"            self.failunless(""str$id"" in res)",xsrf,3
"        value = u""str$id"".format(value)",sql_injection,3
"  def _create_jardep(cls, name, version):    return cls._create_jardep(""str$id"", version)    return cls._create_jardep(""str$id"", version)  def _key_for_tool_version(cls, tool, version):",remote_code_execution,14
"        response = self.client.get(""str$id"")",xsrf,3
"    if len(parameters) > num%id:        count = csr.execute(stmt, parameters).fetchone()[num%id]    else:        count = csr.execute(stmt).fetchone()[num%id]",sql_injection,12
"            return position(request, position.objects.get(",open_redirect,3
        set_xsrf_cookie_for_page.__name__,xsrf,1
"from mock import magicmock, patchfrom six.moves.urllib_parse import quote_plusfrom invenio.testsuite import make_test_suite, run_test_suite",xsrf,12
"from numcodecs import blosc, lz4, lzmafrom benchmark import config",remote_code_execution,9
        response = self.client.post(url),xsrf,3
"                    order by num desc limit {}""str$id"""".format(top_num)    return execute_query(cmd)",sql_injection,8
"        out = ""str$id""        try:            out += self.debugger.dut.serial.port+""str$id""        except attributeerror:            pass        out += (str(self.result_data[""str$id""])+""str$id"" +                self.result_data[""str$id""]+""str$id"" +                self.result_data[""str$id""])",command_injection,17
"            is_null = all([isinstance(v, str) and v.upper() == ""str$id"" for v in values])                        print(""str$id"".join(values))                    print(""str$id"".join(values))",sql_injection,14
"from django.db.models import prefetch, q",sql_injection,5
"                os.system(""str$id"" % word)                os.system(""str$id"" % word)",command_injection,6
"                            ""str$id"" \                            ""str$id"" \                            ""str$id""{num%id}\""str$id"" \                    .format(self.table_prefix, data[""str$id""])            if cursor.execute(sql) == num%id:",sql_injection,12
"            logger.debug(""str$id"")            sql = self.gen_sql_insert(l, cat_id)",sql_injection,5
"    def __init__(self, webport, local_access=false):",xsrf,4
"import bleach    return psycopg2.connect(""str$id"")    conn = connect()    c = conn.cursor()    c.execute(""str$id"")    conn.commit()    conn.close()    conn = connect()    c = conn.cursor()    c.execute(""str$id"")    conn.commit()    conn.close()    conn = connect()    c = conn.cursor()    c.execute(""str$id"")    results = c.fetchone()    conn.close()    return int(results[num%id])",sql_injection,35
        redis_password (str): the password of the redis server.,open_redirect,8
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"    host = poll_result.answer.split(""str$id"")[num%id]",command_injection,3
"            str(ex.value) == ""str$id""",path_disclosure,3
"    return browser.do_request(aws_base_url + path, args, files)",xsrf,6
"        ""str$id"": {""str$id"": ""str$id""},        ""str$id"": {""str$id"": ""str$id""}",sql_injection,6
"        values = ""str$id"".join([x.encode(""str$id"") for x in query.values.values()])                        .format(query.model_class._meta.table_name, keys, values, _id))",sql_injection,11
"                                     ""str$id"" % p1_code)    cursor.execute(""str$id"" % p2)",sql_injection,6
"    navbarmain = post.objects.filter(published_date__lte=timezone.now())    pb = post.objects.values(""str$id"").annotate(newest_published_date=max(""str$id""))    pb_list = post.objects.filter(subject__in=[b.get(""str$id"") for b in pb], published_date__in=[b.get(""str$id"") for b in pb])    return {""str$id"": pb_list}",sql_injection,21
"    relay_state = request.form.get(""str$id"", ""str$id"")",open_redirect,4
"        for language_client in self.clients.values():                folder = self.get_root_path()                inst = language_client[""str$id""]                inst.folder = folder                inst.initialize()",path_disclosure,14
"	 	injectpayload(url, ""str$id"", ""str$id"", payload)",sql_injection,4
"        self.insertcmd = config.get(""str$id"", ""str$id"")(lettr)",command_injection,4
"version = ""str$id""",xss,3
"    {""str$id"": _(""str$id""), ""str$id"": [    {""str$id"": _(""str$id""), ""str$id"": [",xss,8
"            ""str$id"" % uuid)",xsrf,3
"                                   cookie_secret=""str$id"")",xsrf,1
"  @property  def remote(self):    ""str$id""""str$id""""str$id""    return self._remote",xsrf,6
"			command = ""str$id"".format(table_name, mod_time, pth)			self._run_command(command)",sql_injection,6
"		group by si.name order by days_since_last_order ""str$id""""",sql_injection,7
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"", content_type=""str$id"")",xsrf,7
"        self._cli_run(""str$id"" %                      (cli_qos_string, vvs_name), none)            self._cli_run(""str$id"" % (vvs_name,                                                      volume_name), none)            self._cli_run(""str$id"" % (domain,                                                         vvs_name), none)            self._cli_run(""str$id"" % (vvs_name,                                                      volume_name), none)        self._cli_run(""str$id"" % (vvs_name), none)        self._cli_run(""str$id"" % (vvs_name), none)        self._cli_run(""str$id"" % (vvs_name, volume_name), none)",command_injection,33
"	email = db.column(db.string(num%id))	def __init__(self, email, password):		self.email = email	return render_template(""str$id"", user=user.query.all())		user = user(request.form[""str$id""], request.form[""str$id""])		db.session.add(user)		db.session.commit()		return redirect(url_for(""str$id""))",sql_injection,21
"        cursor.execute(""str$id""+username+""str$id""+ name+""str$id""+ hashedpassword""str$id"")",sql_injection,3
from eduid_webapp.authn.helpers import verify_auth_token,open_redirect,4
        num%id. ,open_redirect,1
        response = self.client.post(url),xsrf,3
        response = self.client.get(url),xsrf,3
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url + ""str$id"")        response = self.client.get(url)",xsrf,16
"        ssh_cmd = ""str$id""",command_injection,3
this file is part of the everest project. ,path_disclosure,8
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""openstack\""str$id""                           ""str$id"")",command_injection,7
    def test_rejects_invalid_token(self):,xsrf,2
"        ssh_cmd = ""str$id"" % host_name",command_injection,5
"def scan_for_forms(fname, host, url):",xss,4
"                   %s,                   %s,                   %s,                   %s            ""str$id""""str$id""power""str$id""energy""str$id""%s""str$id""""str$id"" % (inverter_serial)        self.c.execute(query)",sql_injection,8
"                data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
"        print ""str$id"",vul_param",xss,2
"            full_path = self.get_full_path(path, language, version_slug)",open_redirect,5
"    url(r""str$id"", help.helpview.as_view(), name=""str$id""),",path_disclosure,3
"			assert(assignment.chapter == int(sys.argv[num%id]))			print ""str$id""+str(num_probs)+""str$id""+assignment.student",open_redirect,5
       .add_constraint(jc.equivalent(expect_images))),path_disclosure,1
"         redirect_worker_output=false,",open_redirect,1
        response = self.client.get(url),xsrf,3
"        self.asserttrue(""str$id"" in response[""str$id""])",open_redirect,3
"                              method=""str$id"", body=json_encode(input_data))",xsrf,2
"      ""str$id"": ""str$id"",  xsrf_token_enforce_on = ()  @auth.require_xsrf_token_request",xsrf,6
"from pants.engine.fs import pathglobs, pathglobsandrootfrom pants.util.dirutil import fast_relpath",remote_code_execution,8
"        self.assets = environment(                os.path.join(os.path.dirname(__file__), ""str$id""),""str$id"")        css_all = bundle(                ""str$id"",                ""str$id"",                bundle(""str$id"",""str$id"", filters=""str$id""),                ""str$id"",                output=""str$id"")        js_all = bundle(                bundle(                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",filters=""str$id""),                bundle(                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"", filters=(""str$id"",""str$id"")),                output=""str$id"")        self.assets.register(""str$id"", css_all)        self.assets.register(""str$id"", js_all)",xsrf,40
    from app.questions.api.v1.view import question_blueprint,sql_injection,4
"        query = ""str$id"" % (self.table, sid)        self._query(query)",sql_injection,7
"    ctx = ds.pathtraversalcontext( {}, {}, self._root, {}, none, none, none )",path_disclosure,11
			cursor = conn.execute(command),sql_injection,3
"                                 ""str$id"",",command_injection,1
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,24
    },path_disclosure,1
        for kid in self.child_groups:            kid_hosts = kid.get_hosts(),path_disclosure,7
from bot_code import common,xsrf,4
        if self.user and self.user.is_authenticated():,sql_injection,4
"            self.uut.executable = ""str$id""",command_injection,3
"    httpresponseredirect,",open_redirect,1
"      ""str$id"": json.dumps(workflow_data[""str$id""]),      ""str$id"": json.dumps(workflow_data[""str$id""]),      ""str$id"": json.dumps(credentials.credentials.keys()),      ""str$id"": json.dumps(workflow_node_properties),      ""str$id"": json.dumps(_get_workflows(request.user)),",xss,10
"    if root.val==s:        return [str(root.val) + ""str$id""]",path_disclosure,6
from dbhelper import bdhelper,sql_injection,4
    if user:,xsrf,2
"class createkeypair(forms.selfhandlingform):    name = forms.regexfield(max_length=num%id,                            label=_(""str$id""),                            regex=keypair_name_regex,                            error_messages=keypair_error_messages)    def handle(self, request, data):        return true  # we just redirect to the download view.    def clean(self):        cleaned_data = super(createkeypair, self).clean()        name = cleaned_data.get(""str$id"")        try:            keypairs = api.nova.keypair_list(self.request)        except exception:            exceptions.handle(self.request, ignore=true)            keypairs = []        if name in [keypair.name for keypair in keypairs]:            error_msg = _(""str$id"")            self._errors[""str$id""] = self.error_class([error_msg])        return cleaned_data",xsrf,58
"        cur.execute(""str$id""                ""str$id"" %name)                if cur.execute(""str$id"" %name) \",command_injection,7
.. http:post:: /api/auth/login  authenticate for the rest framework... http:post:: /api/auth/logout  clear authentication for the rest framework... http:get:: /api/generate-api-key/,xsrf,18
"                        pipeline.get_login_url(provider_id, pipeline.auth_entry_login, redirect_url=redirect_to)        except (keyerror, valueerror, indexerror):            pass",open_redirect,8
"        from_date=context.get(""str$id"",false)        to_date=context.get(""str$id"",false)        date_str=false            date_str=""str$id""%(from_date,to_date)            date_str=""str$id""%(from_date)            date_str=""str$id""%(to_date)",sql_injection,6
"        return round(conf.seqmatcher.ratio(), num%id)    elif round(conf.seqmatcher.ratio(), num%id) >= match_ratio:",command_injection,8
            group_exam_ind=num%id,open_redirect,1
"@rule(testresult, [pythontestsadaptor, pytest, pythonsetup, sourcerootconfig])def run_python_test(test_target, pytest, python_setup, source_root_config):",remote_code_execution,9
"from cuckoo.core.database import database, task_pending",path_disclosure,5
"            [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_hc_name),             jc.pathcontainspredicate(none, health_check)]))           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_fr_name),            jc.pathcontainspredicate(""str$id"", port_range)]))           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_bs_name),            jc.pathelementscontainpredicate(           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_map_name),            jc.pathcontainspredicate(           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_proxy_name),            jc.pathcontainspredicate(""str$id"", self.__use_http_lb_map_name)]))",path_disclosure,18
"    def img(self, payload):    def svg(self, payload):    def style(self, payload):    def input(self, payload):    def marquee(self, payload):    def div(self, payload):",xss,18
"        cookie_file = os.path.expanduser(""str$id"")        cookie_dir = os.path.dirname(cookie_file)        self.cookies = mozillacookiejar(cookie_file)        if not os.path.isdir(cookie_dir):            os.mkdir(cookie_dir, num%id)        if os.path.isfile(cookie_file):            self.cookies.load()            self.cookies.clear_expired_cookies()            self.cookies.save()",xsrf,19
"        response = self.client.post(f""str$id"",{""str$id"":[num%id]})",open_redirect,3
"        newresult = request.querypage(payload)        if count:            for element in resultdict.values():                if element[num%id] == num%id:                        value = ""str$id"" % (conf.url, payload)                        value += ""str$id"" % payload                        value += ""str$id"" % payload                        value += ""str$id"" % payload",command_injection,34
def tokenexpiressec(now=none):  now = now or getroundedtime()  rounded = now - (now % token_granularity_minutes),xsrf,14
"    (""str$id"", {}),",path_disclosure,2
"        cur.execute(f""str$id"")    cur.execute(f""str$id"")",sql_injection,2
from .common_info import commoninfofrom django.db.models.signals import pre_save,open_redirect,7
"        elif arg in (""str$id"",):",remote_code_execution,4
"    self.assertlistequal(expected_paths_small_same_currency(), paths_small_same_currency)    self.assertlistequal(expected_paths_small_different_currency, paths_small_different_currency)",path_disclosure,4
"        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,11
"        end = str(end)        if(""str$id"" in end): end = end+""str$id""        where_clause += ""str$id"" + end        where_clause += ""str$id"" + str(start)        where_clause += ""str$id"".format(start, end)        where_clause += ""str$id"" + str(degree)",sql_injection,28
    def _get_ancestors(self):        results = {}        for g in self.parent_groups:            results[g.name] = g            results.update(g._get_ancestors())        return results    def get_ancestors(self):        return self._get_ancestors().values(),path_disclosure,19
        response = self.client.get(url),xsrf,3
"                        db.log_event(""str$id"", ""str$id"", ""str$id"")            db.log_event(""str$id"", ""str$id"", ""str$id"")            db.log_event(""str$id"", ""str$id"", ""str$id"")",command_injection,9
			except:				partid = none,command_injection,4
"                       thread_safe_client, setup_logger, try_update_handler)",open_redirect,3
import urllib,open_redirect,2
            return rc,remote_code_execution,2
"                                 ""str$id"",",command_injection,1
"        ssh_cmd = (""str$id""                   % {""str$id"": chap_secret, ""str$id"": host_name})",command_injection,8
"    def test_hinted_login_dialog_disabled(self):        response = self.client.get(reverse(""str$id""), params, http_accept=""str$id"")            ""str$id"",",open_redirect,8
"    ""str$id"": ""str$id"",",open_redirect,2
"    def perform(self, query, obj=none):",sql_injection,4
"                print ""str$id"" % (node, client.status_info)",remote_code_execution,5
import citest.json_contract as jc,path_disclosure,4
you can also put the connection string into a setup.cfg file in the root of the project(the same one setup.py would use) like so:,path_disclosure,24
"    runs a command in shell and provides stdout, stderr and stdin streams.    this function creates a context manager that sets up the process, returns    to caller, closes streams and waits for process to exit on leaving.    the process is opened in `universal_newlines` mode.    :param command: the command to run on shell.                    that is used to spawn the process (except `shell`,                    `stdout`, `stderr`, `stdin` and `universal_newlines`, a                    `typeerror` is raised then).                    shell=true,",command_injection,71
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
"    def _expected_command(self, name, store=none, verify_xss=false):",xss,5
"from cuckoo.core.database import database, task_pending",path_disclosure,5
"    record_log_files_in_redis(redis_address, node_ip_address,                              [stdout_file, stderr_file])",open_redirect,4
"                data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
"        r.notes = request.post[""str$id""]        r.responsibleperson = str(request.post[""str$id""])",xss,6
"        results = get_table_dict(""str$id"")",sql_injection,3
"		return ""str$id"" in filename and \		filename.rsplit(""str$id"", num%id)[num%id].lower() in allowed_extensions	def __init__(self, uid):		self.is_authenticated = false		self.is_active = false		self.is_anonymous = true		self.username = none		self.user_id = uid	def __repr__(self):		return ""str$id"" % (self.user_id, self.username)	def get_id(self):		conn = mysql.connection		cur = conn.cursor()		cur.execute(""str$id""""str$id""%s""str$id""""str$id"" % self.username)		rv = cur.fetchall()		return str(rv[num%id][""str$id""])	def authenticate(self, username):		self.is_authenticated = true		self.is_active = true		self.is_anonymous = false		self.username = username	def setusername(self, username):		self.username = username	def get(user_id):		return self	def returnusername(self):		return self.username	app.run(debug=true)",sql_injection,81
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"                                  ""str$id"")",command_injection,1
"        features = (image_data.camera, image_data.lens, image_data.country[""str$id""])",sql_injection,5
    other_shapes = set(has_target_class).union(set(has_target_node).union(set(has_target_objects_of).union(set(has_target_subjects_of))))    for s in other_shapes:,path_disclosure,7
"		tableid = -num%id		tablename = {""str$id"":""str$id"", ""str$id"":""str$id"", ""str$id"":""str$id""}		if scope != ""str$id"":			self.db.execute(""str$id""""str$id""""str$id"" % (tablename[scope], name))			tableid, = self.db.fetchone()		deletesql = ""str$id""""str$id""""str$id"" % (scope, tableid)			deletesql += ""str$id""""str$id""""str$id"" % device			deletesql += ""str$id""""str$id""""str$id"" % mountpoint		self.db.execute(deletesql)",command_injection,36
you can also put the connection string into a setup.cfg file in the root of the project(the same one setup.py would use) like so:,path_disclosure,24
"    native = {""str$id"": ""str$id""}",remote_code_execution,4
"                result = self.update_drive(src_drive=src_drive, parent=curr_folder, curr_folder=folder)                print (result)",path_disclosure,7
"    sql_cmd = ""str$id""    s = db.select(sql_cmd)",sql_injection,6
  return inject_init.rules() + python_test_runner.rules(),remote_code_execution,4
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
        remote_work_dir_copy = lwrjobrunner.__remote_work_dir_copy( client )        if not remote_work_dir_copy:            work_dir_outputs = self.get_work_dir_outputs( job_wrapper )        else:            work_dir_outputs = [],remote_code_execution,17
"        none,        ""str$id"",",xsrf,2
"        ssh_cmd = ""str$id""",command_injection,3
"          self.redirect(str(self.request.get(""str$id"")))",xsrf,1
"  c.execute(""str$id"" % content)",sql_injection,3
"    self.server = xsrf_client.xsrfremote(""str$id"")",xsrf,3
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)",xsrf,6
                cursor.execute(sql),sql_injection,1
from django.core.urlresolvers import reverse,sql_injection,4
"    if votefinished: db.execute(""str$id"".format(chan,action,target))",sql_injection,3
"    ctx = ds.pathtraversalcontext( {}, {}, ""str$id"", {}, none, none, none )",path_disclosure,11
"        os_utilities.get_hostname_short(), os.environ[""str$id""])",xsrf,2
"        ""str$id"",        ""str$id"",        ""str$id"",        ""str$id"",",open_redirect,4
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"    ""str$id"",",xsrf,1
"    self.fail(""str$id"" % url)",xsrf,3
"            cur.execute(""str$id"" % varga)            mula = cur.fetchall();",sql_injection,6
"        ""str$id"": {                ""str$id"": r""str$id"",                ""str$id"": r""str$id"",                ""str$id"": r""str$id"",                ""str$id"": r""str$id"",                ""str$id"": r""str$id"",            },        ""str$id"": {                ""str$id"": lambda s: ""str$id"" % s,                ""str$id"": lambda s: ""str$id"" % s,                ""str$id"": lambda s: ""str$id"" % s,                ""str$id"": lambda s: ""str$id"" % s,                ""str$id"" : lambda s: r""str$id"",  # @unusedvariable                ""str$id"" : lambda s: r""str$id"",  # @unusedvariable                ""str$id"": lambda s: r""str$id"" % s, # todo check number, add default unit (mm)                ""str$id"": lambda s: r""str$id"" % s, # todo check number, add default unit (mm)                ""str$id"": lambda s: r""str$id"" % s,                ""str$id"" : lambda s: r""str$id""        ""str$id"": none,",command_injection,94
"    def perform(self, query, arg_list=none):            c = conn.cursor(cursor_factory = psycopg2.extras.realdictcursor)            if arg_list:                c.execute(query, arg_list)            else:                c.execute(query)            result = c.fetchall()",sql_injection,18
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url)",xsrf,6
"            pingcmd + self.pingargs + [args.host],",command_injection,5
        credentials : oauth2client credentials object    credentials = none,xsrf,8
"social_auth_login_redirect_url = os.environ.get(""str$id"",                                                ""str$id"")",open_redirect,4
"            if self.filepath not in error.get(""str$id"", ""str$id""):",path_disclosure,6
"        plasma.connect(info[""str$id""]))",open_redirect,1
"    try:        return db.engine.execute(""str$id""""str$id""""str$id"" + member + ""str$id"")",sql_injection,7
"		and c.email_id=""str$id""""str$id"""".format(email_id=sender))",sql_injection,2
"        sqltext=""str$id""%(userid)        result=sql.querydb(self.conn,sqltext)        sqltext=""str$id""%(userid,postid)        result=sql.querydb(self.conn,sqltext)        sqltext=""str$id""%(commentid)        result=sql.querydb(self.conn,sqltext)        sqltext=""str$id""%(comment,userid,postid)        result=sql.insertdb(self.conn,sqltext)        sqltext=""str$id""%(commentid)        result=sql.deletedb(self.conn,sqltext)        sqltext=""str$id""%(userid,commentid)        result=sql.insertdb(self.conn,sqltext)        sqltext=""str$id""%(commentid,userid)        result=sql.deletedb(self.conn,sqltext)",sql_injection,14
        if not request.user.is_authenticated():,sql_injection,3
"            print ""str$id""            raise",remote_code_execution,3
"from snakemake.io import iofile, wildcards, resources, _iofile",remote_code_execution,7
"from .common import get_and_check_project, get_tile_json",path_disclosure,5
"        cmd = ""str$id"" % src_name            cmd += ""str$id"" % snap_cpg            cmd += ""str$id""            cmd += cpg + ""str$id""        cmd += dest_name        self._cli_run(cmd, none)",command_injection,23
"        out = self._cli_run(""str$id"", none)",command_injection,4
"__version__ = ""str$id""",path_disclosure,3
"            ssh_cmd = ""str$id"" % wwpn",command_injection,5
"query = ""str$id"" + val + ""str$id"" + val +""str$id"" + valcur.execute(""str$id"" + val + ""str$id"" + val +""str$id"" + val)",sql_injection,21
        except eoferror:,remote_code_execution,2
"    if type(ss) == type(""str$id"") and len(ss) >= num%id and len(ss) <= num%id and isint(ss):",sql_injection,14
"        sql = ""str$id"".format(listing_tags_table_name, str((listing_id, x)))        cur.execute(sql)",sql_injection,6
"from flask import flask, render_template, request, redirect, url_for, sessionfrom flask_login import loginmanager, current_user, login_user, logout_user, usermixin",open_redirect,16
"            db().execute((sql % data), true)",sql_injection,4
                        cf.read(),command_injection,1
            not user.is_authenticated(),sql_injection,2
"                    next=request.args.get(""str$id"", ""str$id"")",xsrf,2
"        query = ""str$id""+proxy_id+""str$id""        cur.execute(query)",sql_injection,4
"                self.log.info(""str$id"", t)",remote_code_execution,2
"        ""str$id""""open an url in a mechanize browser, optionally passing the        specified data and files as post arguments.        browser (mechanize.browser): the browser to use.",xsrf,23
"                sql += ""str$id"".format((""str$id"" if i > num%id else ""str$id""), col_full_name, fop.upper(), fval)",sql_injection,12
"            int(self.key_name)            lookup = ""str$id"" % self.key_name        else:            lookup = ""str$id"" % self.key_name        return ""str$id"" % (lhs, self.operator, lookup), params",sql_injection,19
"            query = ""str$id"".format(                data)                cursor.execute(query)",sql_injection,5
import subprocess,sql_injection,2
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_vlun_cmd = ""str$id""        show_vlun_cmd = ""str$id""",command_injection,15
"      base_data[""str$id""] = xsrf.tokenexpiressec()      base_data[""str$id""] = xsrf.generatetoken(        mr.auth.user_id, xsrf.xhr_servlet_path)",xsrf,8
"            query = ""str$id""+id_+""str$id""+data[num%id][""str$id""]+""str$id""+str(block_num)+""str$id""+str(trx_in_block)+""str$id""+str(op_in_trx)+""str$id""+account_id+""str$id""+str(op_type)+""str$id""+account_name+""str$id""            cur.execute(query)",sql_injection,4
"        if ""str$id"" not in obj:            obj[""str$id""] = self._get_latest_id() + num%id        empties = ""str$id"".join([self.holder for col in obj])        query = ""str$id"" + self.table_name + ""str$id"" + columns + ""str$id"" + empties + ""str$id""        feedback = self.sql.perform(query, obj.values())        return obj        query_params = query_params or {}        if query_params:            where_clause, query_items = self._build_where_clause(query_params)            query = ""str$id"" + self.table_name + ""str$id"" + where_clause            answer = self.sql.perform(query, query_items)            query = ""str$id"" % (self.table_name)            answer = self.sql.perform(query)",sql_injection,70
"    output_array = list()    for boundary_name in boundary_names:        output_dict = dict()        output_dict[""str$id""] = boundary_name        boundary_table = ""str$id"".format(settings[""str$id""], boundary_name)        i = num%id        feature_array = list()        for row in rows:            feature_dict = dict(row)            feature_dict[""str$id""] = feature_dict[""str$id""].lower()            feature_dict[""str$id""] = feature_dict[""str$id""].lower()",sql_injection,36
"      link = re.findall(""str$id"",full_line) # allows for spaces and symbols in filenames, spaces stripped later      if len(link) > num%id :        path = urtext.get_path(view.window())        try:          file_view = window.open_file(os.path.join(path, link[num%id].strip()) , sublime.transient)          file_view.set_scratch(true)        except:          print(""str$id""+link[num%id])  def return_to_left(self, view,return_view):",path_disclosure,35
            return rc,remote_code_execution,2
"    query = (""str$id""             ""str$id""             ""str$id""             ""str$id"".format(item_type))",sql_injection,6
"    options_str = queryone(c, ""str$id"".format(cfg(""str$id""), poll_name))",sql_injection,5
"        self.url = ""str$id"" % (self.base_url,                                                 task_id, language_code)",xsrf,7
"            ssh_cmd = (""str$id""                       ""str$id"" %                       {""str$id"": host_name,                        ""str$id"": result_lun,                        ""str$id"": volume_name})",command_injection,11
"    if ""str$id"" in target:    path = os.path.join(paths.sqlmap_output_path, target)    if os.path.exists(path):",path_disclosure,10
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"            data=jsonutils.dumps(fake_ip_pool, sort_keys=true))",xsrf,2
"        self.set_header(""str$id"", ""str$id"")",xsrf,2
"num%id,",remote_code_execution,1
"        response = self.client.get(url)            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,9
"                             extractionscriptform,                             cleancompdataform,                             create_detail_formset,                             include_extract_form,                             include_clean_comp_data_form)",open_redirect,5
"from tribler.core.simpledefs import ntfy_channel, ntfy_credit_mining, ntfy_discovered, ntfy_error, ntfy_finished, \    ntfy_insert, ntfy_market_on_ask, ntfy_market_on_ask_timeout, ntfy_market_on_bid, ntfy_market_on_bid_timeout, \    ntfy_market_on_payment_received, ntfy_market_on_payment_sent, ntfy_market_on_transaction_complete, \    ntfy_new_version, ntfy_remove, ntfy_started, ntfy_torrent, ntfy_tribler, ntfy_tunnel, ntfy_update, ntfy_upgrader, \    ntfy_upgrader_tick, ntfy_watch_folder_corrupt_torrent, signal_low_space, signal_resource_check, state_shutdown",sql_injection,33
import help_functions,sql_injection,2
"        left join series as s on s.id=b.series_id    inputs = {""str$id"": pagesize, ""str$id"": int(page * pagesize)}    rst = csr.execute(stmt, inputs)    return {""str$id"": rows, ""str$id"": get_all_books_count()}def get_all_books_count():    ""str$id""""str$id""""str$id""    stmt = ""str$id""""str$id""""str$id""    csr = get_cursor()    count = csr.execute(stmt).fetchone()[num%id]    return count    inputs = {""str$id"": pagesize, ""str$id"": int(page * pagesize)}        wh = ""str$id"" + str(author_id)        wh = ""str$id"" + str(series_id)        inputs[""str$id""] = s",sql_injection,58
"            query = query.order_by(order_column + ""str$id"" + order_direction)",sql_injection,7
"        fc_ls_map_cmd = ""str$id"" % \            fc_map_id",command_injection,6
"    query = ""str$id"".format(to_id_or_from_id, page_ids)",sql_injection,4
"        query = (""str$id"" %                 (self.table, mtype, value, id)            self._query(query)",sql_injection,9
"        ""str$id"",",xsrf,1
"    user_engine.execute(        ""str$id"".        format(endpoint_url))",sql_injection,3
"            if (authenticate_user(request.get.get(""str$id""))):",open_redirect,2
"    self._temp_options_filename = none      self._temp_options_filename = options_file.name      json.dump( dict( self._user_options ), options_file )",remote_code_execution,12
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
from twisted.web.resource import resource,xsrf,4
"        autoex = ""str$id"" if opts[""str$id""] else ""str$id""        easytier = ""str$id"" if opts[""str$id""] else ""str$id""            ssh_cmd_se_opt = ""str$id""            ssh_cmd_se_opt = (                ""str$id"" %                {""str$id"": opts[""str$id""],                 ""str$id"": autoex,                 ""str$id"": opts[""str$id""]})                ssh_cmd_se_opt = ssh_cmd_se_opt + ""str$id""                ssh_cmd_se_opt = ssh_cmd_se_opt + (                    ""str$id"" % opts[""str$id""])        ssh_cmd = (""str$id""                   ""str$id""                   ""str$id""                   % {""str$id"": name,                   ""str$id"": self.configuration.storwize_svc_volpool_name,                   ""str$id"": size, ""str$id"": units, ""str$id"": easytier,                   ""str$id"": ssh_cmd_se_opt})",command_injection,59
"        ""str$id""",open_redirect,1
"            data=jsonutils.dumps(fake_ip_pool, sort_keys=true))",xsrf,2
"        redis_client = redis.strictredis(            host=redis_ip_address,            port=redis_port,            password=args.redis_password)",open_redirect,6
"from typing import any, dict, iterator, typevar",sql_injection,7
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"                    sql = ""str$id"".format(url, user, name)                    self.db.exec(sql)",sql_injection,6
        cursor.execute(query),sql_injection,1
"	payloads = [""str$id""]",sql_injection,3
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")",xsrf,7
"        if (self.source not in (""str$id"", ""str$id"", ""str$id"") and                not (self.get_cloud_credential())):            return false        elif self.source == ""str$id"" and not self.inventory_source.source_project:            return false        elif self.source == ""str$id"":",command_injection,25
"    def dfs_recur(current_node, path):",path_disclosure,3
"def record_log_files_in_redis(redis_address,                              node_ip_address,                              log_files,                              password=none):    ""str$id""""str$id""""str$id""    for log_file in log_files:        if log_file is not none:            redis_ip_address, redis_port = redis_address.split(""str$id"")            redis_client = redis.strictredis(                host=redis_ip_address, port=redis_port, password=password)            log_file_list_key = ""str$id"".format(node_ip_address)            redis_client.rpush(log_file_list_key, log_file.name)",open_redirect,30
        for g in self.parent_groups:            g.clear_hosts_cache(),path_disclosure,5
"      cmd = self.decrypt( data )      out = ""str$id""      if ""str$id"" in cmd:      elif ""str$id"" in cmd:        out = ""str$id"".join(cmd.split(""str$id""))      else:         out = cmd",path_disclosure,23
"             values (""str$id"", %s::integer);""str$id""""    db().execute((sql % data), true)",sql_injection,7
    if os.path.exists(root_dir):        return _load_yml_filedir(root_dir)[num%id]    else:        return {},path_disclosure,7
"        label=""str$id"",",command_injection,1
"            r(python_filmography)[:].writers.name[:]            == r(python_filmography)[:].writers.name            r(python_filmography)[:][""str$id""][""str$id""][:]            == r(python_filmography)[:][""str$id""][""str$id""]",path_disclosure,6
"         jc.pathcontainspredicate(""str$id"", self.__server_group_name),         jc.pathcontainspredicate(""str$id"", ""str$id"")]))",path_disclosure,4
"from typing import iterator, typevarfrom .interface import ispydef construct_select_statement(spy: ispy, from_: str) -> str:    return f""str$id""""str$id""""str$id""",sql_injection,16
"            self.failunless(""str$id"" in res)",xsrf,3
        data = json.loads(request.data)        r.delete(db_getuserid(data)),sql_injection,4
"		cursor.execute(""str$id"" + str(discordid))",command_injection,3
"    http_handler = create_website_http_handler(purpose, **kwargs)",xsrf,4
"         jc.pathcontainspredicate(         jc.pathpredicate(             ""str$id"",             jc.list_similar(avail_zones)),         jc.pathelementscontainpredicate(",path_disclosure,5
"                        %s,                        %s,                        %s                ""str$id""""str$id""%s""str$id""%s""str$id""%s""str$id""%s""str$id""%s""str$id""%s""str$id""""str$id"" % (source[""str$id""], source[""str$id""], ""str$id"", ""str$id"", int(datetime.now().timestamp()), source[""str$id""] )                self.c.execute(query)",sql_injection,13
"class command(stack.commands.hostargumentprocessor,",command_injection,2
"    url_helper.urllib2.urlopen(mox.strcontains(url), mox.ignorearg(),",xsrf,2
    print self.cookie,path_disclosure,2
"            out, err = self._run_ssh(""str$id"" % fc_map_id)",command_injection,6
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"			if re.compile(""str$id"").match(field):			if re.compile(""str$id"").match(field):",sql_injection,4
"    worker.redis_client = thread_safe_client(        redis.strictredis(            host=redis_ip_address,            port=int(redis_port),            password=redis_password))",open_redirect,7
"from numcodecs import blosc, lz4, lzmafrom benchmark import config",remote_code_execution,9
"            ""str$id"" % uuid)",xsrf,3
"          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {""str$id"": ""str$id""},          ),              ""str$id"": {""str$id"": ""str$id""},",xsrf,13
"    query = ""str$id""+account_id+""str$id""    cur.execute(query)",sql_injection,4
"      self.assertequal(""str$id"", swarming_server.url)",xsrf,2
  cookies = none,path_disclosure,3
"                        expansion[i].append(iofile(e, rule=branch))",remote_code_execution,2
"      self.flow.params[""str$id""] = request_handler.request.url      method(request_handler, *args, **kwargs)",xsrf,6
"    def execute(self, query):            self.cursor.execute(query)",sql_injection,4
"        tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")",open_redirect,5
"        try:            while true:                time.sleep(num%id)                self.flush_profile_data()        except attributeerror:            pass        ""str$id""""str$id""""str$id""",open_redirect,9
"    begin = ""str$id""    end = ""str$id""    marker = ""str$id""        debug(""str$id"", txt)        txt = txt[i+num%id:]",command_injection,14
"        self.render(""str$id"", allposts=allposts)        contenttitle = ""str$id"" + request        renderedbody = contentconverter.getrenderedbody(request)        if not renderedbody:            renderedbody = ""str$id"".format(request)        self.render(""str$id"", title=contenttitle, postbody=renderedbody)",xsrf,19
"    note:    the driver also has an import thread, which is used only to    import custom class definitions from calls to register_custom_serializer    that happen under the hood on workers.    def __init__(self, worker, mode):        t = threading.thread(target=self._run, name=""str$id"")        t.daemon = true        t.start()",open_redirect,40
"        query = ""str$id""""str$id""{driver}""str$id""""str$id"".format(driver = driver)        self.cursor.execute(query)",sql_injection,6
"            ssh_cmd = ""str$id"" % host",command_injection,5
"            if view == ""str$id"":                self.status_view_fs(fs)            elif view.startswith(""str$id""):                self.status_view_targets(fs)            elif view.startswith(""str$id""):                self.status_view_disks(fs)            else:                raise commandbadparametererror(self.view_support.get_view(),                        ""str$id"")",remote_code_execution,15
"            as row_num from people as t1 where name=""str$id""        ""str$id""'.format(name))",sql_injection,9
from twisted.web.resource import resource,xsrf,4
    def get_base_path(self):,path_disclosure,2
"        eq_(self.terminal.method_calls, [(""str$id"", (""str$id"",), {})])        eq_(self.terminal.method_calls, [(""str$id"", (""str$id"",), {})])",path_disclosure,8
"                        print ""str$id"",key                        print xss_request.text",xss,4
"    env={""str$id"": text_type(os.pathsep.join(python_setup.interpreter_search_paths))},",remote_code_execution,2
db = database(baseconfig.sqlalchemy_database_uri),sql_injection,3
"        ""str$id""""open an url in a mechanize browser, optionally passing the        specified data and files as post arguments.        browser (mechanize.browser): the browser to use.",xsrf,23
"                location = request.form.get(""str$id"", location)",open_redirect,4
"        winners = db.execute(""str$id"", (pollid, ))",sql_injection,5
"        self.asserttrue(""str$id"" in response[""str$id""])",open_redirect,3
"from twisted.application import service, strports",xsrf,5
  def handleget(self):  # pragma: no cover,xsrf,6
"def request_mock(path=""str$id"", method=""str$id"", body=""str$id"", headers={}):",xsrf,5
"    if isinstance(base, six.text_type):        base = base.encode(""str$id"")                if isinstance(id, six.text_type):                    id = id.encode(""str$id"")                paths.insert(idx + num%id, path + b""str$id"" + id)",path_disclosure,20
"    ""str$id"""" disconnect user from remote application.",xsrf,6
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"        out = self._cli_run(""str$id"", none)",command_injection,4
import redis,open_redirect,2
"                        where action=""str$id""                        and user_id = {num%id} and project_id = {num%id};""str$id"""".format(user_id, self.id)        total_validation_time = db.engine.execute(query)",sql_injection,14
"         jc.pathcontainspredicate(""str$id"", self.__server_group_name),         jc.pathcontainspredicate(""str$id"", ""str$id"")]))",path_disclosure,4
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,18
"            p = subprocess.popen(""str$id"".format(self.remoteip), shell=true)",command_injection,4
"  def testvalidatetoken_expiration(self):    test_time = int(time.time())    token = xsrf.generatetoken(111l, ""str$id"", token_time=test_time)    xsrf.validatetoken(token, 111l, ""str$id"", now=test_time)    xsrf.validatetoken(token, 111l, ""str$id"", now=test_time + num%id)    xsrf.validatetoken(        token, 111l, ""str$id"", now=test_time + xsrf.token_timeout_sec)      xsrf.validatetoken, token, 11l, ""str$id"",      now=test_time + xsrf.token_timeout_sec + num%id)",xsrf,36
"        context[""str$id""] = markdown(self.object.content,                                 extensions=[                                     ""str$id"",                                     ""str$id"",                                     ""str$id"",                                 ])",xss,8
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,10
"    db.execute(""str$id"".format(        playlist_id=playlist_id))",sql_injection,2
"            self.cursor.execute(""str$id"" % language[num%id])    def add_translation(self, trid):            self.cursor.execute(""str$id"" % (trid[num%id], trid[num%id], trid[num%id]))                self.cursor.execute(""str$id"" % (item[num%id], trname[num%id], trname[num%id]))",sql_injection,16
"        t = (search, start, limit)        fetch_ok = self.execute(cmd + post + ""str$id"", t)",sql_injection,13
"                    h.populate_ancestors()        try:            for group in self.child_groups:                group.depth = max([self.depth + num%id, group.depth])                group._check_children_depth()        except runtimeerror:            raise ansibleerror(""str$id"" % self.name)",path_disclosure,19
"        request.session[""str$id""] = request.get.get(redirect_field_name)",open_redirect,3
"    runs a command in shell and provides stdout, stderr and stdin streams.    this function creates a context manager that sets up the process, returns    to caller, closes streams and waits for process to exit on leaving.    the process is opened in ``universal_newlines`` mode.    :param command: the command to run on shell.    :param kwargs:  additional keyword arguments to pass to ``subprocess.popen``                    that is used to spawn the process (except ``shell``,                    ``stdout``, ``stderr``, ``stdin`` and                    shell=true,",command_injection,74
"      ""str$id"": ""str$id"",  xsrf_token_enforce_on = ()  @auth.require_xsrf_token_request",xsrf,6
"        referer_header_value = ""str$id""+payload",xss,3
    c.execute(query),sql_injection,1
"  def get(self, suburl):    request = urllib2.request(self.url + suburl)  def post(self, suburl, data):    request = urllib2.request(self.url + suburl, urllib.urlencode(data))",xsrf,18
"		command = ""str$id"".format(table_name, cacheid, pth)		self._run_command(command)",sql_injection,6
"            ""str$id"")        client = pab_client.partnerandroidbuildclient()        url = client.getartifacturl(            ""str$id"")    @mock.patch(""str$id"")        client = pab_client.partnerandroidbuildclient()        client.authenticate()",xsrf,13
"    column_list = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""]    form_excluded_columns = (""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"")",open_redirect,15
"        elif string == ""str$id"":            return ""str$id""",sql_injection,6
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id""openstack\""str$id""                           ""str$id"")        show_3par_cmd = ""str$id""",command_injection,11
"    query = ""str$id"" % (insert_table, svalues)",sql_injection,6
"            request.files[""str$id""].save(os.path.join(path, app.config[""str$id""]))                request.files[""str$id""].save(os.path.join(path, app.config[""str$id""]))                    copyfile(os.path.join(app.config[""str$id""], fn),                             os.path.join(path, app.config[""str$id""]))            link = ""str$id"" % url_for(""str$id"", sid=session_id)            success_txt = ""str$id"" % link            flash(markup(success_txt))            f = open(os.path.join(path, ""str$id""), ""str$id"")",command_injection,25
"        self.client.post(update_url, data)",open_redirect,2
"                    yield iofile(f, self.rule)",remote_code_execution,3
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,24
"    def __init__(self, sg, node, p=false):",path_disclosure,5
"        self._cli_run(""str$id"" % hostname, none)        out = self._cli_run(""str$id"" % (volume, hostname), none)",command_injection,11
"        return  current_user.is_authenticated and current_user.role.role_code in self.roles_allowed        ""str$id""",open_redirect,7
"        self.env.cr.execute(""str$id""""str$id""""str$id"" % (self._table,                    self._select(),                    self._from(),                    self._group_by()))",sql_injection,6
"          jc.pathcontainspredicate(""str$id"", load_balancer_name),          jc.pathcontainspredicate(""str$id"", target_pool_name)]))",path_disclosure,4
"        request.session[""str$id""] = request.get.get(redirect_field_name)",open_redirect,3
"                yield os.path.join(root, url[len(prefix):])",path_disclosure,3
                                                         stdin=stdin_input),command_injection,1
"          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {""str$id"": ""str$id""},          ),            {              ""str$id"": self.bot._attributes,              ""str$id"": {""str$id"": ""str$id""},            },",xsrf,17
"                            cls._key_for_tool_version(""str$id"", version),",remote_code_execution,2
"    cursor.execute(""str$id"", (game,))",sql_injection,2
"    cmd = ""str$id"".join([        ""str$id"",        ""str$id"",        ""str$id"",        ""str$id"".format(namespace),    ])    with host.sudo():        host.check_output(cmd)",command_injection,11
"        with host.sudo():            cmd_nslookup = (""str$id""                            ""str$id"".format(                                pod_name,                                hostname))            res = host.run(cmd_nslookup)            assert res.rc == num%id, ""str$id"".format(hostname)",command_injection,16
"    cursor.execute(""str$id"" % (winner, loser));",sql_injection,4
"            ""str$id"": self.request.get(""str$id""),",xss,2
"    sql = args.sql % tuple(sql_arguments)    print ""str$id"", sql    cursor.execute(sql)",sql_injection,9
"    url(r""str$id"", taskassets.as_view()),",path_disclosure,2
"        fields = (""str$id"", ""str$id"", ""str$id"")",command_injection,5
"    conn = connect()    c = conn.cursor()    c.execute(""str$id"".format(winner, loser))    conn.commit()    conn.close()",sql_injection,10
simulationmode = true,path_disclosure,3
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"                (""str$id"", models.foreignkey(to=""str$id"", related_name=""str$id"")),",sql_injection,3
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"        self.url = ""str$id"" % (self.base_url, task[num%id])",xsrf,6
"from .common import get_and_check_project, get_tile_json",path_disclosure,5
"    def __init__(self, target_graph, *args, shacl_graph=none, options=none, **kwargs):",path_disclosure,7
"    def test_token_getter_setter(self, save_session):",xsrf,3
"        table_actions = (createkeypair, importkeypair, deletekeypairs,",xsrf,5
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""openstack\""str$id""                           ""str$id"")",command_injection,7
"    req = ""str$id"".format(cfg(""str$id""), poll_name)    tmp = queryall(c, req)",sql_injection,8
pl=[],xss,1
"        def create_junk_table(self):        def destroy_junk_table(self):                query = ""str$id"" + email +""str$id""                self.cursor.execute(query)                query = ""str$id"" + reportid + ""str$id"" + userid + ""str$id"" + summary + ""str$id"" + description + ""str$id""                self.cursor.execute(query)                query1 = ""str$id"" + reportid +""str$id""                self.cursor.execute(query1)                query2 = ""str$id"" + str(intvote) + ""str$id"" + reportid                self.cursor.execute(query2)                query1 = ""str$id"" + reportid +""str$id""                self.cursor.execute(query1)                query = ""str$id"" + reportid                self.cursor.execute(query)                query = ""str$id"" + reportid                 self.cursor.execute(query)",sql_injection,67
"                        if power>num%id:                            print(""str$id"" % (power, i))                            with suppress_stdout():                                send(ip(src=target, dst=""str$id"" % i) / udp(dport=num%id)/raw(load=data), count=power)                        elif power==num%id:                            print(""str$id"" % i)                                send(ip(src=target, dst=""str$id"" % i) / udp(dport=num%id)/raw(load=data), count=power)                        if power>num%id:                            print(""str$id"" % (power, result[""str$id""]))                            with suppress_stdout():                                send(ip(src=target, dst=""str$id"" % result[""str$id""]) / udp(dport=num%id)/raw(load=data), count=power)                        elif power==num%id:                            print(""str$id"" % result[""str$id""])                                send(ip(src=target, dst=""str$id"" % result[""str$id""]) / udp(dport=num%id)/raw(load=data), count=power)",command_injection,54
"        return round(conf.seqmatcher.ratio(), num%id)    elif round(conf.seqmatcher.ratio(), num%id) >= match_ratio:",command_injection,8
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(    url_helper.urllib2.urlopen(mox.ignorearg(), mox.ignorearg(),",xsrf,5
"    ""str$id""""utility which allows to to quickly register a subscription adapters which returns new instantiated objects    of a given class",path_disclosure,19
import xsrf_client,xsrf,2
"            data = input(""str$id"") or ""str$id""",command_injection,5
"        query = ""str$id""+account_id+""str$id""+account_name+""str$id""+str(amount)+""str$id""+voting_account+""str$id""        cur.execute(query)",sql_injection,4
"            sql = ""str$id""\                    .format(str(scene), str(player), int(rank), str(points), str(recent_date))            self.db.exec(sql)            sql = ""str$id"".format(player)            res = self.db.exec(sql)",sql_injection,15
"  def xsrf_is_valid(self, _body):    return true",xsrf,5
"import urllibfrom google.appengine.ext import dbfrom google.appengine.api import usersfrom model import authorization, apikeymanagementlogimport utilsfrom django.utils.html import escapefrom django.utils.translation import ugettext as _api_key_length = 16keys_per_page = 50authorization_params_list = [    ""str$id"",    ""str$id"",    ""str$id"",    ""str$id"",    ""str$id"",    ""str$id"",    ""str$id"",    ""str$id"",    ""str$id"",    ""str$id"",    ""str$id"",    ""str$id"",]def to_authorization_params(param):    ret = {}    for param_name in authorization_params_list:        ret[param_name] = getattr(param, param_name)    return retclass listapikeys(utils.basehandler):    ""str$id""""str$id""""str$id""    https_required = true    ignore_deactivation = true    repo_required = false    admin_required = true    @utils.require_api_key_management_permission    def get(self):        user = users.get_current_user()        q = authorization.all().filter(""str$id"", self.repo or ""str$id"")        authorizations = q.fetch(keys_per_page)        nav_html = (""str$id""                    % (self.get_url(""str$id""),                       escape(_(""str$id""))))        user_email_with_tags = (""str$id""                % escape(user.email()))        xsrf_tool = utils.xsrftool()        return self.render(""str$id"",                           nav_html=nav_html,                           admin_api_keys_url=self.get_url(""str$id""),                           user=user, authorizations=authorizations,                           user_email_with_tags=user_email_with_tags,                           xsrf_token=xsrf_tool.generate_token(                               user.user_id(), ""str$id""))class createorupdateapikey(utils.basehandler):    ""str$id""""str$id""""str$id""    https_required = true    ignore_deactivation = true    repo_required = false    admin_required = true    def render_form(self, authorization=none, message=""str$id""):        ""str$id""""str$id""""str$id""        user = users.get_current_user()        if authorization:            operation_name = _(""str$id"")            nav_html = (""str$id""                        % (self.get_url(""str$id""),                           escape(_(""str$id""))))        else:            authorization = authorization.default_settings            operation_name = _(""str$id"")            nav_html = ""str$id""        nav_html += (""str$id""                     % (self.get_url(""str$id""),                        escape(_(""str$id""))))        user_email_with_tags = (""str$id""                % escape(user.email()))        xsrf_tool = utils.xsrftool()        return self.render(            ""str$id"",            user=user, target_key=authorization,            user_email_with_tags=user_email_with_tags,            login_url=users.create_login_url(self.request.url),            logout_url=users.create_logout_url(self.request.url),            operation_name=operation_name, message=message,            nav_html=nav_html,            xsrf_token=xsrf_tool.generate_token(                user.user_id(), ""str$id""),        )    @utils.require_api_key_management_permission    def get(self):        ""str$id""""str$id""""str$id""        management_log_key = self.request.get(""str$id"")        if management_log_key:            management_log = db.get(management_log_key)            message = ""str$id""            if management_log.action == apikeymanagementlog.create:                message = _(""str$id"")            elif management_log.action == apikeymanagementlog.update:                message = _(""str$id"")            return self.render_form(management_log.authorization, message)        else:            return self.render_form()    @utils.require_api_key_management_permission    def post(self):        ""str$id""""str$id""""str$id""        user = users.get_current_user()        xsrf_tool = utils.xsrftool()        if not (self.params.xsrf_token and xsrf_tool.verify_token(                self.params.xsrf_token, user.user_id(), ""str$id"")):            return self.error(num%id)        if self.request.get(""str$id""):            authorization = db.get(self.request.get(""str$id""))            if not authorization:                return self.error(num%id, _(""str$id""))            return self.render_form(authorization)        if not (self.params.contact_name and                self.params.contact_email and                self.params.organization_name):            return self.error(num%id, _(""str$id""))        original_key = self.request.get(""str$id"")        if original_key:            existing_authorization = db.get(original_key)            if not existing_authorization:                return self.error(num%id, _(""str$id""))            key_str = existing_authorization.api_key            action = apikeymanagementlog.update        else:            key_str = utils.generate_random_key(api_key_length)            action = apikeymanagementlog.create        repo = self.repo or ""str$id""        authorization = authorization.create(            repo, key_str,            **to_authorization_params(self.params))        authorization.put()        management_log = apikeymanagementlog(repo=repo,                                             api_key=authorization.api_key,                                             action=action)        management_log.put()        self.redirect(""str$id""                      % (self.repo, management_log.key()))",xsrf,305
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,18
token_granularity_minutes = num%id * framework_constants.secs_per_minute,xsrf,5
            group_exam_ind=num%id,open_redirect,1
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,9
"         jc.pathcontainspredicate(""str$id"", self.__server_group_name),         jc.pathcontainspredicate(""str$id"", ""str$id"")]))",path_disclosure,4
"    runs a command in shell and provides stdout, stderr and stdin streams.    this function creates a context manager that sets up the process, returns    to caller, closes streams and waits for process to exit on leaving.    the process is opened in `universal_newlines` mode.    :param command: the command to run on shell.                    that is used to spawn the process (except `shell`,                    `stdout`, `stderr`, `stdin` and `universal_newlines`, a                    `typeerror` is raised then).                    shell=true,",command_injection,71
"                        opener.addheaders = [(""str$id"", ""str$id""), (""str$id"", ""str$id""), (""str$id"", ""str$id""), (""str$id"", ""str$id""), (""str$id"", ""str$id""), (""str$id"", ""str$id""), (""str$id"", ""str$id"")]",xsrf,16
simulationmode = true,path_disclosure,3
"        result = self.common._cli_run(""str$id"", none)",command_injection,4
"			(r""str$id"",postloginhandler)		ui_modules={""str$id"": bootstrapmodule},",open_redirect,3
"        ""str$id"": response.json_body.get(""str$id"")",xsrf,2
            self._check_xsrf_cookie(),xsrf,1
"    native = {""str$id"": ""str$id""}",remote_code_execution,4
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"        keypath = kwargs.get(""str$id"", []) + list(keysorvalues[:-num%id])   # last element of ""str$id"" is the value        ob = self._findvalueforpath(*keypath)        return self._findvalueforpath(keypath)",path_disclosure,19
"                ssh_cmd = ssh_cmd.replace(""str$id"",                                          ""str$id"")",command_injection,4
"    nglib.query.path.get_switched_path(args.spath, args.search, rtype=rtype)    nglib.query.path.get_routed_path(args.rpath, args.search, rtype=rtype)    nglib.query.path.get_full_path(args.path, args.search, rtype=rtype)",path_disclosure,9
"from .common import get_and_check_project, get_tile_json",path_disclosure,5
"        self._session.cookies.clear()        self._session.cookies.save()        self._session.get(url, headers=headers)        if response.status_code == requests.codes.found:  # @undefinedvariable",xsrf,10
import tempfileimport urllib2,remote_code_execution,3
"from django.http import httpresponse, httpresponseredirect",open_redirect,5
"                               help=""str$id"")",command_injection,1
"        tp.push(parent, ""str$id"", rel_op)        tp1 = tp.clone()        self.assert_equal(len(tp1), num%id)",path_disclosure,8
"  version = os.environ[""str$id""]      str(version),",xsrf,4
        if user.is_authenticated():,sql_injection,2
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,18
"    shortest_set = []  # found shortest set from start to node, key is ""str$id"", value is list of nodes                start = time.time()",path_disclosure,22
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"        ""str$id""""open an url in a mechanize browser, optionally passing the        specified data and files as post arguments.        browser (mechanize.browser): the browser to use.",xsrf,23
"    return subprocess.call([""str$id"", ""str$id"", ""str$id""+program], shell=false, stdout=open(os.devnull), stderr=open(os.devnull))==num%id",open_redirect,7
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
import urllib.parse,path_disclosure,2
import xsrf_client,xsrf,2
        if not (self.params.contact_name and ,xsrf,4
"        self._cli_run(""str$id"" % hostname, none)        out = self._cli_run(""str$id"" % (volume, hostname), none)",command_injection,11
"            ""str$id"": true",xsrf,2
"    name = bleach.clean(name)    conn = connect()    c = conn.cursor()    c.execute(""str$id"",(name,))    conn.commit()    conn.close()",sql_injection,12
from cookielib import mozillacookiejar,xsrf,4
"        self.filter_string = ""str$id"".format(self.name, value)",sql_injection,4
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"        query = db.query(""str$id"" % page_name)",sql_injection,5
"            query += ""str$id""""str$id""\""str$id""""str$id""\""str$id""            query += ""str$id""""str$id""\""str$id""            query += ""str$id""""str$id""\""str$id""            query += ""str$id""%""str$id""%\""str$id""    # use lower() to ignore case             query += ""str$id"" + key + ""str$id"" + key + ""str$id""            query += ""str$id""%""str$id""%\""str$id""%""str$id""""str$id""%\""str$id""",sql_injection,32
"			command = ""str$id"".format(table_name,																			pth,																			utils.sqliteutils.escapetext(metadata),																			mod_time																			)			self._run_command(command)",sql_injection,8
        self.p = p        return bool(self.p),path_disclosure,5
"    record_log_files_in_redis(        redis_address,        node_ip_address, [stdout_file, stderr_file],        password=redis_password)",open_redirect,6
"            ssh_cmd = ""str$id"" % host",command_injection,5
"            ip = ipaddress.ip_network(value, strict=false)            start_ip = ip.network_address            end_ip = ip.broadcast_address            self.filter_string = ""str$id"".format(self.name, int(start_ip), int(end_ip))            ip = ipaddress.ip_address(value)            self.filter_string = ""str$id"".format(self.name, int(ip))",sql_injection,22
"            ssh_cmd = ""str$id""",command_injection,3
"              ""str$id"": {""str$id"": ""str$id""},            {},    bot_main.post_error_task(botobj, ""str$id"", num%id)",xsrf,7
			f.write(json.dumps(data)),sql_injection,1
"  version = os.environ[""str$id""]      str(version),",xsrf,4
"            n[""str$id""].append(dict(name=i))",path_disclosure,1
"          [jc.pathcontainspredicate(""str$id"", self.__use_lb_tp_name),           jc.pathelementscontainpredicate(           jc.pathelementscontainpredicate(",path_disclosure,4
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
"            text_lines = extractor.text_lines_from_url(entry,                                                       user_agent=make_user_agent_string(""str$id""))",remote_code_execution,4
"    def _run_ssh(self, command, check_exit_code=true, attempts=num%id):",command_injection,5
"    if ""str$id"" not in sid:        path = os.path.join(app.config[""str$id""], sid)        if os.path.isfile(os.path.join(path, app.config[""str$id""])):        abort(num%id)    if not utils.sid_is_valid(sid):        abort(num%id)    path = os.path.join(app.config[""str$id""], sid)    if os.path.isfile(os.path.join(path, app.config[""str$id""])):        return send_from_directory(directory=path,                                    filename=app.config[""str$id""])        abort(num%id)    if not utils.sid_is_valid(sid):        abort(num%id)    path = os.path.join(app.config[""str$id""], sid)    if os.path.isdir(path):        if not app.config[""str$id""]:            rmtree(path)    else:        abort(num%id)    if app.config[""str$id""]:        fbdb.child(""str$id"").child(sid).remove()    flash(""str$id"" % sid)    return ""str$id"", num%id",command_injection,53
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
"            headers = {""str$id"": input[""str$id""]}",command_injection,4
"                        cursor.execute(""str$id"" + gettitle(submission) + ""str$id"")",sql_injection,5
"    sql = ""str$id"" + self.title + ""str$id"" + \          ""str$id"" + self.entry_id + ""str$id""     db_execute(sql)      ""str$id"" + current_datestamp + ""str$id"" + \      ""str$id"" + self.entry_id + ""str$id""    db_execute(sql)",sql_injection,28
"    for row in cursor.execute(""str$id"" + gettitle(submission) + ""str$id"" + str(getdate(submission)) + ""str$id""):",sql_injection,12
"        if event_type == ""str$id"" and len(self.fit_subscriptions) > num%id:            _logger.info(""str$id"", event.event_type_id.name, event.name)            return true",open_redirect,13
evry api parameters written in this file are private and secret ! ,command_injection,12
"          [jc.pathcontainspredicate(""str$id"", self.__use_lb_tp_name),           jc.patheqpredicate(""str$id"", self.bindings[""str$id""]),           jc.pathelementscontainpredicate(           jc.pathelementscontainpredicate(           [jc.pathcontainspredicate(""str$id"", self.__use_lb_tp_name),            jc.pathelementscontainpredicate(",path_disclosure,9
        self.__traversed = set(),path_disclosure,3
        response = self.client.post(url),xsrf,3
"        newresult = request.querypage(payload)        if count:            for element in resultdict.values():                if element[num%id] == num%id:                        value = ""str$id"" % (conf.url, payload)                        value += ""str$id"" % payload                        value += ""str$id"" % payload                        value += ""str$id"" % payload",command_injection,34
"	def set_order_by(self, args):		meta = frappe.get_meta(self.doctype)",sql_injection,6
"        (target_nodes, target_classes, _, _) = self.target()",path_disclosure,6
"      self.svcr.assertwhitelistedorxsrf(mc, self.request)    self.svcr.assertwhitelistedorxsrf(mc, self.request)",xsrf,4
    unittest.testcase.maxdiff = none,xsrf,3
"            {""str$id"": exceptions.clientcertificatenottrusted}}",xsrf,2
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,161
"                       ""str$id"",                    ""str$id"",                      ""str$id"",                     ""str$id"",                        ""str$id""                        ]",open_redirect,6
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
        xsrf_token.__name__,xsrf,1
"            if proc.is_running() and system(""str$id"" % self.hostname) is num%id:",open_redirect,8
debug = true,open_redirect,3
"            self.filename = self.local + urllib.parse.unquote(self.groups[""str$id""])",path_disclosure,5
"    with open(""str$id"", ""str$id"") as f:        sql_raw = f.read()    sql_template = template(sql_raw)",sql_injection,11
class taskassets(tasknestedview):,path_disclosure,2
from rest_framework.validators import validationerrorfrom .models import message,open_redirect,7
from .value_constraints import classconstraintcomponent    classconstraintcomponent,path_disclosure,5
"        self._cli_run(""str$id"", none)",command_injection,2
"        response = self.c.get(""str$id"")",open_redirect,3
"             values (""str$id"", ""str$id"");""str$id""""    db().execute((sql % data), true)    db().execute(sql, true)    conn = db().execute(sql, false)",sql_injection,13
"        self.insert_template = ""str$id""        self.update_template =  ""str$id""",sql_injection,6
"            if rc == rc_ok:                if vlevel > num%id:                    print ""str$id""            elif rc == rc_runtime_error:                for nodes, msg in fs.proxy_errors:                    print ""str$id"" % (nodes, msg)",remote_code_execution,24
            csr_state_id=csr_state_logout.csr_state_id,open_redirect,1
"      env[""str$id""] = (self.bin_dir_path + os.path.pathsep + env[""str$id""]                     if env.get(""str$id"", ""str$id"") else self.bin_dir_path)",command_injection,12
"        curr_commit = path(""str$id"")            mfs_commit = self.get_mfs_path(                fs_repo_root, branch, branch_info=curr_commit)            mfs_commit_meta = mfs_commit / ""str$id""                mfs_commit_hash = self.ipfs.files_stat(mfs_commit)[""str$id""]                mfs_commit_ref_hash = self.ipfs.files_stat(                    mfs_commit / ""str$id"")[""str$id""]            meta = self.mfs_read_json(mfs_commit_meta)            if len(meta) == num%id:                break            h, ts, msg = mfs_commit_hash[:num%id], meta[""str$id""], meta[""str$id""]                    print(f""str$id"")            commits.append(mfs_commit_hash)            curr_commit = curr_commit / ""str$id""",path_disclosure,45
"                  twentytwo, twentythree from timeslots where userid = {num%id} and calendarid=""str$id""""str$id"""".format(result[num%id], calendarid)",sql_injection,11
"                ssh_cmd = ssh_cmd.replace(""str$id"",                                          ""str$id"")",command_injection,4
"            response = self.client.post(url, json.dumps(body), content_type=""str$id"")            response = self.client.get(url)        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,30
"    set_clause_args = ""str$id"".join(map(        lambda kv: f""str$id""{kv[num%id]}\""str$id"",        updated_fields.items(),    ))        cursor.execute(f""str$id""""str$id""""str$id"")    cursor.execute(f""str$id""""str$id""""str$id"")        cursor.execute(f""str$id""""str$id""{tag[""str$id""]}""str$id""{tag[""str$id""]}""str$id""{tag[""str$id""]}""str$id""{id}""str$id""""str$id"")",sql_injection,11
"from snakemake.exceptions import missingoutputexception, workflowerror, wildcarderror",remote_code_execution,6
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,11
class taskassets(tasknestedview):,path_disclosure,2
"from validator import validate, vuser, vrequired, vmeetup, veditmeetup, vfloat, valueorblank, validip, vmenu, vcreatemeetup",xsrf,13
garray = range(num%id),path_disclosure,3
    return true if answer is not none else false,sql_injection,9
"    def __init__(self, dump=none):            self.dumpfilepath = ""str$id"".format(strftime(""str$id""))            return ""str$id"".format(self.dumpfilepath)            return ""str$id""class signinexception(kijijiapiexception):    def __str__(self):        return ""str$id""+super().__str__()class postadexception(kijijiapiexception):    def __str__(self):        return ""str$id""+super().__str__()class bannedexception(kijijiapiexception):    def __str__(self):        return ""str$id""+super().__str__()class deleteadexception(kijijiapiexception):    def __str__(self):        return ""str$id""+super().__str__()def get_token(html, token_name):    retrive csrf token from webpage    tokens are different every time a page is visitied    res = soup.select(""str$id"".format(token_name))    if not res:        print(""str$id"".format(token_name))        return ""str$id""    return res[num%id][""str$id""]",xsrf,57
"        self._session.cookies.clear()        self._session.cookies.save()        self._session.get(url, headers=headers)        if response.status_code == requests.codes.found:  # @undefinedvariable",xsrf,10
"                    sql = ""str$id"" % user                    rsu = list(outcur.execute(sql))                        sql = ""str$id"" % (user)                        outcur.execute(sql)",sql_injection,14
      stop = self.instrptr >= len(self.opcodes),path_disclosure,5
invite_somebody = step_8,open_redirect,3
"def db_execute(sql, expect_return_values=false):",sql_injection,3
"            self._cli_run(""str$id"" % (volume_name, growth_size),                          none)",command_injection,5
"    safe_n = name = name.translate(none, ""str$id""\""str$id""insert into players (name) values (""str$id"")"".format(name=safe_n)    c.execute(query)",sql_injection,12
"						select_where = ""str$id""			c.execute(select_statement, (topic_id,))",sql_injection,5
"	return send_from_directory(""str$id"",	return send_from_directory(""str$id"",",sql_injection,4
"file = sys.stderrverbose = falsequiet = falsedef debug(*arg):        print(""str$id"", *arg, file=file)def warn(*arg):    if not quiet:        print(""str$id"", *arg, file=file)def err(*arg):    print(""str$id"", *arg, file=file)",command_injection,22
"    sql = args.sql % tuple(sql_arguments)    print ""str$id"", sql    cursor.execute(sql)",sql_injection,9
"                maint_int=armppi(num=num%id))                self.gic,",command_injection,2
"        value = u""str$id"".format(value)",sql_injection,3
"        ssh_cmd = ""str$id"" % host_name",command_injection,5
            csr_state_id=csr_state_logout.csr_state_id,open_redirect,1
"from typing import iterator, typevarfrom .interface import irow",sql_injection,8
"    runs a command in shell and returns the read stdout and stderr data.    this function waits for the process to exit.    :param command: the command to run on shell.                    that is used to spawn the process (except `shell`,                    `stdout`, `stderr`, `stdin` and `universal_newlines`, a                    `typeerror` is raised then).",command_injection,48
"        start_time = time.time()        data = get_paths_through_all_edges(module.edges_all, th_module, language)        print(module.name, time.time() - start_time)def get_paths_through_all_edges(edges, th_module=none, language=none):",path_disclosure,15
"dataset = pd.read_csv(""str$id"")",remote_code_execution,3
  @property  def json(self):    return json.dumps(_data),xss,5
"        self._cli_run(""str$id"" %                      (cli_qos_string, vvs_name), none)            self._cli_run(""str$id"" % (vvs_name,                                                      volume_name), none)            self._cli_run(""str$id"" % (domain,                                                         vvs_name), none)            self._cli_run(""str$id"" % (vvs_name,                                                      volume_name), none)        self._cli_run(""str$id"" % (vvs_name), none)        self._cli_run(""str$id"" % (vvs_name), none)        self._cli_run(""str$id"" % (vvs_name, volume_name), none)",command_injection,33
            if isopen(neighbor):                if neighbor == target:                    return cost                if neighbor not in costs or costs[neighbor] > cost:                    costs[neighbor] = cost                    q.append(neighbor),path_disclosure,21
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"        self.url = ""str$id"" % (self.base_url, task[num%id])",xsrf,6
"            doc_detail_link = f""str$id"" % doc_id            self.browser.get(self.live_server_url + doc_detail_link)            doc_type_select = select(self.browser.find_element_by_xpath(                ""str$id""))            doc_type_select.select_by_visible_text(""str$id"")            self.assertin(doc_detail_link, self.browser.current_url)",open_redirect,15
        except keyerror:,path_disclosure,2
"      return [os.path.join(self.bin_dir_path, self.executable)] + self.args",command_injection,5
"    before = ""str$id""    after = ""str$id""    def __init__(self, txt):        headbegin = txt.find(""str$id"")        headend = txt.find(""str$id"", headbegin)        headsplit = (txt.find(""str$id"", headbegin) + num%id) or headend # if there is a blank, title begins after it; otherwise stop at end of line and title will be the empty string.        opts = txt[headbegin+num%id : headsplit].strip()                    opts = ""str$id""                        opts = ""str$id"" % opts[num%id:]                        warn(""str$id"", opts[num%id:])                        opts = ""str$id""                warn(""str$id"", opts)                opts = ""str$id""        super(slide, self).__init__(slideparser.parse(txt[headend:-num%id], slidelexer),                         self.before % (opts, txt[headsplit:headend]),                         self.after)",command_injection,78
"austin_urls = (""str$id"", {""str$id"": [""str$id"", ""str$id"", ""str$id"", ""str$id""], ""str$id"": [""str$id"", ""str$id""]})sms_urls = (""str$id"", {""str$id"": [""str$id"", ""str$id""], ""str$id"": [""str$id""]})",sql_injection,18
"    except(psycopg2.databaseerror, e):",sql_injection,2
"        ""str$id"",",xsrf,1
"    db().execute((sql % data), true)",sql_injection,4
"        redis_client = redis.strictredis(            host=redis_ip_address,            port=redis_port,            password=args.redis_password)",open_redirect,6
"    def check_xsrf_cookie(self):        ""str$id""""str$id""""str$id""        if self.request.method.upper() == ""str$id"" and not self.request.body:            raise web.httperror(num%id, ""str$id"")",xsrf,13
"        where id=""str$id"";    ""str$id""' % id",sql_injection,5
"        newresult = request.querypage(payload)        if count:            for element in resultdict.values():                if element[num%id] == num%id:                        value = ""str$id"" % (conf.url, payload)                        value += ""str$id"" % payload                        value += ""str$id"" % payload                        value += ""str$id"" % payload",command_injection,34
"          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {""str$id"": ""str$id""},          ),            {              ""str$id"": self.attributes,              ""str$id"": {""str$id"": ""str$id""},            },",xsrf,17
"        headers = {            ""str$id"": ""str$id"",            ""str$id"": __version__.rsplit(""str$id"", num%id)[num%id],        }        if not controller:                ""str$id"")",xsrf,13
"        came_from = ""str$id""",open_redirect,3
"onehotencoder = onehotencoder(categorical_features = [num%id])x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = num%id.num%id, random_state = num%id)",remote_code_execution,17
"        request.session[""str$id""] = request.get.get(redirect_field_name)",open_redirect,3
"            data=jsonutils.dumps(fake_port, sort_keys=true))",xsrf,2
        npool = []        total_pool = settings.network_pool[num%id]        if not total_pool: return,xsrf,10
"    exttext, _ = model.objects.get_or_create(extraction_script=script,                                             data_document_id=pk)",open_redirect,5
"        a.append(i)        b.append(verdict[i])    ax1.pie(b, labels = b, colors = colors,    ax1.legend(a)    conn.close()    conn2.close()    s = username + ""str$id"" + str(count) + ""str$id""    return s",sql_injection,23
"    if request.args.get(""str$id"", none):        return redirect(request.args.get(""str$id""))",xsrf,5
"    def get(self, instance_id=none, user_id=none):        if instance_id:            query = {                ""str$id"": instance_id,                ""str$id"": user_id            }            results = table.filter_by(**query)                    ""str$id"": ""str$id"",                    ""str$id"": ""str$id""                ""str$id"": results,                ""str$id"": ""str$id""        response_object = {            ""str$id"": table.query(),            ""str$id"": ""str$id""        }",sql_injection,33
"                updated_comments = comment_id ",sql_injection,3
"        email       = self.get_argument(""str$id"", default=""str$id"", strip=false)        user = self.current_user        if user.email != email:            return",xsrf,13
"    c.execute(""str$id"", (bleach.clean(name),))",sql_injection,2
def search_start_node_outside(node):    flag = false    if node.arriving_edges.count() > num%id:        for edge in node.arriving_edges:            if edge.from_node.type.name == start_node_name:                flag = true                break    return flag,path_disclosure,23
        for cluster in checks:,command_injection,4
"from sqlalchemy.sql import and_, or_, not_, textfrom sqlalchemy.sql.expression import select, outerjoin, func, labelfrom sqlalchemy.engine.url import urlfrom sqlalchemy import create_engine, metadata, tablefrom sqlalchemy.engine import reflection",sql_injection,24
"            ssh_cmd = ""str$id"" % \                (host_name, vol_name)",command_injection,7
"    print ""str$id""",open_redirect,2
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
"    r""str$id""    r""str$id""    r""str$id""    t.value = beamr.interpreters.tableenv(t.value)    r""str$id""    global lexer    gd = lexer.lexmatch.groupdict()    r""str$id""    t.value = beamr.interpreters.box(t.value)    r""str$id""    t.value = beamr.interpreters.text(""str$id"" + t.value)    r""str$id"" # inspired loosely from https://github.com/khan/simple-markdown/blob/master/simple-markdown.js",command_injection,28
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"            query = query.order_by(order_column + ""str$id"" + order_direction)",sql_injection,7
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,48
import redisimport timefrom ray.services import get_ip_addressfrom ray.services import get_port,open_redirect,9
        notes = [],sql_injection,3
import xsrf_client,xsrf,2
"    master_peer = peer(unhexlify(""str$id""                                 ""str$id""                                 ""str$id""                                 ""str$id""                                 ""str$id""))    def __init__(self, my_peer, endpoint, network, metadata_store):",sql_injection,13
"                            sql += ""str$id"" % (""str$id"", ip[num%id], -num%id,p)                             outcur.execute(sql)",sql_injection,8
            self.check_log_files_and_push_updates()            time.sleep(num%id),open_redirect,2
"      sql = ""str$id"" + \        ""str$id"" + self.body + ""str$id"" + \        ""str$id"" + self.entry_id + ""str$id""      db_execute(sql)",sql_injection,18
            return self.stderr_interceptor.read_all(),open_redirect,2
"        self._cli_run(""str$id"", none)",command_injection,2
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,16
"    self.mock_current_user(user_email=""str$id"")    response = self.test_app.get(""str$id"", params={        ""str$id"": buildbot.createbuildurl(master_name, builder_name, build_number),        ""str$id"": step_name,        ""str$id"": test_name})    self.assertequals(num%id, response.status_int)  def testnonecorpusercannotscheduleanewanalysis(self):    self.assertraisesregexp(        webtest.app.apperror,        re.compile(""str$id"",                   re.multiline | re.dotall),        self.test_app.get,            ""str$id"": test_name        })",xsrf,27
        self.check_xsrf(),xsrf,1
"    url_helper.urllib2.urlopen(url, mox.ignorearg(),                               timeout=mox.ignorearg()).andreturn(                                   stringio.stringio(response))",xsrf,4
        self.path = args.path        self.repos = args.repos,path_disclosure,6
"    self.app.get(""str$id"")",xsrf,1
"parser = yacc.yacc(tabmodule=""str$id"", debugfile=""str$id"", debug=not debug.quiet)",command_injection,6
from django.core.exceptions import objectdoesnotexist,path_disclosure,4
"            db().execute((sql % data), true)",sql_injection,4
"        resp = requests.get(""str$id"")",sql_injection,3
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"from flask import blueprint, request, session, g, redirect, url_for, \     render_template, flash, current_app    return redirect(url_for(""str$id""))",open_redirect,15
"        if response[""str$id""] >= self.model.rowcount():            self.model.add_items(response[""str$id""])",sql_injection,5
"        node_ip_address: the ip address of the node that the log monitor            process is running on. this will be used to determine which log            files to track.        log_files: a dictionary mapping the name of a log file to a list of            strings representing its contents.        log_file_handles: a dictionary mapping the name of a log file to a file            handle for that file.    def __init__(self,                 redis_ip_address,                 redis_port,                 node_ip_address,                 redis_password=none):        self.node_ip_address = node_ip_address        self.redis_client = redis.strictredis(            host=redis_ip_address, port=redis_port, password=redis_password)        self.log_files = {}        self.log_file_handles = {}        self.files_to_ignore = set()        ""str$id""""str$id""""str$id""        num_current_log_files = len(self.log_files)        new_log_filenames = self.redis_client.lrange(            ""str$id"".format(self.node_ip_address),            num_current_log_files, -num%id)        for log_filename in new_log_filenames:            logger.info(""str$id"".format(log_filename))            assert log_filename not in self.log_files            self.log_files[log_filename] = []    def check_log_files_and_push_updates(self):        ""str$id""""str$id""""str$id""        for log_filename in self.log_files:            if log_filename in self.log_file_handles:                new_lines = []                while true:                    current_position = (                        self.log_file_handles[log_filename].tell())                    next_line = self.log_file_handles[log_filename].readline()                    if next_line != ""str$id"":                        new_lines.append(next_line)                    else:                        self.log_file_handles[log_filename].seek(                            current_position)                        break                if len(new_lines) > num%id:                    self.log_files[log_filename] += new_lines                    redis_key = ""str$id"".format(                        self.node_ip_address, ray.utils.decode(log_filename))                    self.redis_client.rpush(redis_key, *new_lines)            elif log_filename in self.files_to_ignore:                pass            else:                    self.log_file_handles[log_filename] = open(                        log_filename, ""str$id"")                except ioerror as e:                    if e.errno == os.errno.emfile:                        logger.warning(                            ""str$id""                            ""str$id"".format(log_filename))                    elif e.errno == os.errno.enoent:                                       ""str$id"".format(log_filename))                    self.files_to_ignore.add(log_filename)",open_redirect,182
"  return db.gqlquery(""str$id"", users.get_current_user.user_id()).get()",xsrf,3
"            log.debug(""str$id"", n)",remote_code_execution,2
"        steps = [            (key, status.get(key, {}).get(""str$id"", false), status.get(key, {}).get(""str$id"", {}))            for key in get_onboarding_steps()        ]        context.update({            ""str$id"": steps,        })",open_redirect,19
            return buffered_bytes.decode(self.source_encoding)    def flush_all(self) -> str:,open_redirect,6
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id"")",command_injection,7
"                and user_id = {num%id};""str$id"""".format(self.id)        total_validation_time = db.engine.execute(sql)",sql_injection,7
"			active_employees = frappe.get_all(""str$id"", 		filters = { ""str$id"": ""str$id"", ""str$id"": filters.company}, 	",sql_injection,10
"        str -- first line of output    cmd = shlex.split(command)    return subprocess.check_output(cmd).decode(""str$id"").split(""str$id"")[num%id]",command_injection,11
"        query = ""str$id""+proxy_id+""str$id""        cur.execute(query)",sql_injection,4
"				name = ""str$id"" ""str$id""""str$id""""str$id"" % name)",command_injection,6
"                await cursor.execute(\                    ""str$id""\                    % (name, password))",sql_injection,6
"    def perform(self, query, arg_list=none):            c = conn.cursor(cursor_factory = psycopg2.extras.realdictcursor)            if arg_list:                c.execute(query, arg_list)            else:                c.execute(query)            result = c.fetchall()",sql_injection,18
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url)",xsrf,25
"    if request.args.get(""str$id"", none):        return redirect(request.args.get(""str$id""))",xsrf,5
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"        ssh_cmd = (""str$id"" %                   {""str$id"": port1, ""str$id"": host_name})            ssh_cmd = (""str$id"" % (port, host_name))",command_injection,14
"    if env.name == none:            select also from isalso where name=""str$id"" order by {num%id} limit num%id            ""str$id""'.format(name, r))",sql_injection,17
"                            self._run_ssh(""str$id"" % map_id)                            self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)",command_injection,15
"		group by si.name order by days_since_last_order ""str$id""""",sql_injection,7
"import sqlalchemyfrom sqlalchemy import textfrom sqlalchemy.orm import sessionmaker, scoped_sessionengine = sqlalchemy.create_engine(""str$id"")session = scoped_session(sessionmaker(bind=engine))s = session()def select_row_from_mysql_command(command_str):    ""str$id""""str$id""""str$id""    ""str$id""""str$id""""str$id""    sql = text(str(command_str))    return s.execute(sql).fetchall()def insert_into_mysql_command(command_str):        ""str$id""""str$id""""str$id""        sql = text(str(command_str))        s.execute(sql)        s.commit()",command_injection,30
"from lxml import htmlfrom django.test import testcasefrom dashboard.tests.loader import load_model_objects, fixtures_standardfrom selenium import webdriverfrom django.conf import settingsfrom selenium.webdriver.support.select import selectfrom selenium.webdriver.common.by import byfrom selenium.webdriver.support.ui import webdriverwaitfrom selenium.webdriver.support import expected_conditions as ec",open_redirect,31
"    cur.execute(""str$id"")",sql_injection,1
"                    getattr(plt, ""str$id"".format(a))(eval(r))",remote_code_execution,2
    num_cycles = column(),command_injection,3
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"            ws = webishserver(webport)            ws.allow_local_access(os.path.exists(os.path.join(self.basedir,                                  self.web_allow_local_access_file)))            self.add_service(ws)",xsrf,6
"				opening = get_leave_balance_on(employee.name, leave_type, filters.from_date,					allocation_records_based_on_from_date.get(employee.name, frappe._dict()))",sql_injection,7
"                    _, _, field = self._path[-num%id]                    self._path[-num%id] = (key, notsupplied, field)",path_disclosure,10
"                db.log_event(""str$id"", ""str$id"", ""str$id"")",command_injection,3
from pixelated.resources import baseresource,xsrf,4
"            if xss_request_url.text.find(payload) != -num%id:                impact = check_xss_impact(xss_request_url.headers)                xss_result = true                xss_result = true            if xss_result is true:                attack_result = { ""str$id"" : num%id, ""str$id"" : scanid, ""str$id"" : url, ""str$id"": ""str$id"", ""str$id"": impact, ""str$id"": headers, ""str$id"":body, ""str$id"": xss_request.headers ,""str$id"": xss_request.text}                return",xss,41
        result = -num%id,remote_code_execution,3
"    path = posixpath.normpath(path)    path = path.lstrip(""str$id"")    newpath = ""str$id""    for part in path.split(""str$id""):        if not part:            continue        drive, part = os.path.splitdrive(part)        head, part = os.path.split(part)        if part in (os.curdir, os.pardir):            continue        newpath = os.path.join(newpath, part).replace(""str$id"", ""str$id"")    if newpath and path != newpath:        return httpresponseredirect(newpath)    fullpath = os.path.join(document_root, newpath)            return directory_index(newpath, fullpath)",open_redirect,51
"	def _raise_exception():		frappe.throw(_(""str$id""), frappe.dataerror)			_raise_exception()			_raise_exception()			_raise_exception()			_raise_exception()",sql_injection,8
from invenio.utils.url import make_user_agent_string,remote_code_execution,4
                    col.before += cls.marker % (col.percentage if col.percentage > num%id.num%id,command_injection,9
"        query = ""str$id""""str$id""""str$id"".format(project_id)        contributors = db.engine.execute(query)",sql_injection,6
"""str$id"""" configuration variables for defining remote applications.",xsrf,7
"        self.name = ""str$id""",sql_injection,3
"    ""str$id""""str$id""""str$id""",xsrf,1
"            self._execute_interactive(command, job_id)",command_injection,2
            print(db_user_task_ids),sql_injection,1
"    def push(self, proxy, attribute, relation_operation):        node = traversalpathnode(proxy, attribute, relation_operation)        self.nodes.pop()    def clone(self):        ""str$id""""str$id""""str$id""        return traversalpath(self.nodes[:])",path_disclosure,16
    id = get_customer_id(query),sql_injection,3
"                            cls._key_for_tool_version(""str$id"", version),                            cls._key_for_tool_version(""str$id"", version),",remote_code_execution,4
"                    os.system(""str$id""\                    .format(word+""str$id"",""str$id"".join(definitions)))                os.system(""str$id"" % word)                os.system(""str$id"" % word)",command_injection,8
"            sr.notes = request.post[""str$id""]",xss,3
"        sql = ""str$id"".format(scene)        res = db.exec(sql)    sql = ""str$id"".format(scene, date)    res = db.exec(sql)",sql_injection,13
"        url_response = urllib2.urlopen(request, timeout=url_open_timeout).read()        url_response = urllib2.urlopen(url, encoded_data,                                       timeout=url_open_timeout).read()        url_response = urllib2.urlopen(url, timeout=url_open_timeout).read()",xsrf,13
"    print ""str$id""",sql_injection,2
"posts = [(""str$id"", datetime.datetime.now())]  return reversed(posts)  posts.append((content, datetime.datetime.now()))",sql_injection,8
"            sql = ""str$id"".format(scene)            res = self.db.exec(sql)",sql_injection,6
        article = none,open_redirect,3
"        value = u""str$id"".format(value)",sql_injection,3
"        plugins = {}        with open(self.cache_file(self.plugin_cache_file), ""str$id"") as f:            data = f.read().strip()        json_data = json.loads(data)        for x in json_data:            if json_data[x][""str$id""] or self.aggressive:                plugins[x] = json_data[x]        return plugins        if get_result:",sql_injection,29
"		blacklisted_keywords = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"",			""str$id"", ""str$id"", ""str$id"", ""str$id""]",sql_injection,13
"    runs a command in shell and returns the read stdout and stderr data.    this function waits for the process to exit.    :param command: the command to run on shell.    :param kwargs:  additional keyword arguments to pass to ``subprocess.popen``                    that is used to spawn the process (except ``shell``,                    ``stdout``, ``stderr``, ``stdin`` and",command_injection,51
"        return resource.getchild(self, path, request)        self.putchild(""str$id"", file(self._static_folder))        self.putchild(""str$id"", keysresource(self._services_factory))        self.putchild(attachmentsresource.base_url, attachmentsresource(self._services_factory))        self.putchild(""str$id"", contactsresource(self._services_factory))        self.putchild(""str$id"", featuresresource(portal))        self.putchild(""str$id"", tagsresource(self._services_factory))        self.putchild(""str$id"", mailsresource(self._services_factory))        self.putchild(""str$id"", mailresource(self._services_factory))        self.putchild(""str$id"", feedbackresource(self._services_factory))        self.putchild(""str$id"", usersettingsresource(self._services_factory))        self.putchild(loginresource.base_url, loginresource(self._services_factory, portal, disclaimer_banner=disclaimer_banner))        self.putchild(logoutresource.base_url, logoutresource(self._services_factory))",xsrf,30
"    util.subp([""str$id"", ""str$id""], rcs=[num%id, num%id])",command_injection,4
"    with open(step.source_path, ""str$id"") as f:        source_code = f.read()",open_redirect,8
"        res += ""str$id"".format(i)",sql_injection,3
"            data = self.pipe(self.pip_command, data)",path_disclosure,4
"    msg = ""str$id""    if not call_from:        msg = push_testcases_to_testrail_celery(project.id)",path_disclosure,9
"        ""str$id"", headers=headers",sql_injection,2
            self.check_log_files_and_push_updates()            time.sleep(num%id),open_redirect,2
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id""openstack\""str$id""                           ""str$id"")",command_injection,8
"        error_description = strings.pascal_to_space(type(error).__name__)        cog = strings.pascal_to_space(getattr(cog, ""str$id"", str(cog)))        error_description += f""str$id""        embed.set_footer(text=error_description)        traceback.print_exception(type(error), error, error.__traceback__)",command_injection,15
"    def _executesql(self, cur, sql):            cur.execute(sql)",sql_injection,5
"                    label=q.question, required=q.required,                    label=q.question, required=q.required,                    label=q.question, required=q.required,                    label=q.question, required=q.required,                    label=q.question, required=q.required,",xss,10
"				print attrs[""str$id""]				print attrs[""str$id""]				print attrs[""str$id""]					print attrs[""str$id""]					print gettext(problem.childnodes)",open_redirect,10
            msg = forms.validationerror(errormessages.empty_create_position_form),open_redirect,3
"    sql = ""str$id""""str$id""""str$id"".format(item_id)    cursor.execute(sql)",sql_injection,4
        pass,xsrf,1
"    def _cmd_to_dict(self, cmd):        arg_list = cmd.split()",command_injection,6
"                    query = ""str$id""+row[num%id]+ ""str$id"" + symbol+""str$id""+str(row[num%id])+""str$id""+str(float(price))+""str$id""+str(float(volume))+""str$id""+row[num%id]+""str$id""                    cur.execute(query)",sql_injection,7
"    mpv = ""str$id"".join(args.mpv)",remote_code_execution,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,21
"from benchmark import config, data_service",remote_code_execution,5
"      self, remote, attributes, server, server_version, base_dir,      shutdown_hook):    self._remote = remote",xsrf,10
                                      vm=ip_address),command_injection,1
"fromdef test_user_not_logged_in(client,create_user):def test_election_not_open(client,create_user):    assert ""str$id"" in request.content.decode(""str$id"")",open_redirect,7
"    def get(self, path, get_args=""str$id"", as_json=true):        request = request_mock(path)    def post(self, path, body=""str$id"", headers=none):        request = request_mock(path=path, method=""str$id"", body=body, headers=headers)    def put(self, path, body):        request = request_mock(path=path, method=""str$id"", body=body, headers={""str$id"": [""str$id""]})    def delete(self, path, body=""str$id""):        request = request_mock(path=path, body=body, headers={""str$id"": [""str$id""]}, method=""str$id"")",xsrf,41
"            result = self.etcd.get(os.path.join(self.namespace, key))        path = os.path.join(self.namespace, key)",path_disclosure,8
"        if iclient(ctx).getservicenamed(""str$id"").have_private_root():                       t.a(href=""str$id"")[""str$id""],",xsrf,3
"                  ""str$id"", ""str$id"", ""str$id"", ""str$id"",                  ""str$id"")",command_injection,5
            remote_work_dir_copy = lwrjobrunner.__remote_work_dir_copy( client ),remote_code_execution,5
"    cursor.execute(f""str$id""""",sql_injection,1
"          ""str$id"": {""str$id"": ""str$id""},",xsrf,3
"    env={""str$id"": text_type(os.pathsep.join(python_setup.interpreter_search_paths))},",remote_code_execution,2
"    record_log_files_in_redis(        redis_address,        node_ip_address, [stdout_file, stderr_file],        password=redis_password)",open_redirect,6
"        insert_query = self.insert_template.format(            self.is_none(ambient_temperature),             self.is_none(ground_temperature),             self.is_none(air_quality),             self.is_none(air_pressure),             self.is_none(humidity),             self.is_none(wind_direction),             self.is_none(wind_speed),             self.is_none(wind_gust_speed),             self.is_none(rainfall),             created)        print insert_query        self.db.execute(insert_query)            print rows_count, ""str$id""",sql_injection,19
"      ""str$id"": json.dumps(workflow_data[""str$id""]),      ""str$id"": json.dumps(workflow_data[""str$id""]),      ""str$id"": json.dumps(credentials.credentials.keys()),      ""str$id"": json.dumps(workflow_node_properties),      ""str$id"": json.dumps(_get_workflows(request.user)),",xss,10
"                sql = ""str$id"" + username + ""str$id"" + pass_hash + ""str$id""                c.execute(sql)",sql_injection,12
            return rc,remote_code_execution,2
"        embed.set_author(name=""str$id"", url=""str$id"")        embed.url = ""str$id""",command_injection,5
"        sql = ""str$id"".format(user_id, project_id)        result = db.engine.execute(sql)                    set projects_mapped = array_append(projects_mapped, {num%id})                  where id = {num%id}""str$id""'.format(project_id, user_id)        db.engine.execute(sql)",sql_injection,18
                    print(row),sql_injection,1
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"        with self.worker.lock:            export_keys = self.redis_client.lrange(""str$id"", num%id, -num%id)            for key in export_keys:                num_imported += num%id                self._process_key(key)            for msg in import_pubsub_client.listen():",open_redirect,19
"        response = self.client.get(""str$id"")",xsrf,3
"            (""str$id"", ""str$id"", taskline),            (""str$id"", ""str$id"", tasklinegroup),",path_disclosure,6
"        flows = self.schema.flows()        cursor = db.cursor()        cursor.execute(""str$id"")        cursor.execute(flows)",sql_injection,8
"from snakemake.io import iofile, wildcards, resources, _iofile",remote_code_execution,7
"    def match_versions(self, version, fixed_in):        if version == fixed_in:            return false        parts_version = version.split(""str$id"")        parts_fixed_in = fixed_in.split(""str$id"")        if len(parts_version) <= len(parts_fixed_in):            for x in range(len(parts_version)):                if int(parts_version[x]) < int(parts_fixed_in[x]):                    return true                if int(parts_version[x]) > int(parts_fixed_in[x]):                    return false            return false        else:            for x in range(len(parts_fixed_in)):                if int(parts_version[x]) < int(parts_fixed_in[x]):                    return true                if int(parts_version[x]) > int(parts_fixed_in[x]):                    return false            return false        with open(self.cache_file(self.version_cache_file), ""str$id"") as f:",sql_injection,62
"        if ""str$id"" not in obj:            obj[""str$id""] = self._get_latest_id() + num%id        empties = ""str$id"".join([self.holder for col in obj])        query = ""str$id"" + self.table_name + ""str$id"" + columns + ""str$id"" + empties + ""str$id""        feedback = self.sql.perform(query, obj.values())        return obj        query_params = query_params or {}        if query_params:            where_clause, query_items = self._build_where_clause(query_params)            query = ""str$id"" + self.table_name + ""str$id"" + where_clause            answer = self.sql.perform(query, query_items)            query = ""str$id"" % (self.table_name)            answer = self.sql.perform(query)",sql_injection,70
"	c.execute(""str$id""+date+""str$id""+str(user)+""str$id""+command+""str$id"")",sql_injection,1
    def execute(self):,remote_code_execution,2
"    editedgrudget = session.query(        grudget).filter_by(id=grudget_id).one()    if editgrudget.user_id != login_session[""str$id""]:        return ""str$id""",open_redirect,10
"    result = cur.execute(""str$id"" % cid)",sql_injection,5
"                       ""str$id"" % row[num%id])",sql_injection,3
    },path_disclosure,1
"    pages += [(r""str$id"", debugloginhandler),",xsrf,4
"                      node_ip_address,",open_redirect,1
"        out = self._cli_run(""str$id"", none)",command_injection,4
"        conn = db().execute((sql % data), false)",sql_injection,6
"from cms import config, servicecoord, get_service_addressfrom cmstestsuite.web.cwsrequests import homepagerequest, loginrequest, \",xsrf,11
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(",xsrf,3
"		cursor.execute(""str$id"" + username + ""str$id"" + password + ""str$id"")",sql_injection,9
"        start = (round(ball_pos[num%id] * pathplanner.obstacle_map_size), round(ball_pos[num%id] * pathplanner.obstacle_map_size))        end = path[self.path_last_index]        x = num%id        y = self.path_last_index        center = num%id        index = num%id        while x <= y:            center = (x + y) // num%id            if not pathplanner.raycast(self, start, path[center]):                index = center                x = center + num%id            else: y = center - num%id        end = (end[num%id] / pathplanner.obstacle_map_size, end[num%id] / pathplanner.obstacle_map_size)        dist = num%id.num%id * mm.clamp(num%id * mm.magnitude(ball_pos[num%id] - end[num%id], ball_pos[num%id] - end[num%id]), num%id.num%id, num%id)        vec2go = mm.normalized(path[index][num%id] - start[num%id], path[index][num%id]- start[num%id])    #wektor docelowego ruchu kulki        mag = mm.magnitude(num%id.num%id - ball_pos[num%id], num%id.num%id - ball_pos[num%id])    #odleglosc kulki od srodka plyty        vec2center = ((num%id.num%id - ball_pos[num%id]) / mag, (num%id.num%id - ball_pos[num%id]) / mag)    #wektor z pozycji kulki do srodka plyty        edgereluctance = num%id.num%id / (num%id.num%id - min(mag, num%id.num%id))        print(edgereluctance)        self.path_x.value = vec2go[num%id] * dist + ball_pos[num%id] + vec2center[num%id] * edgereluctance        self.path_y.value = vec2go[num%id] * dist + ball_pos[num%id] + vec2center[num%id] * edgereluctance        pathplanner.paintray(self, start, path[index], frame)",path_disclosure,153
			return,command_injection,1
"					""str$id"" % (ahash, datetime.now(), is_relevant, reason, label, ip, browser)		self.cur.execute(sql)",sql_injection,10
"                                     ""str$id"", p1_code)    cursor.execute(""str$id"", p2)",sql_injection,4
"            ssh_cmd = (""str$id""                       ""str$id"" %                       {""str$id"": host_name,                        ""str$id"": result_lun,                        ""str$id"": volume_name})",command_injection,11
"            adb_shell_cmd: a string that is an adb shell cmd with grep.            return self._adb.shell(adb_shell_cmd).decode(""str$id"")",command_injection,13
from pyshacl.shape import find_shapeslogging.basicconfig(),path_disclosure,4
"from .models import emailauthenticatetoken, position",open_redirect,5
        cursor.execute(query),sql_injection,1
"        ssh_cmd = (""str$id""                   % {""str$id"": extend_amt, ""str$id"": volume[""str$id""]})",command_injection,8
"        ssh_cmd = ""str$id""",command_injection,3
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"    re_path(r""str$id"", link_redirect, name=""str$id""),",open_redirect,3
from realpal.apps.chat.api import messagecreateapiview,open_redirect,4
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"@require_getdef form(request):    ""str$id""""str$id""""str$id""    internal_parameters = [""str$id"", ""str$id""]    parameters = strip_parameters(request.get, internal_parameters)    q_app_form = request.get.get(""str$id"")    q_format = request.get.get(""str$id"")    if not q_format:        q_format = ""str$id""    if not q_app_form:        return httpresponse(""str$id"")    q_app, q_form = q_app_form.split(""str$id"")[num%id], q_app_form.split(""str$id"")[num%id]    exec(""str$id"" % (q_app, q_form))    __import__(""str$id"" % q_app)    q_app_module = sys.modules[""str$id"" % q_app]    form_class = getattr(q_app_module, q_form)    form_params = form_class(initial=parameters)    html = getattr(form_params, ""str$id"" + q_format)    return httpresponse(html())",remote_code_execution,60
"    def shortpath(self, start_coord, end_coords):",path_disclosure,4
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,11
"            data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
"  query = request.args.get(""str$id"").lower()  politician = none  for p in politicians:    politician = p  if politician != none:    politician.search_count = politician.search_count + num%id    politician.put()    return render_template(""str$id"", q = query, politician = politician)",open_redirect,31
"                 f""str$id""                 f""str$id""                 f""str$id""                 f""str$id"")            db.add(query)",sql_injection,5
"                    if request.method != ""str$id"":            if request.method == ""str$id"" and has_token():",xsrf,10
"    def get_root_path(self):        get root path to pass to the lsp servers, i.e. project path or cwd.            path = getcwd_or_home()",path_disclosure,19
        return self.redirect(gae_users.create_login_url(self.request.url)),xss,2
"      links = re.findall(""str$id"",contents) # link regex      return links",path_disclosure,8
"    self.fail(""str$id"" % url)",xsrf,3
"    benchmark_exec_parser.add_argument(""str$id"", type=str, default=""str$id"", metavar=""str$id"",",remote_code_execution,4
"                and user_id = {num%id};""str$id"""".format(user.id)        total_mapping_time = db.engine.execute(sql)",sql_injection,7
"    def protected(self):        return self.exists and not os.access(self.file, os.w_ok)        if not self.exists and lstat(self.file):",remote_code_execution,13
    except redis.connectionerror:        pass,open_redirect,3
    name = bleach.clean(name),sql_injection,3
"        self._cli_run(""str$id"" % hostname, none)        out = self._cli_run(""str$id"" % (volume, hostname), none)",command_injection,11
"        help=""str$id"")",xsrf,1
"    self.assertraisesregexp(        webtest.app.apperror,        re.compile(""str$id"", re.multiline | re.dotall),        self.test_app.get,            ""str$id"": ""str$id""})",xsrf,9
"            insert into isalso(name,also) values(""str$id"",""str$id"")            ""str$id""'.format(name, also))",sql_injection,6
"    self.mock(bot_main, ""str$id"", lambda: self.server)    self.mock(os_utilities, ""str$id"", lambda : {""str$id"": ""str$id""})          (            ""str$id"",            {              ""str$id"": expected_attribs,              ""str$id"": {""str$id"": ""str$id""},            },            {""str$id"": ""str$id""},          ),",xsrf,22
        response = self.client.post(url),xsrf,3
"                (""str$id"", models.foreignkey(to=""str$id"")),                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,8
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,11
"        cursor.execute(""str$id"" + emailaccount + ""str$id"")",sql_injection,5
"    sql = ""str$id""+limit+""str$id""    db.cur.execute(sql)    bounding = db.cur.fetchone()",sql_injection,7
"from snakemake.io import protected, temp, temporary, expand, dynamic, glob_wildcards, flag, not_iterable, touch",remote_code_execution,12
"    df = model.sql.frame_query(query, db)",sql_injection,4
"    redirect = serial_redirection.serialredirection(node.tty, node.baudrate)        redirect.start()        redirect.stop()",open_redirect,6
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,19
"			f = executor.submit(up.submittestcase,suffix,mime,payload,codeexecregex)",remote_code_execution,3
"        self.url = ""str$id"" % (self.base_url, user_test_id)",xsrf,6
"                        order_bys.append(""str$id"".format(col, self.order_by_direction.upper()))                    sql += ""str$id"".format(self.order_by_columns, self.order_by_direction.upper())        return sql",sql_injection,8
"fromdef test_user_not_logged_in(client,create_user):def test_election_not_open(client,create_user):    assert ""str$id"" in request.content.decode(""str$id"")",open_redirect,7
"        self.name = ""str$id""",sql_injection,3
"	db.execute(""str$id"" % (played, id))	db.execute(""str$id"" % id)	db.execute(""str$id"" % id)",sql_injection,10
"	def _raise_exception():		frappe.throw(_(""str$id""), frappe.dataerror)			_raise_exception()			_raise_exception()			_raise_exception()			_raise_exception()",sql_injection,8
"  if not user_id:    return ""str$id""  # don't give tokens out to anonymous visitors.",xsrf,13
"    update `tabitem` it    set it.on_sale_from_date = ""str$id""    where it.on_sale_from_date is null    and it.ebay_id regexp ""str$id"";    ""str$id""""%date_today.isoformat()        frappe.db.sql(sql, auto_commit=true)",sql_injection,18
            group_exam_ind=num%id,open_redirect,1
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
    db.engine.execute(,sql_injection,1
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url + ""str$id"")        response = self.client.get(url)",xsrf,16
"    table = ""str$id""                                                                           c.execute(""str$id""""str$id""""str$id"" % (table,))                            ",sql_injection,6
"from snakemake.exceptions import missingoutputexception, workflowerror, wildcarderror",remote_code_execution,6
"        record_log_files_in_redis(            redis_address,            node_ip_address, [redis_stdout_file, redis_stderr_file],            password=password)",open_redirect,6
from datetime import datetimefrom .data_group import datagroupform,open_redirect,7
"        self.cookies.save()        os.chmod(self.cookies.filename, num%id)",xsrf,3
"""str$id""""str$id""""str$id""from flask import blueprint, abort, current_app, url_for, request    make_handler, disconnect_handler, oauth_logout_handler",xsrf,11
        return json_data,xsrf,2
"    if len(db.execute(""str$id"", (pollid, ))) == num%id:    db.execute(""str$id"", (pollid, ))    db.execute(""str$id"", (pollid, ))    db.execute(""str$id"", (pollid, ))",sql_injection,15
"        gv_file = open(""str$id"", ""str$id"")",path_disclosure,4
"        cur.execute(""str$id""""str$id""""str$id"", (category_name,))",sql_injection,2
"            ssh_cmd = ""str$id"" % node[""str$id""]",command_injection,5
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"            elif segments[num%id] == ""str$id"":                d = vdrive.get_private_root()                name = ""str$id""",xsrf,10
"          stop = ep1.takejumppath(result[num%id], self.symbols)          if stop:            return [self]          else:            print(""str$id"")            return [self, ep1]",path_disclosure,13
"    austin = constants.austin_urls    smashbrews = constants.smashbrews_ruls    colorado = constants.colorado_singles_urls    colorado_doubles = constants.colorado_doubles_urls    sms = constants.sms_urls    base_urls = [sms, smashbrews, austin, colorado_doubles, colorado]    return base_urls",sql_injection,24
"                print response.status, response.reason, response_data                print ""str$id"", e",sql_injection,7
"        print (""str$id"".format(path))",path_disclosure,2
"            self.cmd += ""str$id"" % self.get_option(""str$id"")",command_injection,5
"      package_data={ ""str$id"": [""str$id"", ""str$id""] },",xsrf,5
"        self.url = ""str$id"" % (self.base_url, submission_id)",xsrf,6
"        filetype = file_output.split(""str$id"")[num%id]                  ""str$id"")    ""str$id""""returns the fulltext of the local file.",remote_code_execution,11
"			f = executor.submit(up.submittestcase,suffix,mime,payload,codeexecregex)",remote_code_execution,3
"    dsstox = models.foreignkey(dsstoxlookup, related_name = ""str$id"", on_delete=models.protect,",open_redirect,7
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"    ""str$id"",",sql_injection,1
            if rc >= num%id:,remote_code_execution,4
"    start_date_param = query_dict.get(""str$id"") or query_dict.get(""str$id"")    end_date_param = query_dict.get(""str$id"") or query_dict.get(""str$id"")",sql_injection,10
"        node_ip_address: the ip address of the node that the log monitor            process is running on. this will be used to determine which log            files to track.        log_files: a dictionary mapping the name of a log file to a list of            strings representing its contents.        log_file_handles: a dictionary mapping the name of a log file to a file            handle for that file.    def __init__(self,                 redis_ip_address,                 redis_port,                 node_ip_address,                 redis_password=none):        self.node_ip_address = node_ip_address        self.redis_client = redis.strictredis(            host=redis_ip_address, port=redis_port, password=redis_password)        self.log_files = {}        self.log_file_handles = {}        self.files_to_ignore = set()        ""str$id""""str$id""""str$id""        num_current_log_files = len(self.log_files)        new_log_filenames = self.redis_client.lrange(            ""str$id"".format(self.node_ip_address),            num_current_log_files, -num%id)        for log_filename in new_log_filenames:            logger.info(""str$id"".format(log_filename))            assert log_filename not in self.log_files            self.log_files[log_filename] = []    def check_log_files_and_push_updates(self):        ""str$id""""str$id""""str$id""        for log_filename in self.log_files:            if log_filename in self.log_file_handles:                new_lines = []                while true:                    current_position = (                        self.log_file_handles[log_filename].tell())                    next_line = self.log_file_handles[log_filename].readline()                    if next_line != ""str$id"":                        new_lines.append(next_line)                    else:                        self.log_file_handles[log_filename].seek(                            current_position)                        break                if len(new_lines) > num%id:                    self.log_files[log_filename] += new_lines                    redis_key = ""str$id"".format(                        self.node_ip_address, ray.utils.decode(log_filename))                    self.redis_client.rpush(redis_key, *new_lines)            elif log_filename in self.files_to_ignore:                pass            else:                    self.log_file_handles[log_filename] = open(                        log_filename, ""str$id"")                except ioerror as e:                    if e.errno == os.errno.emfile:                        logger.warning(                            ""str$id""                            ""str$id"".format(log_filename))                    elif e.errno == os.errno.enoent:                                       ""str$id"".format(log_filename))                    self.files_to_ignore.add(log_filename)",open_redirect,182
"            ""str$id"" % uuid)",xsrf,3
"	def check_sort_by_table(self, order_by):		if ""str$id"" in order_by:			tbl = order_by.split(""str$id"")[num%id]			if tbl not in self.tables:				if tbl.startswith(""str$id""):					tbl = tbl[num%id:-num%id]				frappe.throw(_(""str$id"").format(tbl))",sql_injection,21
"                cmd.extend([""str$id"", ""str$id"",",command_injection,2
"            self.error_window, text=error_message, width=num%id)",xsrf,3
"    out_hostname, _ = run_shell_command([""str$id"", ""str$id""])    out_0, _ = run_shell_command([""str$id"", ""str$id""])",command_injection,10
"    ""str$id""""str$id""""str$id""",xsrf,1
"    self.mock_current_user(user_email=""str$id"")    response = self.test_app.get(""str$id"", params={        ""str$id"": ""str$id""})        ""str$id"": previous_analysis.key.urlsafe(),        ""str$id"": status_to_description.get(previous_analysis.status),",xsrf,11
	return event,sql_injection,2
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
            resp = self.assertraises(,xsrf,3
"query = ""str$id""+str(volume)+""str$id""+str(mcap)+""str$id"" + str(current_supply) + ""str$id"" + str(holders) + ""str$id""cur.execute(query)",sql_injection,11
"        command = (            ""str$id""            ""str$id""        ).format(            credentials=credentials,            path=path,        )            result = self._execute(command)",command_injection,12
"    if request.args.get(""str$id"", none):        return redirect(request.args.get(""str$id""))",xsrf,5
"            ordering_str = ""str$id"".join(ordering_list)            ordering_str = ""str$id""        term_str = ""str$id""                term = str(term)                    term_str += ""str$id"" + term + ""str$id""                    term_str += ""str$id"" + term + ""str$id""                        term_str += ""str$id""                     term_str += ""str$id"" + term + ""str$id""                    term_str += ""str$id"" + term + ""str$id""                    term_str += ""str$id"" + term + ""str$id""        if (len(term_str) > num%id):            term_str = ""str$id"" + term_str + ""str$id""        ""str$id""""str$id""""str$id""        if (mucua == ""str$id""):            origin_str = ""str$id"" + str(this_mucua.id)        else:            origin_str = ""str$id"" + str(mucua.id)        sql =""str$id"" % (origin_str, repository.id, term_str, ordering_str, limiting_str)        medias = media.objects.raw(sql)",sql_injection,88
        response = self.client.get(url),xsrf,3
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id"")        show_host_cmd = ""str$id""",command_injection,10
"    resp = await test_cli.get(""str$id"", headers=headers)    resp = await test_cli.get(""str$id"", headers=headers)",sql_injection,10
"    con = get_db(app, g)",sql_injection,4
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,13
"            if not os.path.isfile(self.path + ""str$id"" + filename):",path_disclosure,7
"    @mock.patch(""str$id"")        client = pab_client.partnerandroidbuildclient()        client.authenticate()    @mock.patch(""str$id"")        expected_url = (            ""str$id"")        client = pab_client.partnerandroidbuildclient()        client.getartifact(            ""str$id"", ""str$id"", ""str$id"",            ""str$id"", ""str$id"")            expected_url, params={""str$id"": ""str$id""}, headers={}, stream=true)        client.getartifact(""str$id"", ""str$id"",                           ""str$id"",                           ""str$id"",                           ""str$id"", ""str$id"")        mock_open.assert_called_with(""str$id"", ""str$id"")",xsrf,32
"    url(r""str$id"", taskassets.as_view()),",path_disclosure,2
"    c.execute(""str$id""""str$id""""str$id""%(method[""str$id""], method[""str$id""]))        c.execute(""str$id""""str$id""""str$id""%(method[""str$id""], method[""str$id""]))    c.execute(""str$id""""str$id""""str$id""%(field[""str$id""], field[""str$id""]))    c.execute(""str$id""""str$id""""str$id""%(field[""str$id""], field[""str$id""]))    ",sql_injection,8
"def banner():    print ""str$id""    print ""str$id""    banner()    if len(sys.argv) != num%id:        print ""str$id""    url = sys.argv[num%id]",xss,16
"            query = ""str$id"" % (                self._table,                column_name,            self.env.cr.execute(query)                query = ""str$id"" % (                    self._table,                    column_name,                    stage[num%id],                self.env.cr.execute(query, (default_value.id,))",sql_injection,18
from invenio.utils.url import make_user_agent_string,remote_code_execution,4
"      query[""str$id""][num%id][""str$id""] = request.get.get(""str$id"")      query[""str$id""] = request.get.get(""str$id"")",xss,6
"        query = (""str$id"" %                 (self.table, sid)        res = self._query(query)",sql_injection,9
class iquerymanager(protocol):,sql_injection,2
"	db.execute(""str$id"" % (judge)) ",sql_injection,3
"        insert_query = self.insert_template.format(            self.is_none(ambient_temperature),             self.is_none(ground_temperature),             self.is_none(air_quality),             self.is_none(air_pressure),             self.is_none(humidity),             self.is_none(wind_direction),             self.is_none(wind_speed),             self.is_none(wind_gust_speed),             self.is_none(rainfall),             created)        print insert_query        self.db.execute(insert_query)            print rows_count, ""str$id""",sql_injection,19
"from cms import config, servicecoord, get_service_addressfrom cmstestsuite.web.cwsrequests import homepagerequest, loginrequest, \",xsrf,11
"        table = conn.execute(f""str$id"")            table = conn.execute(f""str$id"")",sql_injection,6
            group_exam_ind=num%id,open_redirect,1
"    query = ""str$id"" % enzyme_nameif enzyme_name3:    query = ""str$id"" % enzyme_name3if process_name:    query = ""str$id"" % process_name    query = ""str$id"" % (process_name2, enzyme_name2)    query = ""str$id"" % (conc, compound)    query = ""str$id"" % intermediate    query = ""str$id"" % (organelle, sub)    query = ""str$id"" % (enzyme_name3, organelle2)    query = ""str$id"" % (process_name3, conc2, compound2)",sql_injection,53
"				 ""str$id"".join(self.or_conditions)",sql_injection,1
"    maxindex = db.execute(""str$id"", pollid)[num%id][num%id]    db.execute(""str$id"", (pollid, index, answer))    answerid = db.execute(""str$id"", (pollid, index))[num%id][num%id]    db.execute(""str$id"", (sender, pollid))    db.execute(""str$id"", (answerid, sender))",sql_injection,19
"    inserted = (list_id, cook_id, food_name, price, loc, image)    sql = ""str$id"".format(listing_table_name, str(inserted).encode(""str$id"", ""str$id""))    cur.execute(sql)",sql_injection,14
"  module = __import__(name.replace(""str$id"",""str$id""))  class_ = getattr(module, name.replace(""str$id"",""str$id""))  instance = class_()  return callmethod(instance, ""str$id"")  + linebreak + ""str$id"" + linebreak  module = __import__(name.replace(""str$id"",""str$id""))  class_ = getattr(module, name.replace(""str$id"",""str$id""))  instance = class_()  return callmethod(instance, ""str$id"")  + linebreak + ""str$id"" + linebreak",path_disclosure,38
"                                                 ""str$id"": ""str$id"",",open_redirect,2
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"        self.env_var_override.set(""str$id"", ""str$id"")            self.assertequal(suite.cmd, self._expected_command(name=name, verify_xss=true))",xss,5
"      self.svcr.assertwhitelistedorxsrf(mc, self.request)    self.svcr.assertwhitelistedorxsrf(mc, self.request)",xsrf,4
"        self.url = ""str$id"" % (self.base_url, task[num%id])",xsrf,6
"    except:    ""str$id""' # currently, specific to postgres",sql_injection,7
"    if grudgettodelete.user_id != login_session[""str$id""]:",open_redirect,4
"		return (fu,filename)",remote_code_execution,2
"        traceback.print_exception(type(error), error, error.__traceback__)",command_injection,3
todo: sort by timestamp,sql_injection,4
    if (bot.db.get_nick_id(identifier(trigger.group(num%id))) == bot.db.get_nick_id(identifier(trigger.nick))):,sql_injection,4
        except keyerror:,path_disclosure,2
"    def log_files(self):        ""str$id""""str$id""""str$id""        relevant_files = self.redis_client.keys(""str$id"")        ip_filename_file = {}        for filename in relevant_files:            filename = decode(filename)            filename_components = filename.split(""str$id"")            ip_addr = filename_components[num%id]            file = self.redis_client.lrange(filename, num%id, -num%id)            file_str = []            for x in file:                y = decode(x)                file_str.append(y)            if ip_addr not in ip_filename_file:                ip_filename_file[ip_addr] = {}            ip_filename_file[ip_addr][filename] = file_str        return ip_filename_file",open_redirect,51
"    ctx = ds.pathtraversalcontext( {}, {}, self._root, {}, none, none, none )",path_disclosure,11
from sqlalchemy import desc,sql_injection,4
from invenio.utils.url import make_user_agent_string,remote_code_execution,4
"        show_vlun_cmd = ""str$id""",command_injection,3
"    self.mock_current_user(user_email=""str$id"", is_admin=true)        re.compile(""str$id""                   ""str$id"" % (        self.test_app.get, ""str$id"", params={""str$id"": build_url, ""str$id"": ""str$id""})  def testadmincanrequestanalysisoffailureonunsupportedmaster(self, mock_fn):    master_name = ""str$id""",xsrf,18
"def _send_mail(user_ids, action_type, datarequest):",open_redirect,4
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"from snakemake.io import iofile, wildcards, resources, _iofile",remote_code_execution,7
"		regex = re.compile(""str$id"")",sql_injection,3
"    self.app.get(util.ingest_version_task(""str$id"", ""str$id"", ""str$id""), params={""str$id"": ""str$id""})",xsrf,5
"                       ""str$id"", player[num%id])                       ""str$id"", player[num%id])",sql_injection,4
"        response = self.client.post(url)        response = self.client.get(url, content_type=""str$id"")",xsrf,7
"                    ""str$id"") % ssh_cmd)",command_injection,3
"                        db.log_event_exception(                            ""str$id"")                    self.serial.port+""str$id""+str(self.result_data[""str$id""])+""str$id""",command_injection,3
"		if re.search(""str$id"", token_data[""str$id""]):			raise foxlockerror(bad_request, ""str$id"")",path_disclosure,6
"        self.url = ""str$id"" % (self.base_url, user_test_id)",xsrf,6
"            sys.stdout = log_stdout_file            sys.stderr = log_stderr_file            try_update_handler(sys.stderr)            services.record_log_files_in_redis(                info[""str$id""],                info[""str$id""], [log_stdout_file, log_stderr_file],                password=redis_password)",open_redirect,13
"      ""str$id"": json.dumps(workflows)",xss,2
"        self.conn.execute(r""str$id""""str$id""""str$id"" %",sql_injection,2
"                        if power>num%id:                            print(""str$id"" % (power, i))                            with suppress_stdout():                                send(ip(src=target, dst=""str$id"" % i) / udp(dport=num%id)/raw(load=data), count=power)                        elif power==num%id:                            print(""str$id"" % i)                                send(ip(src=target, dst=""str$id"" % i) / udp(dport=num%id)/raw(load=data), count=power)                        if power>num%id:                            print(""str$id"" % (power, result[""str$id""]))                            with suppress_stdout():                                send(ip(src=target, dst=""str$id"" % result[""str$id""]) / udp(dport=num%id)/raw(load=data), count=power)                        elif power==num%id:                            print(""str$id"" % result[""str$id""])                                send(ip(src=target, dst=""str$id"" % result[""str$id""]) / udp(dport=num%id)/raw(load=data), count=power)",command_injection,54
"    def evaluate(self, target_graph, value_nodes):",path_disclosure,4
from .. import serial_redirection,open_redirect,4
"                           settingsfilename, htmlsettingsform))",xsrf,2
    winner = bleach.clean(str(winner))    loser = bleach.clean(str(loser)),sql_injection,6
expected_paths_small_different_currency = [,path_disclosure,3
"      name_matches_pred = jc.pathcontainspredicate(""str$id"", name)      is_stopping_pred = jc.patheqpredicate(""str$id"", ""str$id"")      clause.add_mapped_constraint(jc.if(name_matches_pred, is_stopping_pred))",path_disclosure,10
"        generator = self._port_conf_generator(""str$id"")",command_injection,3
"        key_field = ""str$id""",path_disclosure,3
"    cmd = ""str$id""""select * from messages              order by timeposted desc ",sql_injection,10
            self._headers = tornado.httputil.httpheaders(),xsrf,3
"                except:                            db.log_event_exception(                                ""str$id"")                        self.serial.port+""str$id""+str(self.result_data[""str$id""])+""str$id""",command_injection,4
"        ssh_cmd = ""str$id""",command_injection,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,11
            obj = self.context.current_obj            if icontainer.providedby(obj):                return [name for name in obj.listnames() if name.startswith(token)],path_disclosure,13
        return self.ext_conf,remote_code_execution,2
"    def __init__(self, socket_manager):",xsrf,3
        return flag in value.flags,remote_code_execution,4
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"        sql = ""str$id"".format(tag, tag, date, previous_date);         data = db.exec(sql)",sql_injection,9
"user_table = ""str$id""rank_permit_table = ""str$id""def fetch(query):    conn = psycopg2.connect(""str$id"")    cur.execute(query)def update(query):    conn = psycopg2.connect(""str$id"")    cur.execute(query)def check(id, attribute, clss):    try:        attribute_value = fetch(""str$id"".format(attribute, clss, id))    except:        return none    else:        return attribute_valuedef rank_check(id, function):    query = check(id, ""str$id"", user_table)    rank = query[num%id][num%id]    query2 = fetch(""str$id"".format(rank, rank_permit_table, function))    if query2[num%id][num%id] == true:def isint(ss):",sql_injection,50
"    license_dirs = [ ""str$id"", ""str$id"", ""str$id"" ]",path_disclosure,7
"            corner = np.round(result * num%id.num%id).astype(""str$id"")            if flipx and flipy: corners[i] = (num%id - corner[num%id] + detectionarea[num%id], num%id - corner[num%id] + detectionarea[num%id])            elif flipx: corners[i] = (num%id - corner[num%id] + detectionarea[num%id], corner[num%id] + detectionarea[num%id])            elif flipy: corners[i] = (corner[num%id] + detectionarea[num%id], num%id - corner[num%id] + detectionarea[num%id])            else: corners[i] = (corner[num%id] + detectionarea[num%id], corner[num%id] + detectionarea[num%id])",path_disclosure,54
"    response = self.app.get(util.ingest_library_task(""str$id"", ""str$id"", ""str$id""))",xsrf,5
"        p = self.objects.puc        puc_line = (p.gen_cat + ""str$id"" + p.prod_fam + ""str$id"" + p.prod_type + ""str$id"" + p.description +                    ""str$id"" + str(p.get_level()) + ""str$id"" + str(p.product_count))        self.assertequal(csv_lines[num%id], (""str$id""                                        ""str$id""))        self.assertequal(csv_lines[num%id], puc_line)",open_redirect,31
"        out = self._cli_run(""str$id"", none)",command_injection,4
"      self.assertequal(""str$id"", swarming_server.url)",xsrf,2
"    nextlocation = request.post.get(""str$id"", none)    if nextlocation is none or nextlocation == ""str$id"":        if request.user.role == ""str$id"":            topredir = request.localconfig.parameters.get_value(                ""str$id"")            if topredir != ""str$id"":                infos = exts_pool.get_extension_infos(topredir)                nextlocation = infos[""str$id""]            else:                nextlocation = reverse(""str$id"")            nextlocation = reverse(""str$id"")",open_redirect,37
        full_p_count = product.objects.filter( q(title__icontains=q) | q(brand_name__icontains=q) ).count(),open_redirect,7
"    if votefinished: db.execute(""str$id"".format(chan,action,target))",sql_injection,3
        query = self.database.generate_insert(self)            result = yield self.database.runquery(query)            yield self.database.runoperation(query),sql_injection,9
"        ssh_cmd = (""str$id""                   % {""str$id"": extend_amt, ""str$id"": volume[""str$id""]})",command_injection,8
"            ssh_cmd = ""str$id"" % wwpn",command_injection,5
"        ssh_cmd = ""str$id"" % host_name",command_injection,5
"  allowed_paths = (      ""str$id"",      ""str$id"",      ""str$id"",  )  def _path_allowed(self, path):    for p in self.allowed_paths:      if path.startswith(p):        return true    return false",xsrf,20
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,11
"from dal import autocompletefrom django.shortcuts import (render, redirect, get_object_or_404,                                                httpresponseredirect)from django.utils.translation import ugettext_lazy as _",open_redirect,15
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
    def _get_ancestors(self):        results = {}        for g in self.parent_groups:            results[g.name] = g            results.update(g._get_ancestors())        return results    def get_ancestors(self):        return self._get_ancestors().values(),path_disclosure,19
"            self._cli_run(""str$id"" % (volume_name, growth_size),                          none)",command_injection,5
"        self._cli_run(""str$id"" % hostname, none)        out = self._cli_run(""str$id"" % (volume, hostname), none)",command_injection,11
"        print(""str$id"")",sql_injection,1
"    if ""str$id"" in target:    path = os.path.join(paths.sqlmap_output_path, target)    if os.path.exists(path):",path_disclosure,10
"def convert_to_zarr(input_vcf_path, output_zarr_path, conversion_config):",remote_code_execution,4
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"		blacklisted_keywords = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""]			frappe.throw(_(""str$id""), frappe.dataerror)",sql_injection,11
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"      self, remote, attributes, server, server_version, base_dir,      shutdown_hook):    self._remote = remote",xsrf,10
"    @mock.patch(""str$id"")        client = pab_client.partnerandroidbuildclient()        client.authenticate()",xsrf,5
"    def _execute(self, command):        byteoutput = subprocess.check_output(command, shell=true)    def _execute_interactive(self, command, job_id):    def __execute_interactive(self, command, job_id):            shell=true,",command_injection,16
"from .dsstox_lookup import dsstoxlookupfrom .extracted_text import extractedtextfrom django.dispatch import receiver    extracted_text = models.foreignkey(extractedtext, related_name = ""str$id"", ",open_redirect,16
"            self.__log_traverse_one(path, attribute, source, target)        self.__traversed.add((source, target))",path_disclosure,6
"        fc_ls_map_cmd = ""str$id"" % \            fc_map_id",command_injection,6
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"                    sql += ""str$id"" % (float(x),float(y),user,density,activity,p)                    outcur.execute(sql)",sql_injection,6
"		web = webdriver.chrome()		print ""str$id""		return web",command_injection,7
"    self.fail(""str$id"" % url)",xsrf,3
"        return iofile(apply_wildcards(f, wildcards,                      rule=self.rule)",remote_code_execution,4
if c.no_shell:    while true:        time.sleep(num%id)else:    try:        import ipython    except importerror:,remote_code_execution,10
"        ""str$id"":   customer_commands.process_lookup",sql_injection,2
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"        query += ""str$id"" + table + ""str$id"" + name + ""str$id""            query += ""str$id"" + subtable + ""str$id"" + str(form[subname].data) #dangerous, but in our uses it isn't user input        res = db.engine.execute(stmt, x=field.data)",sql_injection,33
from datetime import timedelta,remote_code_execution,4
"    def protected(self):        return self.exists and not os.access(self.file, os.w_ok)        if not self.exists and lstat(self.file):",remote_code_execution,13
    utils.removeifexists( self._temp_options_filename ),remote_code_execution,3
"        ""str$id"": project    handle, path = tempfile.mkstemp(dir=private_data_dir)    f = os.fdopen(handle, ""str$id"")    json.dump(json_cred, f)    f.close()",command_injection,13
"                assert session[""str$id""] == (""str$id"", ""str$id"")",xsrf,5
"import datetimeimport loggingimport sysimport timeimport unittestimport test_env_bot_codetest_env_bot_code.setup_test_env()import net_utilsimport xsrf_clientclass urlhelpertest(net_utils.testcase):  def setup(self):    super(urlhelpertest, self).setup()    self.mock(logging, ""str$id"", lambda *_: none)    self.mock(logging, ""str$id"", lambda *_: none)    self.mock(logging, ""str$id"", lambda *_: none)    self.mock(logging, ""str$id"", lambda *_: none)    self.mock(time, ""str$id"", lambda _: none)  def testxsrfremoteget(self):    self.expected_requests([(""str$id"", {}, ""str$id"", none)])    remote = xsrf_client.xsrfremote(""str$id"")    self.assertequal(""str$id"", remote.url_read(""str$id""))  def testxsrfremotesimple(self):    self.expected_requests(        [          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {              ""str$id"": num%id,              ""str$id"": ""str$id"",            },          ),          (            ""str$id"",            {""str$id"": {""str$id"": ""str$id""}, ""str$id"": {""str$id"": ""str$id""}},            ""str$id"",            none,          ),        ])    remote = xsrf_client.xsrfremote(""str$id"")    self.assertequal(""str$id"", remote.url_read(""str$id"", data={""str$id"": ""str$id""}))  def testxsrfremoterefresh(self):    self.expected_requests(        [          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {              ""str$id"": num%id,              ""str$id"": ""str$id"",            },          ),          (            ""str$id"",            {""str$id"": {""str$id"": ""str$id""}, ""str$id"": {""str$id"": ""str$id""}},            ""str$id"",            none,          ),          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {              ""str$id"": num%id,              ""str$id"": ""str$id"",            },          ),          (            ""str$id"",            {""str$id"": {""str$id"": ""str$id""}, ""str$id"": {""str$id"": ""str$id""}},            ""str$id"",            none,          ),        ])    now = xsrf_client._utcnow()    remote = xsrf_client.xsrfremote(""str$id"")    remote.url_read(""str$id"", data={""str$id"": ""str$id""})    self.mock(        xsrf_client, ""str$id"", lambda: now + datetime.timedelta(seconds=num%id))    remote.url_read(""str$id"", data={""str$id"": ""str$id""})  def testxsrfremotecustom(self):    self.expected_requests(        [          (            ""str$id"",            {              ""str$id"": {""str$id"": ""str$id""},              ""str$id"": {""str$id"": ""str$id""},            },            {              ""str$id"": num%id,              ""str$id"": true,              ""str$id"": ""str$id"",            },          ),          (            ""str$id"",            {""str$id"": {""str$id"": ""str$id""}, ""str$id"": {""str$id"": ""str$id""}},            ""str$id"",            none,          ),        ])    remote = xsrf_client.xsrfremote(        ""str$id"",        ""str$id"")    remote.xsrf_request_params = {""str$id"": ""str$id""}    self.assertequal(""str$id"", remote.url_read(""str$id"", data={""str$id"": ""str$id""}))if __name__ == ""str$id"":  logging.basicconfig(level=logging.error)  unitt",xsrf,214
        return str(self.content_object),open_redirect,2
"        autoex = ""str$id"" if opts[""str$id""] else ""str$id""        easytier = ""str$id"" if opts[""str$id""] else ""str$id""            ssh_cmd_se_opt = ""str$id""            ssh_cmd_se_opt = (                ""str$id"" %                {""str$id"": opts[""str$id""],                 ""str$id"": autoex,                 ""str$id"": opts[""str$id""]})                ssh_cmd_se_opt = ssh_cmd_se_opt + ""str$id""                ssh_cmd_se_opt = ssh_cmd_se_opt + (                    ""str$id"" % opts[""str$id""])        ssh_cmd = (""str$id""                   ""str$id""                   ""str$id""                   % {""str$id"": name,                   ""str$id"": self.configuration.storwize_svc_volpool_name,                   ""str$id"": size, ""str$id"": units, ""str$id"": easytier,                   ""str$id"": ssh_cmd_se_opt})",command_injection,59
    def populate_ancestors(self):        for group in self.groups:            self.add_group(group)                self.add_group(oldg),path_disclosure,8
"                except:                    print ""str$id"" + url                if r.history:                      if r.url == ""str$id"":                        print ""str$id""+url                        if is_closed:                            file = open(output_file,""str$id"")                        is_closed = false                        file.write(url + ""str$id"")                else:                    print ""str$id""+url        else:            print ""str$id""",open_redirect,30
"    if analysis.status != analysis_status.pending:      data[""str$id""] = time_util.formatduration(          analysis.start_time,          analysis.end_time or time_util.getutcnow())",xsrf,11
"import timeimport psycopg2def getallposts():    conn = psycopg2.connect(""str$id"")    cur = conn.cursor()    cur.execute(""str$id"")    posts = ({""str$id"": str(row[num%id]), ""str$id"": str(row[num%id])}    for row in cur.fetchall())    conn.close()    return postsdef addpost(content):    conn = psycopg2.connect(""str$id"")    cur = conn.cursor()    cur.execute(""str$id"" % content)    conn.commit()    conn.close()",sql_injection,36
"from validator import validate, vuser, vrequired, vmeetup, veditmeetup, vfloat, valueorblank, validip, vmenu, vcreatemeetup",xsrf,13
"        name_exists = user.query.filter(user.username == username).all()        next = request.args.get(""str$id"")        return redirect(url_for(""str$id""))    flash(""str$id"")",open_redirect,11
                    db.log_result(true),command_injection,1
"            request.get._mutable = true            request.get[""str$id""] = none            request.get._mutable = false            account_key = request.get.get(""str$id"")            if emailauthenticatetoken.objects.filter(key=account_key).exists():                token = emailauthenticatetoken.objects.get(key=account_key)                user = token.user                user.email_confirmed = true                user.save()                token.delete()",open_redirect,25
"                        file_contents=staged_contents.decode(),",command_injection,1
"    return open_closed_tags(lxml.html.tostring(fragment, method=""str$id""))",xsrf,3
from pixelated.resources.root_resource import rootresource,xsrf,4
"        ssh_cmd = ""str$id""",command_injection,3
"                ssh_cmd = ssh_cmd.replace(""str$id"",                                          ""str$id"")",command_injection,4
            abort(num%id),sql_injection,1
    def _get_ancestors(self):        results = {}        for g in self.parent_groups:            results[g.name] = g            results.update(g._get_ancestors())        return results    def get_ancestors(self):        return self._get_ancestors().values(),path_disclosure,19
"""str$id""""str$id""""str$id""""str$id""""str$id""""str$id""	""str$id""""str$id""""str$id"" check_if_exists():	uses the pymongo driver(so everything is synchronous) to check if the username exists in database	then checks if the email address also exists in the database	depending on conditions, returns none or the error message to be displayed.	""str$id""""",open_redirect,42
"		cursor.execute(""str$id"" + str(message.author.id))",command_injection,3
"    query = ""str$id"".format(from_page_id)    self.cursor.execute(query)",sql_injection,4
"            options.update(entry.get(""str$id"", {}))",path_disclosure,2
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id""openstack\""str$id""                           ""str$id"")        show_3par_cmd = ""str$id""",command_injection,11
"            cols = cols + ""str$id""        namelist = []        namelist.append(tablename)            namelist.append(key)        namelist = namelist + vallist            cursor.execute(""str$id"" + cols + ""str$id"" + vals + ""str$id"", namelist)            print(""str$id"".format(e))            if e == missing_column:                print(""str$id"")                columnname = ""str$id""                params = []                    t = self.__gettype(tableobj[columnname]);                    params.append(tablename);                    params.append(columnkname);                    params.append(t);                    print(""str$id"".format(e))                    print(""str$id"".format(columnname))                    cursor.execute(""str$id"", params)                    print(""str$id"".format(e))                print(""str$id"")                    print(""str$id"")            elif e == missing_table:                try:                    self.createtable(tablename, tableobj)                    print(""str$id"")                except psycopg2.error as e:                    print(""str$id"".format(e))                    raise                try:                    self.insertdata(tablename, timestamp, tableobj)                    print(""str$id"")                except:                    print(""str$id"")                    raise",sql_injection,72
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
"      ""str$id"": json.dumps(workflows)",xss,2
    def execute(self):,remote_code_execution,2
"      if len(filter(lambda x:x.find(""str$id"")>num%id or x.startswith(""str$id""),path))==num%id:",path_disclosure,5
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id""openstack\""str$id""                           ""str$id"")        show_3par_cmd = ""str$id""",command_injection,11
"        cmd = ""str$id"" % \              (persona_id, domain, hostname, iscsi_iqn)        out = self.common._cli_run(cmd, none)        self.common._cli_run(""str$id""                             % (hostname, iscsi_iqn), none)",command_injection,18
"            if lesson.objects.filter(addedby=instructor.user).exists():            if invite.objects.filter(instructor=instructor).exists():                update_onboarding_step(onboarding.step_8, instructor.user_id)",open_redirect,6
"            user_email=""str$id"",            user_id=viewtestsbase._user_id,        return self._xsrf_tool.generate_token(viewtestsbase._user_id, action_id)",xsrf,5
"			elif re.compile(""str$id"").match(field):",sql_injection,2
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"    time.sleep(num%id.num%id)    thirdpage, thirdheaders = request.querypage(content=true)    condition  = firstpage == secondpage    condition &= secondpage == thirdpage",command_injection,15
"            f""str$id""""str$id""""str$id"")",sql_injection,1
"                  % {""str$id"": ssh_cmd,",command_injection,3
"            }, sort_keys=true))",xsrf,2
"			if regex.match(field):				if any(keyword in field.lower() for keyword in blacklisted_keywords):				if any(""str$id"".format(keyword) in field.lower() \					for keyword in blacklisted_functions):",sql_injection,19
"        sql = ""str$id"".format(url)        res = set(db.exec(sql))",sql_injection,6
"        ""str$id"",",xsrf,1
"    def protected(self):        return self.exists and not os.access(self.file, os.w_ok)        if not self.exists and lstat(self.file):",remote_code_execution,13
"        self.asserttrue(            self.client.login(username=username, password=password))        url = ""str$id""        response = self.client.post(url, content_type=""str$id"")        self.assertequal(response.status_code, num%id)        self.assertequal(response.status_code, num%id)",xsrf,14
import mysqldb,sql_injection,2
"    result = cur.execute(""str$id"" % cid)",sql_injection,5
import requestsimport bs4from multiprocessing import pool,xsrf,6
        return locality.objects.raw(locality_list_search_query.format(tokens=tokens)),sql_injection,2
"        fields = (""str$id"", ""str$id"", ""str$id"")",command_injection,5
"    sql = ""str$id"".format(tag)    wins = db.exec(sql)[num%id][num%id]    sql = ""str$id"".format(tag, tag, tag)    losses = db.exec(sql)[num%id][num%id]    sql = ""str$id"".format(tag)    res = db.exec(sql)    sql = ""str$id"".format(tag)    scene = db.exec(sql)[num%id][num%id].capitalize()",sql_injection,26
"        result = self.common._cli_run(""str$id"", none)",command_injection,4
"                assert session[""str$id""] == (""str$id"", ""str$id"")",xsrf,5
"    self.mock(bot_main, ""str$id"", lambda: self.server)    self.mock(os_utilities, ""str$id"", lambda : {""str$id"": ""str$id""})          (            ""str$id"",            {              ""str$id"": expected_attribs,              ""str$id"": {""str$id"": ""str$id""},            },            {""str$id"": ""str$id""},          ),",xsrf,22
"                                 ""str$id"",",command_injection,1
"            _root = os.path.commonprefix([www_root_abs, dst])            rel_dst = os.path.relpath(www_root_abs, dst)",path_disclosure,8
"        query = ""str$id""+proxy_id+""str$id""        cur.execute(query)",sql_injection,4
"            return parameter_data[""str$id""]",sql_injection,2
"    def _cmd_to_dict(self, cmd):        arg_list = cmd.split()",command_injection,6
"    @throttle(min_time_between_updates)        ""str$id""""str$id""""str$id""        import pyatmo        self.station_data = pyatmo.weatherstationdata(self.auth)        if self.station is not none:            self.data = self.station_data.lastdata(                station=self.station, exclude=num%id)        else:            self.data = self.station_data.lastdata(exclude=num%id)",remote_code_execution,21
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"        if inventory_update.source == ""str$id"":            env[""str$id""] = inventory_update.source_regions if inventory_update.source_regions != ""str$id"" else ""str$id""  # noqa            cp = configparser.configparser()            cp.add_section(""str$id"")            cp.set(""str$id"", ""str$id"", ""str$id"")            handle, path = tempfile.mkstemp(dir=private_data_dir)            cp.write(os.fdopen(handle, ""str$id""))            os.chmod(path, stat.s_irusr | stat.s_iwusr)            env[""str$id""] = path        elif inventory_update.source in [""str$id"", ""str$id""]:        elif inventory_update.source == ""str$id"":            env[""str$id""] = inventory_update.instance_filters            env[""str$id""] = get_licenser().validate()[""str$id""]",command_injection,50
"        ssh_cmd = ""str$id""",command_injection,3
"        cursor.execute(""str$id""""str$id""%s""str$id""""str$id"" % (game,x,y,letter))",sql_injection,3
        if self.token_authenticated:,xsrf,2
"				 ""str$id"".join(self.or_conditions)",sql_injection,1
            if path == os.path.abspath(os.path.sep):,path_disclosure,4
"	def create_frame(self, f):		new_frame = searchpage(self.container, self)		self.frames[searchpage] = new_frame		new_frame.grid(row=num%id, column=num%id, sticky=""str$id"")		self.show_frame(new_frame)			def remove_frame(self, frame):				print(""str$id"" + str(frame))		self.frames.pop(frame, none)",sql_injection,22
"		cursor.execute(""str$id"" + str(pp_average) + ""str$id"" + str(discordid))",command_injection,7
"from django import formsfrom django.db import connectionfrom django.db.models import count, q, value, integerfield, subquery, outerref, f, sumfrom django.forms.models import model_to_dict",open_redirect,20
"		command = ""str$id"" + table_name + ""str$id"" + str(column) + ""str$id"" + getsqlitetype(init_data)	def _run_command(self, command):",sql_injection,16
                raise exceptions.notfound(),path_disclosure,2
"                  % {""str$id"": ssh_cmd,",command_injection,3
"	base_path = ""str$id""",path_disclosure,3
        response = self.client.get(url),xsrf,3
"    def _run_ssh(self, command, check_exit_code=true, attempts=num%id):",command_injection,5
        response = self.client.get(url),xsrf,3
"                      node_ip_address,",open_redirect,1
"            self._cli_run(""str$id"" % (volume_name, growth_size),                          none)",command_injection,5
"            out, err = self._run_ssh(""str$id"" % fc_map_id)",command_injection,6
                self._session.cookies.clear()                self._session.cookies.save(),xsrf,2
"from os.path import (normcase, join)",path_disclosure,5
        response = self.client.get(url),xsrf,3
import jsonlog = logging.getlogger(__name__),xsrf,4
"  getcalendardetails = ""str$id"".format(username)",sql_injection,3
"            ssh_cmd = ""str$id"" % wwpn",command_injection,5
"                (""str$id"", models.foreignkey(to=""str$id"", related_name=""str$id"")),",sql_injection,3
"                                               ""str$id"": ""str$id"",",open_redirect,2
"            filename, mode = newfd            self.newfd = os.open(filename, mode)",open_redirect,8
"    query_string = ur""str$id""""str$id""""str$id"".format(query=query)    rows = db.engine.execute(sql.text(query_string)).fetchall()",sql_injection,6
"    def reply(self, text, notice=none, source=none, private=none, force_privmsg_in_private=false,        ""str$id""""str$id""""str$id""        with self.reply_lock:            if private is none:                private = conf.conf[""str$id""].get(""str$id"")            if private or (self.called_in in self.users):                if not force_privmsg_in_private:                    notice = true                target = self.called_by            else:                target = self.called_in            self.msg(target, text, notice=notice, source=source, loopback=loopback)",remote_code_execution,41
"import base64 ,time ,selenium ,os ,urllib ,sys ,threading ,configparserfrom selenium import webdriverfrom pil import image",command_injection,15
"    unvisited = list(        itertools.zip_longest(test_graph.keys(), [], fillvalue=none)    )    while unvisited:        node, parent = unvisited.pop()        while path and path[-num%id] != parent:            path.pop()        adjacent = reversed(test_graph[node])        path.append(node)        for n in adjacent:            if n in path:                cycle_str = ""str$id"".join(path + [n])                raise dependencyerror(                    ""str$id"" + cycle_str)            if n not in visited:                unvisited.append((n, node))        visited.add(node)",path_disclosure,50
"            orders[re_match[num%id]] = (request.args.get(arg), request.args.get(""str$id"" + re_match[num%id]))",sql_injection,6
"    return f""str$id""""str$id""""str$id""",sql_injection,2
"    cur.execute(f""str$id""""",sql_injection,1
"				 ""str$id"".join(self.or_conditions)",sql_injection,1
        if user.is_authenticated():,sql_injection,2
"            ""str$id"": data,",path_disclosure,2
"    keyword = forms.charfield(label=""str$id"", max_length=num%id, required=true)",open_redirect,5
"from apps.home.views import home_page, projects, project, project_clone",open_redirect,7
"		blacklisted_keywords = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"",			""str$id"", ""str$id"", ""str$id"", ""str$id""]",sql_injection,13
        response = self.client.post(url)        response = self.client.get(url),xsrf,6
"            orders[re_match[num%id]] = (request.args.get(arg), request.args.get(""str$id"" + re_match[num%id]))",sql_injection,6
"    date = request.args.get(""str$id"", ""str$id"")    active = request.args.get(""str$id"", num%id)    buildbot = request.args.get(""str$id"", num%id)    branch = request.args.get(""str$id"", ""str$id"")    taskcluster = request.args.get(""str$id"", num%id)    priority = request.args.get(""str$id"", ""str$id"")",sql_injection,24
        self._session.cookies.clear()        self._session.cookies.save(),xsrf,2
    goal_name = input().strip(),path_disclosure,3
"        if ""str$id"" or ""str$id""in xss_request[""str$id""]:",xss,5
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,12
"""str$id""""str$id""""str$id""import django.urlsimport urlsimport viewsimport view_tests_baseclass accessrestrictiontests(view_tests_base.viewtestsbase):    ""str$id""""str$id""""str$id""    is_restricted_to_admins = {        ""str$id"": true,        ""str$id"": true,        ""str$id"": true,        ""str$id"": true,        ""str$id"": true,        ""str$id"": false,    }    def get_path(self, path_name):        try:            return django.urls.reverse(path_name)        except django.urls.noreversematch:            return django.urls.reverse(path_name, kwargs={""str$id"": ""str$id""})    def test_blocked_to_non_admins(self):        ""str$id""""str$id""""str$id""        self.login(is_admin=false)        for (path_name, _            ) in filter(lambda item: item[num%id],                        accessrestrictiontests.is_restricted_to_admins.items()):            path = self.get_path(path_name)            assert self.client.get(path, secure=true).status_code == num%id            assert self.client.post(path, secure=true).status_code == num%id    def test_available_to_admins(self):        ""str$id""""str$id""""str$id""        self.login(is_admin=true)        for (path_name, _            ) in filter(lambda item: item[num%id],                        accessrestrictiontests.is_restricted_to_admins.items()):            path = self.get_path(path_name)            assert self.client.get(path, secure=true).status_code == num%id    def test_other_pages_unrestricted(self):        ""str$id""""str$id""""str$id""        self.login(is_admin=false)        for (path_name, _            ) in filter(lambda item: not item[num%id],                        accessrestrictiontests.is_restricted_to_admins.items()):            path = self.get_path(path_name)            assert self.client.get(path, secure=true).status_code != num%id    def test_all_paths_included(self):        ""str$id""""str$id""""str$id""        for pattern in urls.urlpatterns:            if pattern.name.startswith(""str$id""):                continue            if pattern.name.startswith(""str$id""):                continue            assert (                pattern.name in accessrestrictiontests.is_restricted_to_admin",xsrf,122
    this_meta = nodemetadata(filename),path_disclosure,3
"    postparser = subparsers.add_parser(""str$id"", help=""str$id"")    postparser.add_argument(""str$id"", type=str, help=""str$id"")    postparser.set_defaults(function=post_ad)    folderparser = subparsers.add_parser(""str$id"", help=""str$id"")    folderparser.add_argument(""str$id"", type=str, help=""str$id"")    folderparser.set_defaults(function=post_folder)    repostfolderparser = subparsers.add_parser(""str$id"", help=""str$id"")    repostfolderparser.add_argument(""str$id"", type=str, help=""str$id"")    repostfolderparser.set_defaults(function=repost_folder)    showparser = subparsers.add_parser(""str$id"", help=""str$id"")    showparser.set_defaults(function=show_ads)    deleteparser = subparsers.add_parser(""str$id"", help=""str$id"")    deleteparser.add_argument(""str$id"", type=str, help=""str$id"")    deleteparser.set_defaults(function=delete_ad)    nukeparser = subparsers.add_parser(""str$id"", help=""str$id"")    nukeparser.set_defaults(function=nuke)    checkparser = subparsers.add_parser(""str$id"", help=""str$id"")    checkparser.add_argument(""str$id"", type=str, help=""str$id"")    checkparser.set_defaults(function=check_ad)    repostparser = subparsers.add_parser(""str$id"", help=""str$id"")    repostparser.add_argument(""str$id"", type=str, help=""str$id"")    repostparser.set_defaults(function=repost_ad)    buildparser = subparsers.add_parser(""str$id"", help=""str$id"")    buildparser.set_defaults(function=generate_inf_file)",xsrf,63
"            return ""str$id"" + sql",sql_injection,4
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,11
"        return ""str$id"".join(            escape_path_argument(s) for s in (                sys.executable,                             scriptname)))",command_injection,9
"        response = self.client.post(url)            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,12
"    input_directory = ""str$id""    download_directory = input_directory + ""str$id""    temp_directory = ""str$id""    vcf_directory = ""str$id""    zarr_directory_setup = ""str$id""    zarr_directory_benchmark = ""str$id""",remote_code_execution,20
"    def _cli_run(self, verb, cli_args):        cli_arg_strings = []        if cli_args:            for k, v in cli_args.items():                if k == ""str$id"":                    cli_arg_strings.append(""str$id"" % k)                else:                    cli_arg_strings.append(""str$id"" % (k, v))        cmd = verb + ""str$id"".join(cli_arg_strings)",command_injection,31
"        from_date=context.get(""str$id"",false)        to_date=context.get(""str$id"",false)        date_str=false            date_str=""str$id""%(from_date,to_date)            date_str=""str$id""%(from_date)            date_str=""str$id""%(to_date)",sql_injection,6
"        c.execute(""str$id"", (num%id, username))",sql_injection,3
                if token or not getutility(ihttprestauthenticationutility).get_basic_auth_credentials(request):,path_disclosure,5
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
        for i in xrange(sleep_num):,xsrf,4
	def prepare_for_processing(self):,open_redirect,2
"    return db_execute(sql, true)      keyword_string = ""str$id"" + keyword + ""str$id"" + \        ""str$id"" + keyword + ""str$id""      from_date_string = ""str$id"" + from_date + ""str$id""      to_date_string = ""str$id"" + to_date + ""str$id""",sql_injection,31
"        ""str$id""' % (winner, loser, loser, winner)        cur.execute(q)",sql_injection,7
"        fc_ls_map_cmd = ""str$id"" % \            fc_map_id",command_injection,6
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,12
"            self.etcd.delete(os.path.join(self.namespace, key))",path_disclosure,2
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,9
"        fields = [""str$id"", ""str$id"", ""str$id"", ""str$id"",""str$id"",]",open_redirect,6
"            group_exam_ind=num%id            exam_type_name=""str$id"",            group_exam_ind=num%id",open_redirect,3
"products_types_table = ""str$id""            f""str$id""""            select name            from {products_types_table}",sql_injection,8
"        ""str$id"",",xsrf,1
        arg_list = cmd.split(),command_injection,3
from messagesmanager.routes import messages_module,sql_injection,4
"        out = self._cli_run(""str$id"", none)",command_injection,4
"        self.assertraises(sievelib.commands.unknowncommand, sievelib.commands.get_command_instance, ""str$id"")",command_injection,3
            contents = self.stdout_interceptor.flush_all(),open_redirect,3
"    _user_id = ""str$id""",xsrf,3
"                print ""str$id"" % (node, client.status_info)",remote_code_execution,5
"                        sql = ""str$id"".format(bracket, user, name)                        self.db.exec(sql)",sql_injection,6
"    group.add_argument(""str$id"", nargs=""str$id"", default=os.curdir, help=""str$id"")",path_disclosure,4
"            return position(request, position.objects.get(",open_redirect,3
"		blacklisted_keywords = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"",			""str$id"", ""str$id"", ""str$id"", ""str$id""]",sql_injection,13
"    if ""str$id"" != request.method.upper():",xsrf,4
"sensormotor.duty_cycle_sp = 50forwardangle = gyrovalue() #allow us to monitor the path as we are moving forwardprint ""str$id"", forwardangle	i = num%id	while(i < num%id):		forwardangle = gyrovalue()		print ""str$id"", forwardangle		sleep(num%id.num%id)		i = i+num%id	print ""str$id""		motors: motor.count_per_rot, run_to_rel_pos				how to keep going forward:		each turn add angle and mod num%id. all angles will be num%id-num%id				currentdir = gyrovalue()		if(forwardangle + degrees > num%id || forwardangle - degrees < num%id) {			//shift angles to work at a better range			changedforwardangle = (forwardangle-num%id)%num%id			changedcurrentdir = (currentdir-num%id)%num%id						if(changedcurrentdir - degrees) > (changedforwardangle):				rightmotor.duty_cycle_sp = num%id			todo:finish		}				""str$id""""str$id""gyrovalue: ""str$id""brake""str$id""brake""str$id""""str$id""		detectskew(gyrovalue())",path_disclosure,98
"def _is_package(directory):    base = os.path.splitext(os.path.basename(file))[num%id]    name = [base] if base != ""str$id"" else []    parent = none    while current != parent and _is_package(current):        parent = os.path.dirname(current)        name.append(os.path.basename(current))        current = parent    return current, ""str$id"".join(reversed(name))",path_disclosure,33
"                                  ""str$id"")",command_injection,1
"        flow = flow_from_clientsecrets(            self.client_secrets,            scope=self.scope)        if self.credentials is none:            self.credentials = storage.get()        if self.credentials is none or self.credentials.invalid:            self.credentials = run_flow(flow, storage, flags)        if self.credentials.access_token_expired:            self.credentials.refresh(http=httplib2.http())    def getartifacturl(self, appname, by_method, version, filename):",xsrf,32
        print (e),sql_injection,2
"    sql = ""str$id"".format(scene, prev_date)    res = db.exec(sql)",sql_injection,7
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andreturn(",xsrf,6
"    tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")        tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")",open_redirect,10
"    sql = ""str$id"" \        % (user_id)    cursor.execute(sql)        sql = ""str$id"" % user_id        cursor.execute(sql)        sql = ""str$id"" \            % (message[num%id], user_id)        cursor.execute(sql)",sql_injection,21
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"        length_exceeded = [data for data in input_row if len(data) > max_data_length]        if length_exceeded:            return (false, length_exceeded)",sql_injection,16
"classifier.add(dense(units = num%id, kernel_initializer = ""str$id"", activation = ""str$id"", input_dim = num%id))classifier.add(dense(units = num%id, kernel_initializer = ""str$id"", activation = ""str$id""))classifier.add(dense(units = num%id, kernel_initializer = ""str$id"", activation = ""str$id""))classifier.compile(optimizer = ""str$id"", loss = ""str$id"", metrics = [""str$id""])classifier.fit(x_train, y_train, batch_size = num%id, epochs = num%id)",remote_code_execution,43
"            where timestamp between %s and %s         for row in self.c.execute(query % (day_start, day_end)):",sql_injection,13
"    record_log_files_in_redis(        redis_address,        node_ip_address, [redis_stdout_file, redis_stderr_file],        password=password)",open_redirect,6
"    native = {""str$id"": ""str$id""}",remote_code_execution,4
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(",xsrf,3
"""str$id""""str$id""""str$id""from flask import blueprint, abort, current_app, url_for, request    make_handler, disconnect_handler, oauth_logout_handler",xsrf,11
"        poll = db.execute(""str$id"".format(pollid))    for (index, answer, votes) in db.execute(""str$id"".format(pollid, )):",sql_injection,10
"		blacklisted_keywords = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""]			frappe.throw(_(""str$id""), frappe.dataerror)",sql_injection,11
"    onboarding.invite_somebody: onboarding_steps_default_template,",open_redirect,2
"    def _run_ssh(self, command, check_exit=true, attempts=num%id):",command_injection,5
"        from_date=context.get(""str$id"",false)        to_date=context.get(""str$id"",false)        date_str=false            date_str=""str$id""%(from_date,to_date)            date_str=""str$id""%(from_date)            date_str=""str$id""%(to_date)",sql_injection,6
"                    value = pipes.quote(option.split(""str$id"")[num%id].split()[num%id])",command_injection,3
"app.register_blueprint(topic_routes, url_prefix=""str$id"")app.register_blueprint(auth_routes, url_prefix=""str$id"")app.register_blueprint(reply_routes, url_prefix=""str$id"")	app.run(debug=true)",xsrf,5
"from beamr.lexers.document import t_comment  # used internally by lex() @unusedimport       ""str$id"",       ""str$id"",",command_injection,12
"    def add(self, query):            self.execute_query(query)",sql_injection,4
"    cursor.execute(""str$id"" % p1)",sql_injection,3
"    server = xsrf_client.xsrfremote(""str$id"")",xsrf,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"num%id,",remote_code_execution,1
"        scan_for_forms(""str$id"", host, url)        os.remove(""str$id"")",xss,4
"    self._temp_options_filename = none      self._temp_options_filename = options_file.name      json.dump( dict( self._user_options ), options_file )",remote_code_execution,12
"        ssh_cmd = (""str$id"" %                   {""str$id"": port1, ""str$id"": host_name})            ssh_cmd = (""str$id"" % (port, host_name))",command_injection,14
    return check_executables() + check_imports(),command_injection,4
"    select = templatecolumn(        ""str$id"",        verbose_name=""str$id"", orderable=false)",command_injection,6
"        return iofile(apply_wildcards(f, wildcards,                      rule=self.rule)",remote_code_execution,4
"            name = [scene.get_name() for scene in chunk]            t = thread(target=self.analyze_scenes, name=str(name), args=(chunk,))            log.info(""str$id"".format(t.name))            t.start()            threads.append(t)",sql_injection,15
"    sql = ""str$id""+str(player)+""str$id""\            +""str$id""+str(player)+""str$id""+str(player)+""str$id""    result = db.exec(sql)",sql_injection,7
"        self._cli_run(""str$id"", none)",command_injection,2
"    ""str$id""""find single keywords in the fulltext",remote_code_execution,6
"from typing import dict, type_checking",open_redirect,5
"        next_url = request.get.get(""str$id"", reverse(""str$id""))",open_redirect,4
"    def _run_ssh(self, command, check_exit_code=true, attempts=num%id):",command_injection,5
"                    ""str$id"") % ssh_cmd)",command_injection,3
    duplicates = []        if by_hash.has_key(level_hash):            other = by_hash[level_hash]            by_path[short_path] = other            duplicates.append(level)            continue        by_hash[level_hash] = level        by_path[short_path] = level,path_disclosure,19
"		cursor.execute(""str$id"" + course + ""str$id"")",sql_injection,5
"    def get_base_path(self):        return self.config[""str$id""]        return static_file(path, self.get_base_path())",path_disclosure,7
"    def add_random_torrent(self, metadata_cls):            ""str$id"": ""str$id"",",sql_injection,5
"            sourcebyinstitution = ""str$id""    ""str$id"""" % sourcebyinstitution    sqlite.execute(query)",sql_injection,7
        response = self.client.post(url),xsrf,3
"def retrieve_quest_data(pg_connection, query):    conn = psycopg2.connect(        dbname=pg_connection[""str$id""],        user=pg_connection[""str$id""],        password=pg_connection[""str$id""],        host=pg_connection[""str$id""])    cur = conn.cursor()    cur.execute(query)    results = list(cur.fetchall())    cur.close()    conn.close()    return resultsdef retrieve_all_quests(pg_connection):",sql_injection,22
"def modhash(user, rand = none, test = false):    return user.namedef valid_hash(user, hash):    return true",xsrf,14
from argon2 import passwordhasher,open_redirect,4
"        text_query_str = str(text_query) # sqlobject chokes on unicode.        sql_query = ""str$id"" % text_query_str        return self.select(sql_query)",sql_injection,15
"query = ""str$id""+str(int(round(volume)))+""str$id""cur.execute(query)",sql_injection,3
"        from_date=context.get(""str$id"",false)        to_date=context.get(""str$id"",false)        date_str=false            date_str=""str$id""%(from_date,to_date)            date_str=""str$id""%(from_date)            date_str=""str$id""%(to_date)",sql_injection,6
"import base64 ,time ,selenium ,os ,urllib ,sys ,threading ,configparserfrom selenium import webdriverfrom pil import image",command_injection,15
from pixelated.resources.root_resource import rootresource,xsrf,4
"                   ""str$id"" % (winner, loser, ts))",sql_injection,5
from .extracted_text import extractedtext,open_redirect,4
"            ssh_cmd = (""str$id""                       ""str$id"" %                       {""str$id"": host_name,                        ""str$id"": result_lun,                        ""str$id"": volume_name})",command_injection,11
"	def _raise_exception():		frappe.throw(_(""str$id""), frappe.dataerror)			_raise_exception()			_raise_exception()			_raise_exception()			_raise_exception()",sql_injection,8
            if rc >= num%id:,remote_code_execution,4
"        query = ""str$id""+proxy_id+""str$id""        cur.execute(query)",sql_injection,4
"            tname = identifier(self._table.replace(""str$id"", ""str$id"")).as_string(                self.env.cr._obj  # pylint: disable=protected-access            )            cname = identifier(column_name.replace(""str$id"", ""str$id"")).as_string(                self.env.cr._obj  # pylint: disable=protected-access            )            logging.error(                ""str$id"",                self._table,                tname,                type(tname),                str(tname),            )            self.env.cr.execute(                ""str$id"",                (self._table, cname),            )                self.env.cr.execute(                    ""str$id"",                    (self._table, cname, default_value.id, stage[num%id]),                )",sql_injection,37
        response = self.client.post(url),xsrf,3
"			active_employees = frappe.get_all(""str$id"", 		filters = { ""str$id"": ""str$id"", ""str$id"": filters.company}, 	",sql_injection,10
"                where timestamp between %s and %s                group by timestamp                ""str$id""' % (day_start, day_end)        self.c.execute(query)",sql_injection,14
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
    if not (diploma_design and cached_points.user.is_authenticated()):,sql_injection,5
"            explorers[telegram_id].remove_directories([content_id])            explorers[telegram_id].remove_files([content_id])    if (explorers[telegram_id].last_action_message_ids):        for message_id in explorers[telegram_id].last_action_message_ids:            result.append(bot.delete_message(telegram_id, message_id))            explorers[telegram_id].last_action_message_ids.remove(message_id)    content = explorers[telegram_id].get_directory_content()    keyboard = content_builder(content, len(explorers[telegram_id].path) > num%id)    message_sent = bot.send_message(telegram_id, explorers[telegram_id].get_path_string(), reply_markup=keyboard)    explorers[telegram_id].last_action_message_ids.append(message_sent.message_id)",sql_injection,26
"	email = db.column(db.string(num%id))	def __init__(self, email, password):		self.email = email	return render_template(""str$id"", user=user.query.all())		user = user(request.form[""str$id""], request.form[""str$id""])		db.session.add(user)		db.session.commit()		return redirect(url_for(""str$id""))",sql_injection,21
"        self.url = ""str$id"" % (self.base_url,                                                 task_id, language_code)",xsrf,7
"        cmd = (""str$id""               ""str$id"")        cmd_res = host.check_output(cmd.format(resource, namespace))    assert len(cmd_res.strip()) > num%id, ""str$id"".format(",command_injection,13
"    referer = request.post[""str$id""] if request.post[""str$id""] else ""str$id""",open_redirect,7
        return flag in value.flags,remote_code_execution,4
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")",xsrf,7
"    xss_result = ""str$id""",xss,3
"        movement = ((num%id, num%id), (-num%id, num%id), (num%id, num%id), (num%id, -num%id), (-num%id, -num%id), (-num%id, num%id), (num%id, num%id), (num%id, -num%id))",path_disclosure,18
"            f""str$id"")",sql_injection,1
"    cursor.execute(""str$id"", (content,))",sql_injection,2
        return command.execute(),remote_code_execution,2
"            sys.exit(""str$id"" % hostname)",open_redirect,3
"            f""str$id""""str$id""""str$id"")        await self.db_conn.execute(execute)",sql_injection,3
"    if request.get(""str$id""):        return check_token(request.get(""str$id""))",xsrf,4
"                ""str$id""+account_id+""str$id""+account_name+""str$id""+referrer+""str$id""+str(referrer_rewards_percentage)+""str$id""+lifetime_referrer+""str$id""+str(lifetime_referrer_fee_percentage)+""str$id""        cur.execute(query)",sql_injection,2
"        return baserequest.session.post( _builduri( handler ),                                        data = toutf8json( data ),                                        headers = _headers,                                        timeout = timeout )        return baserequest.session.get( _builduri( handler ),                                        headers = _headers,                                        timeout = timeout )                              data = toutf8json( data ),                              headers = _headers )                             headers = _headers )",remote_code_execution,42
display = display(),remote_code_execution,3
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,36
"    page = db.query(""str$id"" % search).namedresult()",sql_injection,5
"        evtable = self.metadata.tables[""str$id""]        stream_str = ""str$id""        index = num%id        for stream_id in stream_ids:            stream_str += ""str$id"" % (evtable.c.stream_id, stream_id)            index += num%id            if index != len(stream_ids):                stream_str += ""str$id""        stream_str += ""str$id""        wherecl = ""str$id"" % ( \                evtable.c.timestamp, start, evtable.c.timestamp, \                end, stream_str)        query = evtable.select().where(wherecl).order_by(evtable.c.timestamp)        return self.__execute_query(query)    def __execute_query(self, query):        res = query.execute()        event_list = []        for row in res:            foo = {}            for k,v in row.items():                foo[k] = v            event_list.append(foo)        res.close()        return ampy.result.result(event_list)        evtable = self.metadata.tables[""str$id""]        wherecl = ""str$id"" % (evtable.c.group_id, group_id)        query = evtable.select().where(wherecl).order_by(evtable.c.timestamp)        return self.__execute_query(query)",sql_injection,90
"                    conn.execute(""str$id"" + s[num%id] + ""str$id"", (a, b))",sql_injection,7
    return httpnocontent(),sql_injection,2
"    def test_rejected(self, save_session):",xsrf,3
    utils.removeifexists( self._temp_options_filename ),remote_code_execution,3
        parsed = vars(self.parse_known_args(nohelp=true)[num%id]),command_injection,3
"                    print ""str$id""",remote_code_execution,2
"            while count_two <= len(path) - num%id:                drawn_path.append(line(screen, (num%id, num%id, num%id), vector2(line_start.x_pos + num%id,        pygame.draw.rect(screen, (num%id, num%id, num%id), start_square)        pygame.draw.rect(screen, (num%id, num%id, num%id), goal_square)",path_disclosure,23
"        column_names = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"",                        ""str$id"", ""str$id"", ""str$id""]        cve_query = ""str$id"" % ""str$id"".join(column for column in column_names)        cve_query = cve_query + ""str$id""        cve_query = cve_query + ""str$id""",sql_injection,30
"            set message = ""str$id""            where client_id = ""str$id""        ""str$id""""str$id""""str$id"".format(new_pass, logged_user.get_client_id())        cursor.execute(update_sql)            values (""str$id"", ""str$id"")        ""str$id""""str$id""""str$id"".format(username, password)        cursor.execute(select_query)",sql_injection,17
"        self.filter_string = ""str$id"".format(self.name, value)",sql_injection,4
"    import_thread.importthread(worker, mode).start()",open_redirect,2
"                    help=""str$id"",",path_disclosure,1
"@urls.registerclass keypair(generic.view):    url_regex = r""str$id""    def get(self, request, keypair_name):        ""str$id""""str$id""""str$id""        try:            regenerate = request.get.get(""str$id"") == ""str$id""            if regenerate:                api.nova.keypair_delete(request, keypair_name)            keypair = api.nova.keypair_create(request, keypair_name)        except exceptions.conflict:            return httpresponse(status=num%id)        except exception:            return httpresponse(status=num%id)        else:            response = httpresponse(content_type=""str$id"")            response[""str$id""] = (""str$id""                                               % slugify(keypair_name))            response.write(keypair.private_key)            response[""str$id""] = str(len(response.content))            return response",xsrf,47
"        response = self.client.post(url)            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,12
"            self.cursor.execute(""str$id"" % (item[num%id], item[num%id]))",sql_injection,4
"        return ""str$id"" % (lhs, self.start, self.end), params",sql_injection,7
"    updated = false        ""str$id""""str$id""""str$id""            cur.execute(""str$id"",            cur.execute(""str$id"",            cur.execute(""str$id"",            cur.execute(""str$id"",            cur.execute(""str$id"",",sql_injection,9
"        response = self.client.post(url)        response = self.client.get(url, content_type=""str$id"")",xsrf,7
"        self.sets[""str$id""] = set()",remote_code_execution,3
        data_service.remove_directory_tree(vcf_directory)        data_service.remove_directory_tree(zarr_directory_setup),remote_code_execution,2
"    if player_in_url(db, tag, urls=tournaments):    sql = ""str$id"".format(scene, date, limit)    res = db.exec(sql)    sql = ""str$id"".format(scene, date, limit)    res = db.exec(sql)",sql_injection,20
"        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",            ""str$id""),        url(r""str$id"",            ""str$id""),        url(r""str$id"",            ""str$id""),        url(r""str$id"",        url(r""str$id"",            ""str$id""),",xss,12
"            if (self._attack(basepair, insertionpoint, payload, num%id)[num%id] > basetime + num%id):                    (timer, attack) = self._attack(basepair, insertionpoint, payload, num%id)",command_injection,16
"                sql = ""str$id""                sql += ""str$id""+str(base_url)+""str$id""+str(first)+ ""str$id""+str(last)+""str$id""+str(name)+""str$id""                self.db.exec(sql)",sql_injection,8
def find_free_port():  port = num%id,xsrf,5
"        sql = urlparams.to_sql()        data, column_names, error = datadb.execute_on_db_uniq(urlparams.db_uniq, sql)",sql_injection,9
            self.cursor.execute(self.sql_table_exists % table_name),sql_injection,3
"class host(base.messagehandler):    def __call__(self, msg, arguments, errorsink=none):            [""str$id"", arguments],        self.reply(msg, output)",command_injection,11
"""str$id""""str$id""""str$id""from flask import blueprint, abort, current_app, url_for, request    make_handler, disconnect_handler, oauth_logout_handler",xsrf,11
"    httpresponseredirect,",open_redirect,1
"    status = {""str$id"": num%id,              ""str$id"": num%id,              ""str$id"": num%id,              ""str$id"": num%id,              ""str$id"": num%id,              ""str$id"": num%id}                ""str$id"" + path + ""str$id"")",sql_injection,19
"            self.env.cr.execute(                ""str$id"",                (self._table, column_name),                self.env.cr.execute(                    ""str$id"",                    (self._table, column_name, default_value.id, stage[num%id]),",sql_injection,10
        for g in self.parent_groups:            g.clear_hosts_cache(),path_disclosure,5
"	def __init__(self, *args, **kwargs):		self.dbstr = ""str$id""",sql_injection,7
"        generator = self._port_conf_generator(""str$id"")",command_injection,3
"version = ""str$id""version_info = (num%id, num%id, num%id, num%id)",xsrf,8
"        return {            ""str$id"": files,            ""str$id"": submit.tmp_path,        }",path_disclosure,7
"                        update_query = self.update_template.format(oracle_id, local_id)                        self.db.execute(update_query)                        print ""str$id"", local_id, ""str$id"", oracle_id                    print ""str$id""            print ""str$id""",sql_injection,14
"    password=""str$id"",    database=""str$id""	query=""str$id""	cursor.execute(query)	return render_template(""str$id"", images=cursor)@app.route(""str$id"")def view_comment(pic_name):	query= ""str$id""	cursor.execute(query)	return render_template(""str$id"", names=cursor, pic_name=pic_name)@app.route(""str$id"", methods=[""str$id"", ""str$id""])def submit_comment(pic_name=none):	if request.method == ""str$id"":		query = ""str$id"" % (request.form[""str$id""], request.form[""str$id""])		cursor.execute(query)		db.commit()		return redirect(url_for(""str$id"", pic_name=pic_name))@app.route(""str$id"", methods=[""str$id"", ""str$id""])def delete_comment(pic_name=none):	if request.method == ""str$id"":		query = ""str$id"" % request.form[""str$id""]		cursor.execute(query)		db.commit()		return redirect(url_for(""str$id"", pic_name=pic_name))@app.route(""str$id"", methods=[""str$id"", ""str$id""])def edit_comment(pic_name=none):	edit_value = request.form[""str$id""]		return render_template(""str$id"", edit_value=edit_value, pic_name=pic_name)	if request.method == ""str$id"":		query = ""str$id""insert into imagetable(img_path, img_name)\				values(""str$id"", ""str$id"")"" % ((""str$id"" + f.filename), (f.filename))		cursor.execute(query)		db.commit()		return redirect(url_for(""str$id""))",sql_injection,81
"    record_log_files_in_redis(        redis_address,        node_ip_address, [stdout_file, stderr_file],        password=redis_password)",open_redirect,6
"""str$id""""bibclassify text extractor.",remote_code_execution,3
"        query = ""str$id""",sql_injection,3
"        ssh_cmd = ""str$id"" % pool",command_injection,5
        entry.directory_digest for entry in dependency_classpath if entry.directory_digest      if len(directory_digests) != len(dependency_classpath):        for dep in dependency_classpath:,remote_code_execution,15
from django.test import transactiontestcase,xsrf,4
"        print ""str$id"" + cloud_path",path_disclosure,4
"            ssh_cmd = (""str$id""                       ""str$id"" %                       {""str$id"": host_name,                        ""str$id"": result_lun,                        ""str$id"": volume_name})",command_injection,11
"                    logging.debug(""str$id"", command)",sql_injection,2
        arg_list = cmd.split(),command_injection,3
"            data=jsonutils.dumps(resp_body, sort_keys=true))",xsrf,2
"    ""str$id""",sql_injection,1
"        self.set_header(""str$id"", ""str$id"")",xsrf,2
"    query = db.query(""str$id"" % content_id)",sql_injection,5
"        sql += ""str$id"" % data        sql += ""str$id"" % data",sql_injection,10
"                yield ""str$id""",sql_injection,2
"    ctx = ds.pathtraversalcontext( {}, {}, self._root, {}, none, none, none )",path_disclosure,11
"        ""str$id"": {""str$id"": ""str$id""},",xsrf,3
    finished = false    while not finished:        for actor in actors:            actor.join(),xsrf,11
"			query = ""str$id"".format(data) #i didn""str$id"".format(data)'				cursor.execute(query)		connection.connect(self):",sql_injection,7
"from snakemake.exceptions import missingoutputexception, workflowerror, wildcarderror",remote_code_execution,6
"        return baserequest.session.post( _builduri( handler ),                                        data = toutf8json( data ),                                        headers = _headers,                                        timeout = timeout )        return baserequest.session.get( _builduri( handler ),                                        headers = _headers,                                        timeout = timeout )                              data = toutf8json( data ),                              headers = _headers )                             headers = _headers )",remote_code_execution,42
"    path = posixpath.normpath(path)    path = path.lstrip(""str$id"")    newpath = ""str$id""    for part in path.split(""str$id""):        if not part:            continue        drive, part = os.path.splitdrive(part)        head, part = os.path.split(part)        if part in (os.curdir, os.pardir):            continue        newpath = os.path.join(newpath, part).replace(""str$id"", ""str$id"")    if newpath and path != newpath:        return httpresponseredirect(newpath)    fullpath = os.path.join(document_root, newpath)            return directory_index(newpath, fullpath)",open_redirect,51
        remote_work_dir_copy = lwrjobrunner.__remote_work_dir_copy( client )        if not remote_work_dir_copy:            work_dir_outputs = self.get_work_dir_outputs( job_wrapper )        else:            work_dir_outputs = [],remote_code_execution,17
"        plugins = {}        with open(self.cache_file(self.plugin_cache_file), ""str$id"") as f:            data = f.read().strip()        json_data = json.loads(data)        for x in json_data:            if json_data[x][""str$id""] or self.aggressive:                plugins[x] = json_data[x]        return plugins        if get_result:",sql_injection,29
"    @throttle(min_time_between_updates)        ""str$id""""str$id""""str$id""        import pyatmo        self.station_data = pyatmo.weatherstationdata(self.auth)        if self.station is not none:            self.data = self.station_data.lastdata(                station=self.station, exclude=num%id)        else:            self.data = self.station_data.lastdata(exclude=num%id)",remote_code_execution,21
from bzs import filesfrom bzs import users,sql_injection,7
"aws_base_url = ""str$id""cws_base_url = ""str$id""",xsrf,5
"        plasma.connect(info[""str$id""]))",open_redirect,1
"          ""str$id"": {""str$id"": ""str$id""},",xsrf,3
"                (""str$id"", models.foreignkey(editable=false, to=""str$id"", null=true)),",sql_injection,4
"                    cur.execute(""str$id"".format(symbol, interval) +                                ""str$id"".format(output[x][num%id],                                                                                            output[x][num%id],                                                                                            output[x][num%id],                                                                                            output[x][num%id],                                                                                            output[x][num%id],                                                                                            output[x][num%id],                                                                                            output[x][num%id],                                                                                            output[x][num%id],                                                                                            output[x][num%id],                                                                                            output[x][num%id],                                                                                            output[x][num%id]))                print(""str$id"".format(symbol, interval))            print(""str$id"".format(symbol, interval))",sql_injection,18
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)",xsrf,6
      requester = auth.email if auth else self.getrequester(request),xsrf,7
from beamr.lexers import imagelexer,command_injection,4
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"			if regex.match(field):				if any(keyword in field.lower() for keyword in blacklisted_keywords):				if any(""str$id"".format(keyword) in field.lower() \					for keyword in blacklisted_functions):",sql_injection,19
            csr_state_id=csr_state_logout.csr_state_id,open_redirect,1
"        self.verify_xss = kwargs.get(""str$id"", os.environ.get(""str$id"", false))",xss,5
"        p = psutil.popen([""str$id"", host, ""str$id"", ""str$id"", path.as_posix()], stdout=pipe, stderr=pipe)",path_disclosure,9
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url)            response = self.client.get(url)        response = self.client.post(url)",xsrf,24
"        focus_on_org = org_id and org_type            org_condition = ""str$id"".format(                org_type=org_type)            org_group = ""str$id"".format(                org_type=org_type)",sql_injection,13
"        sql = ""str$id""""str$id""hh24:mi:ss""str$id""locked_for_validation""str$id""""str$id"".format(self.id)        total_validation_time = db.engine.execute(sql)",sql_injection,6
"        self.url = ""str$id"" % self.base_url                     ""str$id"": self.password,                     ""str$id"": ""str$id""}",xsrf,9
"	base_path = ""str$id""",path_disclosure,3
"                            self._run_ssh(""str$id"" % map_id)                            self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)",command_injection,15
"  def testsuccessfultriage(self):    response = self.test_app.get(        ""str$id"": ""str$id""",xsrf,7
"    ""str$id""""str$id""""str$id""        post_data = request.get_json(force=true)        response = table.save(str(question_id), data=post_data)",sql_injection,8
"        cur.execute(""str$id""""str$id""%s""str$id""%s""str$id""%s""str$id""%s""str$id""%s""str$id""%s""str$id""""str$id"" % (new_person, new_date, new_amount, new_category, new_description, txn_id))",sql_injection,8
"                  % {""str$id"": ssh_cmd,",command_injection,3
"            resp = c.get(url)                                                       session, ""str$id"", none,    def acs(self, url, eppn, check_fn):",open_redirect,11
"def task_successful(poll_result, expected):",command_injection,3
"    self.assertisnone(self.svcr.getrequester(self.request))    self.assertequal(""str$id"", self.svcr.getrequester(self.request))    self.assertisnone(self.svcr.getrequester(self.request))    self.assertequal(""str$id"", self.svcr.getrequester(self.request))    self.request.trace = testing_helpers.blank(        test_account=""str$id"")      self.svcr.getrequester(self.request)",xsrf,11
        if self.token_authenticated:,xsrf,2
"    time.sleep(num%id.num%id)    thirdpage, thirdheaders = request.querypage(content=true)    condition  = firstpage == secondpage    condition &= secondpage == thirdpage",command_injection,15
"        if isinstance(value, basestring):            value = ""str$id"" % value.encode(""str$id"").replace(""str$id"", r""str$id"")        elif isinstance(value, models.model):            value = str(value.id)        elif value is none:            value = ""str$id""        else:            value = str(value)        sql.extend((connection.ops.quote_name(field.column), ""str$id"", value, ""str$id""))    sql.extend([""str$id"", ""str$id"", ""str$id"", str(self.id)])    connection.cursor().execute(sql)",sql_injection,35
"        tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")        tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")",open_redirect,10
"                        cursor.execute(""str$id"" + gettitle(submission) + ""str$id"" + getdate(submission) + ""str$id"")",sql_injection,9
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,3
"            field=models.foreignkey(related_name=""str$id"", to=""str$id"", blank=true, null=true),",sql_injection,4
"      self.request.trace = testing_helpers.blank(          test_account=""str$id"")          ""str$id"", self.svcr.getrequester(self.request))      self.request.trace = testing_helpers.blank(          test_account=""str$id"")        self.svcr.getrequester(self.request)",xsrf,11
"            ssh_cmd = ""str$id""",command_injection,3
"    relay_state = request.form.get(""str$id"", ""str$id"")",open_redirect,4
"        autoex = ""str$id"" if opts[""str$id""] else ""str$id""        easytier = ""str$id"" if opts[""str$id""] else ""str$id""            ssh_cmd_se_opt = ""str$id""            ssh_cmd_se_opt = (                ""str$id"" %                {""str$id"": opts[""str$id""],                 ""str$id"": autoex,                 ""str$id"": opts[""str$id""]})                ssh_cmd_se_opt = ssh_cmd_se_opt + ""str$id""                ssh_cmd_se_opt = ssh_cmd_se_opt + (                    ""str$id"" % opts[""str$id""])        ssh_cmd = (""str$id""                   ""str$id""                   ""str$id""                   % {""str$id"": name,                   ""str$id"": self.configuration.storwize_svc_volpool_name,                   ""str$id"": size, ""str$id"": units, ""str$id"": easytier,                   ""str$id"": ssh_cmd_se_opt})",command_injection,59
"    self.assertequal(num%id, len(self.taskqueue_stub.get_filtered_tasks()))  def testnonadmincannotrequestanalysisoffailureonunsupportedmaster(self):        self.test_app.get, ""str$id"", params={""str$id"": build_url})  @mock.patch.object(build_util, ""str$id"", return_value=none)  def testcannotgetbuildinfo(self, _):    self.mock_current_user(user_email=""str$id"", is_admin=true)",xsrf,16
"num%id,",remote_code_execution,1
"        referer_header_value = ""str$id""+payload",xss,3
"        from_date=context.get(""str$id"",false)        to_date=context.get(""str$id"",false)        date_str=false            date_str=""str$id""%(from_date,to_date)            date_str=""str$id""%(from_date)            date_str=""str$id""%(to_date)",sql_injection,6
from homeassistant.util import throttle,remote_code_execution,4
"            field=models.foreignkey(related_name=""str$id"", help_text=""str$id"", to=""str$id""),",sql_injection,3
"  def _check_token(request, *args, **kwargs):    check_authorization(request)    return viewfunc(request, *args, **kwargs)  return wraps(viewfunc)(_check_token)",xsrf,11
"    with open(args.file, ""str$id"") as role_req_file:",path_disclosure,5
"num%id,",remote_code_execution,1
"        response = self.client.post(url)        response = self.client.get(""str$id"")        response = self.client.get(url)        response = self.client.patch(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url)                                    content_type=""str$id"")                                    content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,24
"    resp = await test_cli.get(""str$id"", headers=headers)    resp = await test_cli.get(""str$id"", headers=headers)",sql_injection,10
"    db().execute((sql % data), true)",sql_injection,4
"        query_string = construct_select_statement(spy, self.from_object)",sql_injection,4
  def handlepost(self):  # pragma: no cover    return self.handleget(),xsrf,8
"    c.execute(""str$id""+email+""str$id"")",sql_injection,1
"        request_token_params={""str$id"": ""str$id""},        authorize_url=""str$id"",",xsrf,3
"            query = ""str$id""                cursor.execute(query, data)                connection.commit()        finally:            connection.close()",sql_injection,8
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"		query = (""str$id"".format(username,pattern))",sql_injection,3
min_time_between_updates = timedelta(seconds=num%id),remote_code_execution,3
"    access_token = ""str$id""    url = ""str$id""",sql_injection,6
"        sqlstr = ""str$id""""str$id""""str$id"" %{""str$id"":database,              ""str$id"": user_freq,              ""str$id"": len(input_phrase),              ""str$id"": len(phrase),              ""str$id"": input_phrase,              ""str$id"": phrase}        self.db.execute(sqlstr)",sql_injection,15
"        ssh_cmd = ""str$id"" % host_name",command_injection,5
"            query += ""str$id"" + limit        cursor = g.conn.execute(text(query))  # !very important here, must convert type text()",sql_injection,16
"        self._session.cookies.clear()        self._session.cookies.save()        self._session.get(url, headers=headers)        if response.status_code == requests.codes.found:  # @undefinedvariable",xsrf,10
"        c.execute(""str$id""""str$id""""str$id""%                (data[""str$id""], side, data[""str$id""], data[""str$id""], data[""str$id""].replace(""str$id"",""str$id""),  data[""str$id""], int(data[""str$id""]), data[""str$id""], data[""str$id""]))        c.execute(""str$id""""str$id""""str$id""%                (data[""str$id""], side, data[""str$id""], data[""str$id""], data[""str$id""].replace(""str$id"",""str$id""),  data[""str$id""], int(data[""str$id""]), data[""str$id""], data[""str$id""]))",sql_injection,20
db = connect()c = db.cursor()reporttoparticles(num%id)reporttopauthors()reportdailyerrors(num%id),sql_injection,5
"                    key = (attr_source, attr_target)                    if key in self.__traversed:                        continue",path_disclosure,9
"    def edituserconfig(cls, editor):",command_injection,3
"        if ""str$id"".join(re.findall(r""str$id"", data[""str$id""])) != data[""str$id""]:            return jsonify({""str$id"": num%id, ""str$id"": ""str$id""})        if ""str$id"".join(re.findall(r""str$id"", data[""str$id""])) != data[""str$id""]:            return jsonify({""str$id"": num%id, ""str$id"": ""str$id""})",sql_injection,20
                impact = check_xss_impact(xss_post.body),xss,3
"        return database_utilities.execute_query(f""str$id""""str$id""""str$id"")        return database_utilities.execute_query(f""str$id""""str$id""""str$id"")",sql_injection,4
    while(not valid):    return index,sql_injection,4
"  def xsrf_is_valid(self, body):    cnxn = sql.monorailconnection()    token = body.get(""str$id"")    user = users.get_current_user()    email = user.email() if user else none    services = self.app.config.get(""str$id"")    auth = authdata.authdata.fromemail(cnxn, email, services, autocreate=false)    try:      xsrf.validatetoken(token, auth.user_id, xsrf.xhr_servlet_path)      return true    except xsrf.tokenincorrect:      return false",xsrf,38
"        out = self._cli_run(""str$id"" % (hostname), none)",command_injection,6
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"    allads = api.get_all_ads()    [api.delete_ad(adid) for adname, adid in allads]def generate_inf_file(args):",xsrf,10
"            data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"    open_query = ""str$id""            pd.read_sql(open_query.format(table), conn).to_csv(""str$id"".format(table), index=false)",sql_injection,6
"        self._cr.execute(""str$id""""str$id""""str$id"" % (self._table, self._select(), self._from()))",sql_injection,5
"              ""str$id"" \            return ""str$id"" + sql",sql_injection,6
        source_dir_rp = os.path.realpath(source_dir),path_disclosure,3
"                    ""str$id"": ""str$id"",  # for login.html                    ""str$id"": ""str$id"",  # for forbidden.html                    ""str$id"": ""str$id"",  # for login.html                    ""str$id"": ""str$id"",  # kantara num%id-day bad authn limit is num%id                    ""str$id"": ""str$id"",    # vccs backend url                    ""str$id"": ""str$id"",                     # set to num%id to not set http cookie ""str$id"" flag",xss,44
                raise exceptions.notfound(),path_disclosure,2
"        result = self._cli_run(""str$id"", none)",command_injection,4
"            ""str$id"" % uuid)",xsrf,3
from pixelated.resources import baseresource,xsrf,4
"                    ""str$id"") % ssh_cmd)",command_injection,3
"    def get_flat_tree(self, cr, uid, root_id, level=num%id):        ""str$id""""str$id""""str$id""select id, code, name, sequence, type, style, %s as level                       from budget_item                       where id = %s ""str$id""""str$id""""str$id""select id, code, name, sequence, type, style, %s as level                   from budget_item                   where parent_id = %s                   and active                   order by sequence ""str$id""""str$id""it seems the budget items structure ""str$id""is recursive (or too deep). ""str$id""please check and correct it ""str$id""before to run this action again""))        return result",sql_injection,67
    mail_sent = send_mail(,open_redirect,3
        [plugins_list.append(plugin) for plugin in wp.find_plugins()],path_disclosure,5
        check that the url path does not contain any elements which might be        used in a path traversal attack,path_disclosure,19
"from flask import flask, url_for, render_template, request, make_response, jsonify, json, response",open_redirect,11
"from django.http import httpresponse, httpresponseredirectfrom django.shortcuts import get_object_or_404, render",open_redirect,9
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"            raw_chem = self.browser.find_element_by_xpath(                ""str$id"")",open_redirect,4
"    record_log_files_in_redis(redis_address, node_ip_address,                              [stdout_file, stderr_file])",open_redirect,4
        response = self.client.get(url),xsrf,3
"        self.forward(""str$id"" % (host_port, device_port))",command_injection,4
"    def __init__(self,                 redis_address,                 redis_port,                 autoscaling_config,                 redis_password=none):            redis_address, redis_port, redis_password=redis_password)        self.redis = redis.strictredis(            host=redis_address, port=redis_port, db=num%id, password=redis_password)",open_redirect,16
from homeassistant.util import throttle,remote_code_execution,4
"        sys.executable, ""str$id"", log_monitor_filepath, ""str$id"",        redis_address, ""str$id"", node_ip_address",open_redirect,7
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"            with run_interactive_shell_command(""str$id"", shell=false):",command_injection,3
"  remote = xsrf_client.xsrfremote(options.swarming_server)        options.in_file, remote, options.cost_usd_hour, options.start,        options.out_file, options.min_free_space)",xsrf,9
"                            self._run_ssh(""str$id"" % map_id)                            self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)",command_injection,15
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"        sql = ""str$id""""str$id""""str$id""        if item and city:            sql = ""str$id"".format(sql, city, item)        elif item:            sql = ""str$id"".format(sql, item)        elif city:            sql = ""str$id"".format(sql, city)        with connection.cursor() as c:            c.execute(sql)            price_mode, count = c.fetchone()",sql_injection,33
"        ssh_cmd = ""str$id""",command_injection,3
            self._headers = tornado.httputil.httpheaders()        self._headers = tornado.httputil.httpheaders(),xsrf,6
  return,xsrf,1
"        ""str$id"".format(id=id))    db.execute(""str$id"".format(id=id))    db.execute(        ""str$id"".format(name=name, id=id))    db.execute(        ""str$id"".format(position=position, id=id))        ""str$id"".format(name=name))",sql_injection,9
"    stat_table_name = boundary_name + ""str$id"" + table_id    boundary_table_name = ""str$id"".format(boundary_name)        envelope_sql = ""str$id"".format(map_left, map_bottom, map_right, map_top)        geom_sql = ""str$id"".format(display_zoom)        sql = ""str$id"" \              ""str$id"" \              ""str$id"" \              ""str$id"" \              ""str$id"" \              ""str$id"" \            .format(stat_id, geom_sql, settings[""str$id""], boundary_table_name, settings[""str$id""],                    stat_table_name, settings[""str$id""], envelope_sql)            pg_cur.execute(sql)",sql_injection,42
"        table_name = (symbol + ""str$id"" + interval, )            cur.execute(""str$id"", table_name)",sql_injection,10
"          [jc.pathcontainspredicate(""str$id"", self.__use_lb_tp_name),           jc.pathelementscontainpredicate(           jc.pathelementscontainpredicate(",path_disclosure,4
"    users_tmp = ""str$id"".join(list(map(str, [user_id] + cands)))    with all_songs_analysis as",sql_injection,9
"            auth_user: user = user.objects.create_user(username=username, email=mail, password=pw1)            user.displayname = displayname            user.notes = notes",xss,12
"        self.get(path, include_body=false)",xsrf,2
"        ""str$id"",        ""str$id"",",open_redirect,2
"        cmd = ""str$id"" % volume_name        out = self._cli_run(cmd, none)",command_injection,9
"    def run(self):        result = subprocess.run(args, stdin=subprocess.pipe, stdout=subprocess.pipe)",command_injection,7
                q = q.filter(announce.created >= start_time),xsrf,5
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id"")        show_host_cmd = ""str$id""",command_injection,10
from django.core.urlresolvers import reverse,sql_injection,4
"version = ""str$id""",command_injection,3
"    df = sql.frame_query(query %locals(), db)",sql_injection,5
"            if connection.execute(s, username=username).fetchone() is none",sql_injection,5
"		and c.email_id=""str$id""""str$id"""".format(email_id=sender))",sql_injection,2
        pass,sql_injection,1
"        value = u""str$id"".format(value)",sql_injection,3
"            ssh_cmd = ""str$id""",command_injection,3
"    cur.execute(""str$id"",                (n_files, n_success, n_error, domain, session.get(""str$id"", none), hierarchy_json, stats_json, session.get(""str$id"", none), proc_total_time))",sql_injection,12
"            query = ""str$id""""str$id""\""str$id""            print(query)            cursor.execute(query)    return json.dumps([])",sql_injection,7
        response = self.client.get(url),xsrf,3
"        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",            ""str$id""),        url(r""str$id"",            ""str$id""),        url(r""str$id"",            ""str$id""),        url(r""str$id"",        url(r""str$id"",            ""str$id""),",xss,12
"_base_url_patterns = [(r""str$id"",    urls.url(""str$id"" % path_exp, view_func())    for (path_exp, view_func) in _base_url_patterns            ""str$id"" % (site_settings.optional_path_prefix, path_exp),            view_func()) for (path_exp, view_func) in _base_url_patterns",xsrf,22
"        ssh_cmd = ""str$id""",command_injection,3
                self.debugger.dut.serial.timeout = num%id,command_injection,3
"        if get_top_articles(cur, ""str$id"", num%id):        if get_top_authors(cur, ""str$id""):",sql_injection,7
"         jc.pathcontainspredicate(         jc.pathpredicate(             ""str$id"",             jc.list_similar(expect_avail_zones)),         jc.pathelementscontainpredicate(",path_disclosure,5
"        d.addcallback(lambda res:                      self.get(""str$id"", followredirect=true))        def _check4(res):            pass        d.addcallback(_check4)",xsrf,8
"    resp = await test_cli.get(""str$id"", headers=headers)    resp = await test_cli.get(""str$id"", headers=headers)",sql_injection,10
"        self.cursor.execute(""str$id""%(money, user_id))        self.cursor.execute(""str$id"" % (money, project_id))        self.cursor.execute(""str$id"" % (project_id, user_id, money))        self.cursor.execute(""str$id"" % (project_id, user_id, money))        self.cursor.execute(""str$id"" % project_id)        self.cursor.execute(""str$id"" % (user_id, money))",sql_injection,23
from django.core.exceptions import objectdoesnotexist,path_disclosure,4
"        headers = {            ""str$id"": ""str$id"",            ""str$id"": __version__.rsplit(""str$id"", num%id)[num%id],        }        if not controller:                ""str$id"")",xsrf,13
"  def execute_and_fetch_all(sql, as_list=false):      cursor = dbmanager.execute(sql, cursor=true)",sql_injection,7
        content = await self.content,xss,4
"        ssh_cmd = ""str$id"" % vdisk_name        ssh_cmd = ""str$id"" % vdisk_name",command_injection,10
"        return gethtml(name)",sql_injection,2
"	simattack(""str$id"")",path_disclosure,1
"  version = os.environ[""str$id""]      str(version),",xsrf,4
from itertools import chainfrom datetime import datetimefrom django.core.exceptions import validationerrorfrom django import forms,open_redirect,13
"def clear():	if os.name == ""str$id"":		os.system(""str$id"")	else:		os.system(""str$id"")",command_injection,9
"        ""str$id"": response.json_body.get(""str$id"")",xsrf,2
"              ""str$id"": {""str$id"": ""str$id""},            {},    bot_main.post_error_task(botobj, ""str$id"", num%id)",xsrf,7
"            param.set_value(request.form[param.name])        getattr(stops, pr_name)(procedure)",sql_injection,3
"    [print(""str$id"".format(adid, adname)) for adname, adid in api.get_all_ads()]",xsrf,7
"        os_utilities.get_hostname_short(), os.environ[""str$id""])",xsrf,2
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,12
"				cursor.execute(""str$id"" + course +""str$id"")				cursor.execute(""str$id"" + course +""str$id"")				cursor.execute(""str$id"" + session[""str$id""] + ""str$id"" + str(courseid[num%id]))				cursor.execute(""str$id"" + session[""str$id""] + ""str$id"" + str(courseid[num%id]) + ""str$id"" + str(courseconcentration[num%id]) + ""str$id"" + str(score) + ""str$id"" + str(rank) + ""str$id"" + str(total) + ""str$id"")				cursor.execute(""str$id"" + course.lower() + ""str$id"" + session[""str$id""] + ""str$id"")",sql_injection,49
"            cols = cols + ""str$id""        namelist = []        namelist.append(tablename)                namelist.append(key)                namelist.append(t)                print(""str$id"".format(tableobj, key, tableobj[key]))                print(""str$id"".format(e))            cursor.execute(""str$id"" + cols + ""str$id"", namelist)            print(""str$id"".format(e))",sql_injection,22
"          ""str$id"": {""str$id"": ""str$id""},",xsrf,3
"            sys.stdout = log_stdout_file            sys.stderr = log_stderr_file            try_update_handler(sys.stderr)            services.record_log_files_in_redis(                info[""str$id""],                info[""str$id""], [log_stdout_file, log_stderr_file],                password=redis_password)",open_redirect,13
"      ""str$id"": coordinator.json,      ""str$id"": json.dumps(credentials.credentials.keys()),      ""str$id"": json.dumps(workflows),",xss,6
"    query = (        ""str$id""        ""str$id""        ""str$id""        ""str$id""        ""str$id""        ""str$id""        ""str$id"")",sql_injection,10
"""str$id""""str$id""""str$id""import subprocessimport sysimport discordimport timeimport neko__all__ = [""str$id"", ""str$id""]def __run_git_command(dont_stash, *args):    entry_point = os.path.dirname(sys.argv[num%id])    entry_point = os.path.join(entry_point, ""str$id"")    if not dont_stash:        subprocess.run(            [""str$id"", ""str$id""],            cwd=entry_point,            stdout=subprocess.pipe,            stderr=subprocess.pipe,            timeout=num%id,            encoding=""str$id""        )    result = subprocess.run(        [""str$id"", *args],        cwd=entry_point,        stdout=subprocess.pipe,        stderr=subprocess.pipe,        timeout=num%id,        encoding=""str$id""    )    if not dont_stash:        subprocess.run(            [""str$id"", ""str$id"", ""str$id""],            cwd=entry_point,            stdout=subprocess.pipe,            stderr=subprocess.pipe,            timeout=num%id,            encoding=""str$id""        )    return resultasync def _git_stash_and_do(ctx, *args, dont_stash=false):    async with ctx.channel.typing():        completed_process = await neko.no_block(            __run_git_command,            args=[dont_stash, *args]        )        print(completed_process.stdout)        print(completed_process.stderr, file=sys.stderr)        stream = ""str$id"" if completed_process.returncode else ""str$id""        stream = getattr(completed_process, stream)        title = f""str$id""        if len(stream) > num%id:            pb = neko.paginatedbook(                title=title,                ctx=ctx,                max_size=num%id            )            pb.add_lines(stream)            await pb.send()        else:            await ctx.send(                embed=discord.embed(                    title=title,                    description=stream,                    color=0x9b2d09                )            )class owneronlycog(neko.cog):    ""str$id""""str$id""""str$id""    permissions = (neko.permissions.send_messages |                   neko.permissions.add_reactions |                   neko.permissions.read_messages |                   neko.permissions.manage_messages)    async def __local_check(self, ctx):        ""str$id""""str$id""""str$id""        return await ctx.bot.is_owner(ctx.author)    @neko.group(        name=""str$id"",        usage=""str$id"",        brief=""str$id"",        hidden=true,        invoke_without_command=true)    async def command_grp(self, ctx):        ""str$id""""str$id""""str$id""        book = neko.paginatedbook(title=""str$id"",                                   ctx=ctx)        for command in self.command_grp.commands:            book.add_line(command.name)        await book.send()    @command_grp.command(        name=""str$id"", aliases=[""str$id""],        brief=""str$id"")    async def stop_bot(self, ctx):        await ctx.send(""str$id"")        await ctx.bot.logout()    @command_grp.command(        name=""str$id"",        brief=""str$id""s you a bot invite.""str$id""load""str$id""loads a given extension into the bot.""str$id""extension.qualified.name""str$id""loaded `{fqn}` successfully in {delta:.num%id}ms""str$id""unload""str$id""unloads a given extension from the bot (and any related cogs).""str$id""extension.qualified.name|-c cogname""str$id""-c""str$id""cog was not loaded to begin with.""str$id""extension was not loaded to begin with.""str$id""unloaded `{fqn}` successfully via ""str$id""{func.__name__} in {delta:.num%id}ms""str$id""git""str$id""various version control tasks.""str$id""pull""str$id""executes `git pull`.""str$id""pull""str$id""checkout""str$id""executes `git checkout`.""str$id""checkout""str$id""log""str$id""executes `git log`.""str$id""log""str$id""-n""str$id""num%id""str$id""--oneline',            dont_stash=true        )setup = owneronlycog.mksetup(",command_injection,223
"                if obj:                    c.execute(query, obj)                else:                    c.execute(query)",sql_injection,6
"                        where player_id = ""str$id""""str$id"""" % player_id)",sql_injection,6
"    def execute(self, query):            self.cursor.execute(query)",sql_injection,4
"base_url = ""str$id""user = blueprint(""str$id"", __name__)@user.route(base_url + ""str$id"", methods=[""str$id""])",sql_injection,9
"	db = mysqldb.connect(host_name, user_name, user_pass, tabl_name)	print ""str$id""	result = cursor.fetchone()",sql_injection,11
            group_exam_ind=num%id,open_redirect,1
"    return render_template(""str$id"")    msg = request.form[""str$id""].replace(""str$id"", ""str$id"").replace(""str$id"", ""str$id"").replace(""str$id"", ""str$id"")    responses = [        ""str$id"",        ""str$id"",        ""str$id"",        ""str$id"",        ""str$id"",        ""str$id"",    ]    return render_template(""str$id"", msg=msg, resp=random.choice(responses))",xss,22
"from tornado.escape import json_encode, to_unicode    catch_bare_integrity_error, validation_message, basehandler",xsrf,8
"	print ""str$id"", forwardangle, currentgyro, angle",path_disclosure,5
"        ssh_cmd = ""str$id""",command_injection,3
"                    next=request.args.get(""str$id"", ""str$id"")",xsrf,2
"        ssh_cmd = ""str$id""",command_injection,3
"                tab = f + ""str$id"" + n._v_pathname",remote_code_execution,7
"			os.system(""str$id""+str(port)+""str$id"")			os.system(""str$id""+str(port)+""str$id"")",command_injection,2
        users_courselet = unit.objects.filter(addedby=self.request.user).last(),open_redirect,3
"def create_stats_picture(username):    a = list()    b = list()    leg = list()    sum = num%id            cursor.execute(""str$id"" + str(x[num%id]) + ""str$id"" + str(                x[num%id]) + ""str$id"")        a.append(pair(count, i))        sum += count    if sum == num%id:        return true    for i in range(len(a)):        if a[i].first / sum != num%id:            b.append(a[i].first / sum)            leg.append(a[i].second)    ax1.pie(b,  autopct=""str$id"",",sql_injection,51
"        query = ""str$id"" + user        cur.execute(query)        text_file = open(""str$id"", ""str$id"")        text_file.write(processedrow)    print hash_ids    hash = hashlib.sha1(""str$id"".join(hash_ids)).hexdigest()    if cache != none:            svd.load_data(filename=""str$id"",",sql_injection,21
"def pshtt_data_to_result(securedrop: directoryentry, pshtt_results: dict) -> scanresult:    ""str$id""""str$id""""str$id""        page, soup = request_and_scrape_page(securedrop.landing_page_url)        no_redirects_page, _ = request_and_scrape_page(            securedrop.landing_page_url, allow_redirects=false        )            securedrop=securedrop,            live=pshtt_results[""str$id""],    return scanresult(        landing_page_url=securedrop.landing_page_url,        live=pshtt_results[""str$id""],        http_status_200_ok=validate_200_ok(no_redirects_page),        forces_https=bool(pshtt_results[""str$id""]),        hsts=pshtt_results[""str$id""],        hsts_max_age=validate_hsts_max_age(pshtt_results[""str$id""]),        hsts_entire_domain=validate_hsts_entire_domain(pshtt_results[""str$id""]),        hsts_preloaded=pshtt_results[""str$id""],        subdomain=validate_subdomain(securedrop.landing_page_url),        no_cookies=validate_no_cookies(page),        safe_onion_address=validate_onion_address_not_in_href(soup),        no_cdn=validate_not_using_cdn(page),        http_no_redirect=validate_no_redirects(no_redirects_page),        expected_encoding=validate_encoding(page),        no_analytics=validate_not_using_analytics(page),        no_server_info=validate_server_software(page),        no_server_version=validate_server_version(page),        csp_origin_only=validate_csp(page),        mime_sniffing_blocked=validate_no_sniff(page),        noopen_download=validate_download_options(page),        xss_protection=validate_xss_protection(page),        clickjacking_protection=validate_clickjacking_protection(page),        good_cross_domain_policy=validate_cross_domain_policy(page),        http_1_0_caching_disabled=validate_pragma(page),        expires_set=validate_expires(page),        cache_control_set=validate_cache_control_set(page),        cache_control_revalidate_set=validate_cache_must_revalidate(page),        cache_control_nocache_set=validate_nocache(page),        cache_control_notransform_set=validate_notransform(page),        cache_control_nostore_set=validate_nostore(page),        cache_control_private_set=validate_private(page),        referrer_policy_set_to_no_referrer=validate_no_referrer_policy(page),    )def scan(securedrop: directoryentry, commit=false) -> scanresult:    securedrop_domain = url_to_domain(securedrop.landing_page_url)    pshtt_results = inspect_domains([securedrop_domain], {""str$id"": num%id})    result = pshtt_data_to_result(securedrop, pshtt_results[num%id])        result.securedrop = securedrop",open_redirect,76
"    resp = await test_cli.get(""str$id"", headers=headers)    resp = await test_cli.get(""str$id"", headers=headers)",sql_injection,10
"    @staticmethod    def test(self):            ""str$id"",            ""str$id"",            ""str$id"",            ""str$id"",            ""str$id"",            ""str$id"",            ""str$id"",    @staticmethod    def wafbypass(self):",command_injection,13
"    user_engine.execute(        ""str$id"".        format(endpoint_url))",sql_injection,3
"version_number = (num%id, num%id, num%id)",sql_injection,5
"            field=models.foreignkey(related_name=""str$id"", to=""str$id""),",sql_injection,2
        cursor = db.cursor()        cursor.execute(flows_per_ip),sql_injection,4
"        if self.request.get.get(""str$id"", none) is not none:            data[""str$id""] = self.request.get[""str$id""]",xss,9
            group_exam_ind=num%id,open_redirect,1
"    walkman.walk(board, row, col, ""str$id"")",path_disclosure,4
"            out, err = self._run_ssh(""str$id"" % fc_map_id)",command_injection,6
"      logger.info(""str$id"" % content)",xsrf,3
"    def __init__(self, proxy, attribute, relation_operation):",path_disclosure,5
"        if current_type == ""str$id"":",sql_injection,4
        response = self.client.get(url),xsrf,3
            command_to_page[cmd.qualified_name] = i + offset        try:            page_index = command_to_page[query]        except keyerror:,command_injection,11
"		cursor.execute(""str$id"" + classnospace + ""str$id"")",sql_injection,5
"                (""str$id"", models.onetoonefield(parent_link=true, primary_key=true, to=""str$id"", serialize=false, auto_created=true)),",sql_injection,6
"  token, user_id, servlet_path, now=none, timeout=token_timeout_sec):    now: time in seconds since th epoch.  defaults to the current time.        it is explicitly specified only in tests.",xsrf,24
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)",xsrf,6
"    def _run_ssh(self, command, check_exit=true, attempts=num%id):",command_injection,5
"        cursor.execute(""str$id""""str$id""%s:resignation""str$id""""str$id"", (other_player_name,game))",sql_injection,2
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,21
        print(self.filter_string),sql_injection,1
"def clear():	if os.name == ""str$id"":		os.system(""str$id"")	else:		os.system(""str$id"")",command_injection,9
"    query = ""str$id""+account_id+""str$id""    cur.execute(query)",sql_injection,4
"    rst = csr.execute(stmt, inputs)    parameters = ()        wh = ""str$id"" + str(int(author_id))        wh = ""str$id"" + str(int(series_id))        parameters += (s.encode(""str$id""),)        wh = ""str$id""",sql_injection,23
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,10
"        result = self._cli_run(""str$id"", none)",command_injection,4
"        listener = threading.thread(            args=(worker, q))        printer = threading.thread(            args=(q, ))        listener.daemon = true        listener.start()        printer.daemon = true        printer.start()",open_redirect,18
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
"          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {""str$id"": ""str$id""},          ),            {              ""str$id"": self.attributes,              ""str$id"": {""str$id"": ""str$id""},            },",xsrf,17
        for g in self.parent_groups:            g.clear_hosts_cache(),path_disclosure,5
"            with run_interactive_shell_command(""str$id"", shell=false):",command_injection,3
"		group by si.name order by days_since_last_order ""str$id""""",sql_injection,7
"                                 where t.project_id in (select unnest(projects_mapped) from users where id = {num%id})                                   and t.validated_by = {num%id}                          where t.project_id in (select unnest(projects_mapped) from users where id = {num%id})                            and t.mapped_by = {num%id}                   where p.id = c.project_id order by p.id desc""str$id""'.format(user_id)        results = db.engine.execute(sql)",sql_injection,41
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"    conn = db().execute(sql, false)    print tabulate(tournaments, headers=([""str$id"", ""str$id""]),    conn = db().execute(sql, false)",sql_injection,12
"            f""str$id""""str$id""""str$id""            update {carts_table}            set quantity = {quantity}            where user_id = {userid} and product_id = {productid};            cursor.execute(sql_query)",sql_injection,16
"  def testinvalidbuildurl(self):        re.compile(""str$id""  def testnonadmincanviewanalysisoffailureonunsupportedmaster(self):",xsrf,5
"    try:      with open(filename, ""str$id"", encoding=""str$id"") as thefile:          full_contents = thefile.read()          thefile.close()    except: # file name not exist      return none",path_disclosure,19
"        ext = self._helpers.analyzerequest(basepair).geturl().getpath().split(""str$id"")[-num%id]",command_injection,3
"                and post_like.userid=%d) as flag from users,post \                (select friendid from friends where userid =%d) or post.userid=%d )\                order by post.date desc;""str$id""%(postid)        result=sql.querydb(self.conn,sqltext)        sqltext=""str$id""%(postid)        result=sql.querydb(self.conn,sqltext)        sqltext=""str$id""%(postid,userid)        result=sql.insertdb(self.conn,sqltext)        sqltext=""str$id""%(postid,userid)        result=sql.deletedb(self.conn,sqltext)                values(%d,current_timestamp(num%id),""str$id"");""str$id""delete from post where post.postid=%d""%(postid)        result=sql.deletedb(self.conn,sqltext)",sql_injection,34
"        (onboarding.invite_somebody, onboarding_steps_default_template),",open_redirect,2
"        result = self._cli_run(""str$id"", none)",command_injection,4
  now = now or getroundedtime(),xsrf,5
"		web = webdriver.chrome()		print ""str$id""		return web",command_injection,7
        response = self.client.post(url),xsrf,3
"    record.create({""str$id"": ""str$id""}, id_=rec_uuid)",xss,3
"        data = {}        if task:            entry = task.to_dict()            entry[""str$id""] = {}            if task.guest:                entry[""str$id""] = task.guest.to_dict()            entry[""str$id""] = []            for error in task.errors:                entry[""str$id""].append(error.message)            entry[""str$id""] = {}            if task.sample_id:                sample = db.view_sample(task.sample_id)                entry[""str$id""] = sample.to_dict()            data[""str$id""] = entry        else:            return exception(""str$id"")        return data        db = database()",path_disclosure,46
"            out, err = self._run_ssh(""str$id"" % fc_map_id)",command_injection,6
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"                        next_2nd = next_2nd.upper()                    print next_arg                    print next_arg                    if next_arg == ""str$id"":                        self.filters.append((column, next_arg, ""str$id"" + next_2nd + ""str$id""))                    else:                        self.filters.append((column, next_arg, next_2nd))",sql_injection,22
"    url_helper.urllib2.urlopen(url, mox.ignorearg(),                               timeout=mox.ignorearg()).andreturn(                                   stringio.stringio(response))",xsrf,4
"        ""str$id"": get_working_directory(view)",path_disclosure,2
	if not is_admin(level = give_level):,xss,5
"	import get_leave_allocation_records, get_leave_balance_on, get_approved_leaves_for_period					_(""str$id"") + ""str$id"", 		_(""str$id"") + ""str$id"", ",sql_injection,10
"        self.insert_template = ""str$id""        self.update_template =  ""str$id""",sql_injection,6
"""str$id""""bibclassify text extractor.",remote_code_execution,3
        self.reply_lock = threading.lock(),remote_code_execution,3
		self.set_order_by(args)		self.check_sort_by_table(args.order_by),sql_injection,2
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"                (""str$id"", models.foreignkey(to=""str$id"")),                (""str$id"", models.foreignkey(to=""str$id"")),",sql_injection,4
"from flask import blueprint, request, redirect, jsonify, abortfrom modules.profilemanager.api.db_methods import db_isauthdatavalid, db_addprofile, db_getprofileinfo, db_getuserid, \    db_setlastvisitfrom modules.sessioncontrol.app import initredis_db, generatesessionfrom hashlib import sha256import jsonschema",sql_injection,24
"                if ""str$id"" in runtime_config.benchmark:                    self.benchmark_pca = config_str_to_bool(runtime_config.benchmark[""str$id""])",remote_code_execution,7
"            field=models.foreignkey(help_text=""str$id"", to=""str$id"", null=true, blank=true),",sql_injection,4
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)",xsrf,17
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""openstack\""str$id""                           ""str$id"")        show_3par_cmd = ""str$id""",command_injection,10
def whitelist(users: str):        call(whitelist_command_template.format(user)),command_injection,4
"    req = ""str$id"".format(cfg(""str$id""), poll_name)    admtok = queryone(c, req)    req = ""str$id"".format(cfg(""str$id""), poll_name)    tmp = queryone(c, req)",sql_injection,16
    return freq_shop_id    user = query.find_customer(username)        return user[num%id],sql_injection,7
"        cmd = ""str$id"" % src_name            cmd += ""str$id"" % snap_cpg            cmd += ""str$id""            cmd += cpg + ""str$id""        cmd += dest_name        self._cli_run(cmd, none)",command_injection,23
"            rel_path = relpath(path, self.base_directory_path)            path_basename = basename(path)            if rel_path != ""str$id"" and not self.directory_filter(path_basename):                continue",path_disclosure,15
"            f""str$id""""str$id""""str$id"")",sql_injection,1
"from django.utils import timezone, safestringfrom django.forms import modelformfrom dashboard.forms import (productpucform, productlinkform,                             bulkproductpucform, bulkproducttagform,                             bulkpucform, productform)from taggit.forms import tagfieldfrom taggit_labels.widgets import labelwidgetclass filteredlabelwidget(labelwidget):    def tag_list(self, tags):        puc = self.form_instance.instance.get_uber_puc() or none        qs = self.model.objects.filter(content_object=puc,assumed=false)        filtered = [unassumed.tag for unassumed in qs]        return [(tag.name, ""str$id"" if tag.name in tags else ""str$id"")                for tag in filtered]class producttagform(modelform):    tags = tagfield(required=false, widget=filteredlabelwidget(model=puctotag))    class meta:        model = product        fields = [""str$id""]    def __init__(self, *args, **kwargs):        super(producttagform, self).__init__(*args, **kwargs)        self.fields[""str$id""].widget.form_instance = self",open_redirect,77
"from pyshacl.consts import sh, rdfs_subclassof, rdf_typesh_class = sh.term(""str$id"")    definition:        if len(class_rules) > num%id:            raise runtimeerror(""str$id"")        self.class_rule = class_rules[num%id]    def evaluate(self, target_graph, value_nodes):        :type value_nodes: list | set        for f in value_nodes:            t = target_graph.objects(f, rdf_type)            for ctype in iter(t):                if ctype == self.class_rule:                    continue                subclasses = target_graph.objects(ctype, rdfs_subclassof)                if self.class_rule in iter(subclasses):                    continue            fails.append(f)        if len(fails) > num%id:            return false, fails        return true, none",path_disclosure,64
"		group by si.name order by days_since_last_order ""str$id""""",sql_injection,7
          print(node_id),path_disclosure,1
    except:,sql_injection,1
            self.clear_all_cookies(),xsrf,1
"              endpoint, task",open_redirect,2
"        ssh_cmd = ""str$id"" % host_name",command_injection,5
"        ssh_cmd = ""str$id"" % cmd",command_injection,5
"        ssh_cmd = ""str$id"" % vdisk_name        ssh_cmd = ""str$id"" % vdisk_name",command_injection,10
"                ar.notes = str(request.post[str(""str$id"" + str(art.id))])",xss,5
"    out = run_shell_command(""str$id"")[num%id]    out = run_shell_command(""str$id"")[num%id]",command_injection,6
"    old = ""str$id""",sql_injection,3
        issue an http request with proper cookie handling,xsrf,8
            db.add_translation(args.translationid),sql_injection,1
"        ssh_cmd = (""str$id""                   % {""str$id"": chap_secret, ""str$id"": host_name})",command_injection,8
            if not reqid in self.response_handlers:,remote_code_execution,5
"    update_onboarding_step(onboarding.step_5, instance.addedby.id)",open_redirect,2
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"from mock import magicmock, patchfrom six.moves.urllib_parse import quote_plusfrom invenio.testsuite import make_test_suite, run_test_suite",xsrf,12
"    ""str$id""""extract keywords from the list of strings",remote_code_execution,7
"        for row in cursor.execute(""str$id"" + str(i) + ""str$id"" + gettitle(submission) + ""str$id"" + str(getdate(submission)) + ""str$id""):",sql_injection,16
"        cmd = cmd + ""str$id"" + args",command_injection,7
            i = num%id                i += num%id                if i == num%id: new_cost += num%id.num%id,path_disclosure,13
"                 redirect_worker_output=false,",open_redirect,1
        response = self.client.post(url)        response = self.client.get(url),xsrf,6
"    conn = connect()    c = conn.cursor()    c.execute(""str$id"")    results = c.fetchall()    conn.commit()    conn.close()    return results",sql_injection,14
"                                     ""str$id"", (p2_code,))",sql_injection,2
"    if request.args.get(""str$id"", none):        return redirect(request.args.get(""str$id""))",xsrf,5
            user.displayname = displayname            user.notes = notes,xss,6
"    cursor.execute(""str$id"" % (name,));",sql_injection,3
"step_2 = ""str$id""step_8 = ""str$id""",open_redirect,5
"                maint_int=armppi(num=num%id))                self.gic,",command_injection,2
"    c.execute(""str$id"" % (table,))",sql_injection,3
"        ssh_cmd = ""str$id""",command_injection,3
"        if self.req.startswith(""str$id""):            static_path = os.path.join(e.mod, ""str$id"", self.req.split(""str$id"")[num%id][num%id:])        args = {}        vpath = self.req[num%id:]        if ""str$id"" in vpath:            vpath, arglist = vpath.split(""str$id"", num%id)            for k in arglist.split(""str$id""):                if ""str$id"" in k:                    k, v = k.split(""str$id"", num%id)                    args[k.lower()] = v.strip()                else:                    args[k.lower()] = true        if vpath == ""str$id"" and not args:                    vpath = self.rvol[num%id]                    vpath = self.wvol[num%id]        readable = vpath in self.rvol        writable = vpath in self.wvol            self.log(""str$id"".format(vpath))            args = {""str$id""}        self.vpath = vpath        self.args = args",path_disclosure,75
"    date = fields.date(string=""str$id"", index=true)    activity_id = fields.many2one(""str$id"", string=""str$id"", index=true)    place_id = fields.many2one(""str$id"", string=""str$id"", index=true)    rancge = fields.char( string=""str$id"", index=true)    child_id = fields.many2one(""str$id"", string=""str$id"", index=true)",sql_injection,24
    fp = urllib.urlopen(url)    f = stringio.stringio(fp.read())  finally:    if fp:      fp.close(),open_redirect,10
from urllib import quote,xss,4
"        doc, extra=edit, can_delete=edit)        extracted_text = extractedtext.objects.get_subclass(pk=doc.pk)         extracted_text_form = parentform(instance=extracted_text)        colors = [""str$id"", ""str$id"", ""str$id""] * num%id        color = (hex for hex in colors)        for form in child_formset.forms:            form.color = next(color)",open_redirect,30
import bleach,sql_injection,2
"            field=models.foreignkey(blank=true, related_name=""str$id"", null=true, to=""str$id""),",sql_injection,4
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"        payload = ""str$id"" % self.url        return payload",xss,7
"        query = ""str$id"" + subject + ""str$id""        cur.execute(query)        query = ""str$id""+str(index)        cur.execute(query)",sql_injection,12
            target_dir_rp = os.path.realpath(target_dir),path_disclosure,3
you can also put the connection string into a setup.cfg file in the root of the project(the same one setup.py would use) like so:,path_disclosure,24
"import datetimeimport loggingimport sysimport timeimport unittestimport test_env_bot_codetest_env_bot_code.setup_test_env()import net_utilsimport xsrf_clientclass urlhelpertest(net_utils.testcase):  def setup(self):    super(urlhelpertest, self).setup()    self.mock(logging, ""str$id"", lambda *_: none)    self.mock(logging, ""str$id"", lambda *_: none)    self.mock(logging, ""str$id"", lambda *_: none)    self.mock(logging, ""str$id"", lambda *_: none)    self.mock(time, ""str$id"", lambda _: none)  def testxsrfremoteget(self):    self.expected_requests([(""str$id"", {}, ""str$id"", none)])    remote = xsrf_client.xsrfremote(""str$id"")    self.assertequal(""str$id"", remote.url_read(""str$id""))  def testxsrfremotesimple(self):    self.expected_requests(        [          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {              ""str$id"": num%id,              ""str$id"": ""str$id"",            },          ),          (            ""str$id"",            {""str$id"": {""str$id"": ""str$id""}, ""str$id"": {""str$id"": ""str$id""}},            ""str$id"",            none,          ),        ])    remote = xsrf_client.xsrfremote(""str$id"")    self.assertequal(""str$id"", remote.url_read(""str$id"", data={""str$id"": ""str$id""}))  def testxsrfremoterefresh(self):    self.expected_requests(        [          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {              ""str$id"": num%id,              ""str$id"": ""str$id"",            },          ),          (            ""str$id"",            {""str$id"": {""str$id"": ""str$id""}, ""str$id"": {""str$id"": ""str$id""}},            ""str$id"",            none,          ),          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {              ""str$id"": num%id,              ""str$id"": ""str$id"",            },          ),          (            ""str$id"",            {""str$id"": {""str$id"": ""str$id""}, ""str$id"": {""str$id"": ""str$id""}},            ""str$id"",            none,          ),        ])    now = xsrf_client._utcnow()    remote = xsrf_client.xsrfremote(""str$id"")    remote.url_read(""str$id"", data={""str$id"": ""str$id""})    self.mock(        xsrf_client, ""str$id"", lambda: now + datetime.timedelta(seconds=num%id))    remote.url_read(""str$id"", data={""str$id"": ""str$id""})  def testxsrfremotecustom(self):    self.expected_requests(        [          (            ""str$id"",            {              ""str$id"": {""str$id"": ""str$id""},              ""str$id"": {""str$id"": ""str$id""},            },            {              ""str$id"": num%id,              ""str$id"": true,              ""str$id"": ""str$id"",            },          ),          (            ""str$id"",            {""str$id"": {""str$id"": ""str$id""}, ""str$id"": {""str$id"": ""str$id""}},            ""str$id"",            none,          ),        ])    remote = xsrf_client.xsrfremote(        ""str$id"",        ""str$id"")    remote.xsrf_request_params = {""str$id"": ""str$id""}    self.assertequal(""str$id"", remote.url_read(""str$id"", data={""str$id"": ""str$id""}))if __name__ == ""str$id"":  logging.basicconfig(level=logging.error)  unitt",xsrf,214
"            ""str$id"": xsrf_cookies,            ""str$id"": {""str$id"": true}",xsrf,5
"from flask import request, redirect, url_for, render_template, flash, g, current_app",open_redirect,10
"	form = registerform(request.form)	if request.method == ""str$id"" and form.validate():		conn = mysql.connection		cur = conn.cursor()		username = form.username.data		first_name = form.firstname.data		last_name = form.lastname.data		email = form.email.data		password = sha256_crypt.hash(form.password.data)		rv = cur.execute(""str$id""""str$id""""str$id"", (first_name, last_name, username, password, email ))		conn.commit()		if str(rv):			return redirect(url_for(""str$id""))	else:		return render_template(""str$id"", form=form)	form = loginform(request.form)	if request.method == ""str$id"" and form.validate():		conn = mysql.connection		cur = conn.cursor()		cur.execute(""str$id""""str$id""%s""str$id""""str$id"" % str(form.username.data) )		rv = cur.fetchall()		if sha256_crypt.verify(form.password.data, str(rv[num%id][""str$id""])):			user = user(rv[num%id][""str$id""])			user.authenticate(form.username.data)			login_user(user)		else:			return ""str$id""		flash(""str$id"")		next = request.args.get(""str$id"")		if not is_safe_url(next):			return abort(num%id)		return redirect(next or url_for(""str$id""))	else:		return render_template(""str$id"", form=form)",sql_injection,98
"        self._cli_run(""str$id"", none)",command_injection,2
"        print(""str$id"")",sql_injection,1
"""str$id""""str$id""""str$id""from flask import blueprint, abort, current_app, url_for, request    make_handler, disconnect_handler, oauth_logout_handler",xsrf,11
"        user_id=get_token(resp.text, ""str$id"")        my_ads_url = ""str$id"".format(user_id)",xsrf,5
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"from lxml import htmlfrom importlib import import_modulefrom django.test import clientfrom dashboard.views.data_group import extractionscriptform, datagroupformfrom django.core.files.uploadedfile import simpleuploadedfilefrom django.test import clientfrom importlib import import_module",open_redirect,23
"    response = requests.get( _builduri( ""str$id"" ) )",remote_code_execution,7
"    return psycopg2.connect(""str$id"")",sql_injection,2
"            out, err = self._run_ssh(""str$id"" % fc_map_id)",command_injection,6
"from snakemake.exceptions import missingoutputexception, workflowerror, wildcarderror",remote_code_execution,6
"        ssh_cmd = ""str$id""",command_injection,3
"from flask import blueprint, request@messages_module.route(""str$id"")def send_message():        return db_sendmessage(request.get_json())@messages_module.route(""str$id"")@messages_module.route(""str$id"")def get_message(dialog_id):",sql_injection,9
from django.core.exceptions import validationerrorfrom dashboard.tests.loader import load_model_objects,open_redirect,7
"    server = xsrf_client.xsrfremote(""str$id"")    server = xsrf_client.xsrfremote(""str$id"")",xsrf,6
"    def  __init__ (self, cache_dir=""str$id"", expires=timedelta(days=num%id), compress=true):",sql_injection,6
                                                         stdin=stdin_input),command_injection,1
"@receiver(post_save, sender=invite)def onboarding_invite_created(sender, instance, **kwargs):    update_onboarding_step(onboarding.step_8, instance.instructor.use",open_redirect,7
"        csessid = request.args.get(""str$id"")[num%id]",xss,3
                self._session.cookies.clear()                self._session.cookies.save(),xsrf,2
"			os.system(""str$id""+str(port)+""str$id"")			os.system(""str$id""+str(port)+""str$id"")",command_injection,2
			return,command_injection,1
you can also put the connection string into tmp/setup.cfg like so:,path_disclosure,11
"             ""str$id""",sql_injection,1
"        resp = requests.get(""str$id"")",sql_injection,3
"        ssh_cmd = ""str$id"" % pool",command_injection,5
	gavgcaparray = gavgcaparray + [simattack(paths)]larray = range(num%id),path_disclosure,7
"    if syscall_name not in syscalls.keys():        raise valueerror(""str$id"")",command_injection,7
"    conn = db().execute(sql, false)",sql_injection,4
        if not user or not user.is_authenticated():,sql_injection,6
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"            query = ""str$id"".format(data)                cursor.execute(query)",sql_injection,4
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"        response = self.client.post(url)        response = self.client.get(url, content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,16
"        self.assertequal(self.client.post(url).status_code, num%id)        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)        response = self.client.post(url)        response = self.client.post(url, content_type=""str$id"")            url, json.dumps(body), content_type=""str$id"")            url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,37
"from django.shortcuts import get_object_or_404, render",open_redirect,5
"        if ""str$id"" in line:            ip = line.split()[-num%id].split(""str$id"")[-num%id]            if ip not in ips:                ips[ip] = num%id                print(ip)                sys.stdout.flush()            else:                ips[ip] += num%id            if ip not in banned and ips[ip] >= config.count:                banned.add(ip)                cmd = ""str$id"" % ip                print(cmd, file=sys.stderr)                sys.stderr.flush()                os.system(cmd)",command_injection,40
"        if settings.test_browser == ""str$id"":            self.browser = webdriver.firefox()        else:            self.browser = webdriver.chrome()",open_redirect,11
"                self.sos_cmd += ""str$id"" % skipln",command_injection,5
"                                vrf=srct[""str$id""][""str$id""], l2path=l2path)",path_disclosure,2
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,16
"  name = name.lower()  politician = none  for p in politicians:    politician = p  if politician != none:    return render_template(""str$id"", q = name, politician = politician)",open_redirect,25
            return num%id,remote_code_execution,2
		print len(self.problems),open_redirect,2
        response = self.client.post(url),xsrf,3
"                    corrupted = false # hack                    if not tile is level:                        try:                            index = unprocessed.index(tile[""str$id""])                            unprocessed.pop(index)                        except:                            corrupted = true # hack                     setlist.write(tile[""str$id""] + ""str$id"")                if corrupted: # hack                    print ""str$id""                    for tile in adjacent_group:                        print ""str$id"", tile[""str$id""]                 edges = level[""str$id""]                setlist.write(level[""str$id""] + ""str$id"")                    index, found = find(target)                    if found:                        queue.append(unprocessed.pop(index))            if edges:                for edge_path in edges:                    if edge_path:                        edge_index, edge_level = find(edge_path)                        if edge_level and random.random() < edge_odds:                            queue.append(unprocessed.pop(edge_index))    if boring:        print ""str$id""boring\""str$id""        for level in boring:            print ""str$id"", level[""str$id""]    if duplicates:        print ""str$id""        for level in duplicates:            print ""str$id"", level[""str$id""]",path_disclosure,91
"    query = ""str$id"".format(sortorder)        query, (sortby,)",sql_injection,5
"  def __init__(self, filename):    self.path = os.path.dirname(filename)    self.title = re.search(r""str$id"",filename).group(num%id).strip()    self.log()",path_disclosure,10
from datetime import timedelta,remote_code_execution,4
"                    getattr(plt, ""str$id"".format(a))(eval(r))",remote_code_execution,2
"		command = ""str$id"".format(table_name,pth)		data = self._run_command(command)",sql_injection,6
"from pages.api.surveys import surveysapihandler, singlesurveyapihandlerfrom pages.debug import debugloginhandler, debuglogouthandler",xsrf,9
"            orders[re_match[num%id]] = (request.args.get(arg), request.args.get(""str$id"" + re_match[num%id]))",sql_injection,6
                           user_email_with_tags=user_email_with_tags),xsrf,1
"	def submittestcase(self,suffix,mime,payload=none,codeexecregex=none) :		fu = self.uploadfile(suffix,mime,payload)",remote_code_execution,6
print(field_names),sql_injection,1
"        db().execute((sql % data), true)        db().execute((sql % data), true)",sql_injection,8
import tempfileimport urllib2,remote_code_execution,3
"    def update_find_by(self, key, value,id):        query=query.format(self.table_name, key, self.escapedstring(value),id)",sql_injection,7
"                ""str$id""+account_id+""str$id""+account_name+""str$id""+referrer+""str$id""+str(referrer_rewards_percentage)+""str$id""+lifetime_referrer+""str$id""+str(lifetime_referrer_fee_percentage)+""str$id""        cur.execute(query)",sql_injection,2
"    ""str$id""""str$id""""str$id""        next=request.args.get(""str$id"") or request.referrer or none,    return oauth.remote_apps[remote_app].authorize(callback=callback_url)    ""str$id""""str$id""""str$id""    ""str$id""""str$id""""str$id""",xsrf,10
"    def _set_redirect_uri(self):        next_uri = self.get.get(""str$id"")        if next_uri is not none:            self.session.data[""str$id""] = next_uri    set_redirect_uri = _set_redirect_uri",open_redirect,16
"                command += ""str$id"" % random.choice(dst)                                                         env=dict(os.environ,                                                                  path=self._script_path,                                                                  x509_user_proxy=proxyfile.name))",command_injection,8
"    students = student.objects.raw(""str$id""""str$id""\""str$id"")",sql_injection,3
"							response.add_action(self.send_message(line))",command_injection,1
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"    req = ""str$id"".format(cfg(""str$id""), poll_name)    tmp = queryone(c, req)",sql_injection,8
from django.test import client,open_redirect,4
"    self.fail(""str$id"" % url)",xsrf,3
"            mailer.mail_user(user_data, subject, body)",open_redirect,3
"    response = requests.get( _builduri( ""str$id"" ) )",remote_code_execution,7
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"    query_string = ""str$id""""        from pub_2018, plainto_tsquery(""str$id"", ""str$id"") query  -- or try plainto_tsquery, phraseto_tsquery, to_tsquery",sql_injection,14
"        cv2.circle(self.frame_original, tuple(self.balltracker_result), num%id, (num%id, num%id, num%id), -num%id)",path_disclosure,7
"        query = ""str$id"".format(table_name)",sql_injection,3
        response = self.client.get(url),xsrf,3
"    ""str$id""""str$id""""str$id""",remote_code_execution,1
"                       ""str$id"", (player[num%id],))                       ""str$id"", (player[num%id],))",sql_injection,4
    utils.removeifexists( self._temp_options_filename ),remote_code_execution,3
"    ""str$id""""str$id""""str$id""",remote_code_execution,1
"        c1.execute(""str$id"" % u_keynum)",sql_injection,3
"  c.execute(""str$id"" % content)",sql_injection,3
"                                               ""str$id"": ""str$id"",",open_redirect,2
"            with open(self.cache_file(self.plugin_cache_file), ""str$id"") as f:                x = data1.text.encode(""str$id"", ""str$id"")            with open(self.cache_file(self.version_cache_file), ""str$id"") as f:                x = data2.text.encode(""str$id"", ""str$id"")            self.logger.error(""str$id"" % str(e))",sql_injection,21
"        self.cursor.execute(""str$id""%(money, user_id))        self.cursor.execute(""str$id"" % (money, project_id))        self.cursor.execute(""str$id"" % (project_id, user_id, money))        self.cursor.execute(""str$id"" % (project_id, user_id, money))        self.cursor.execute(""str$id"" % project_id)        self.cursor.execute(""str$id"" % (user_id, money))",sql_injection,23
"  resp = swarming_server.url_read_json(      ""str$id"" % params[""str$id""], data=params)",xsrf,7
    simulationmode = false    #czy uruchomic program w trybie symulacji? wymaga rowniez zmiany w servocontrollermodule.py oraz w imageprocessingmodule.py,path_disclosure,17
"        was_prev_closed = pd.read_sql(f""str$id"", conn).iloc[num%id].closed        update_status_query = ""str$id""            conn.cursor().execute(update_status_query.format(job_number))",sql_injection,8
"    cursor.execute(""str$id"" % match)",sql_injection,3
"		for row in self.cursor.execute(""str$id"" % from_date_added):",sql_injection,6
def run_command(id):    return commands.run(id),command_injection,4
"from twisted.application import service, strports",xsrf,5
"			elif re.compile(""str$id"").match(field):",sql_injection,2
"            data = input(""str$id"") or ""str$id""",command_injection,5
from tkinter import *,xsrf,4
"        forceflag = ""str$id"" if force else ""str$id""        cmd_params = {""str$id"": forceflag, ""str$id"": name}        ssh_cmd = ""str$id"" % cmd_params",command_injection,18
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,36
from cookielib import mozillacookiejar,xsrf,4
"        if settings.test_browser == ""str$id"":            self.browser = webdriver.firefox()        else:            self.browser = webdriver.chrome()",open_redirect,11
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,3
"        show_vlun_cmd = ""str$id""",command_injection,3
"        cmd = ""str$id"" % host_name",command_injection,5
"    url(r""str$id"",        root_redirect,        name=""str$id""),",open_redirect,3
"                (""str$id"", models.onetoonefield(auto_created=true, primary_key=true, serialize=false, parent_link=true, to=""str$id"")),                (""str$id"", models.foreignkey(to=""str$id"")),",sql_injection,8
"            f""str$id""""            from {products_table} as p inner join {products_types_table} as pt on            where p.rating >= {filters[""str$id""]}            and pt.name = ""str$id""            order by p.id limit {offset}, {filters[""str$id""]}            cursor.execute(sql_query)",sql_injection,26
"        self._cli_run(""str$id"" %                      (cli_qos_string, vvs_name), none)            self._cli_run(""str$id"" % (vvs_name,                                                      volume_name), none)            self._cli_run(""str$id"" % (domain,                                                         vvs_name), none)            self._cli_run(""str$id"" % (vvs_name,                                                      volume_name), none)        self._cli_run(""str$id"" % (vvs_name), none)        self._cli_run(""str$id"" % (vvs_name), none)        self._cli_run(""str$id"" % (vvs_name, volume_name), none)",command_injection,33
"    def runoperation(self, operation):            yield self.connection.runoperation(operation)            print(""str$id"" %operation)    def runquery(self, query):            answer = yield self.connection.runquery(query)            print(""str$id"" %query)",sql_injection,16
"            ""str$id"":{            },        }",sql_injection,3
                q = q.order_by(announce.created.desc()),xsrf,3
"		(id, upc, name, imageuri) = controller.get_result()		load = image.open(imageuri)		render = imagetk.photoimage(load)				img_label = tk.label(self, image=render)		img_label.image = render		img_label.pack(side=""str$id"")		name_label = tk.label(self, text=""str$id"" + name, font=controller.titlefont)		name_label.pack(pady=num%id, padx=num%id, anchor=""str$id"")		upc_label = tk.label(self, text=""str$id"" + upc, font=controller.itemfont)		upc_label.pack(pady=num%id, padx=num%id, anchor=""str$id"")		new_search_button = tk.button(self, text=""str$id"",			font=controller.itemfont, command=lambda: self.new_search())		new_search_button.pack(side=""str$id"", pady=num%id, padx=num%id, anchor=""str$id"")		exit_app_button = tk.button(self, text=""str$id"", 		exit_app_button.pack(side=""str$id"", pady=num%id, padx=num%id, anchor=""str$id"")	def new_search(self):		self.controller.remove_frame(searchpage)		new_frame = self.controller.create_frame(searchpage)",sql_injection,65
"            ssh_cmd = ""str$id"" % node[""str$id""]",command_injection,5
simulationmode = false,path_disclosure,3
"            lucene = lucene[whitespace_index+num%id:].lstrip()            print(""str$id"" + field_name)            print(""str$id"" + field_value)            print(""str$id"" + field_name + ""str$id"" + field_value)parser = luceneparserparser.parse(""str$id"", ""str$id"")",sql_injection,19
"            values ({}, ""str$id"", {})            values ({}, ""str$id"", {})                conn.cursor().execute(fake_dilfo_insert.format(job_number, was_prev_closed))                    conn.cursor().execute(fake_match_insert.format(job_number, num%id))                    conn.cursor().execute(fake_match_insert.format(job_number, num%id))            df_dilfo_pre = pd.read_sql(f""str$id"", conn)            df_matched_pre = pd.read_sql(f""str$id"", conn)            df_dilfo_post = pd.read_sql(f""str$id"", conn)            df_matched_post = pd.read_sql(f""str$id"", conn)",sql_injection,30
"    def test_extracted_text_qa_notes(self):        self.objects.extext.qa_edited = true        note = qanotes.objects.create(extracted_text=self.objects.extext)        self.assertequal(note.qa_notes, none)        self.assertraises(validationerror, note.clean)",open_redirect,12
"        eq_(self.terminal.method_calls, [(""str$id"", (""str$id"",), {})])",path_disclosure,4
"    print ""str$id"".format(sanitized_page_name)    query = ""str$id"".format(sanitized_page_name)    self.cursor.execute(query)",sql_injection,6
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"        year = request.form.getlist(""str$id"")        ipeds = request.form.getlist(""str$id"")",sql_injection,6
"    req = ""str$id"".format(cfg(""str$id""), token)    answer = queryall(cursor, req)    req = ""str$id""{}\""str$id"".format(cfg(""str$id""), adm_token)    answer = queryone(c, req)    req = ""str$id"".format(cfg(""str$id""), adm_token)    answer = bool(queryone(c, req))    req = ""str$id"".format(cfg(""str$id""), token)    answer = bool(queryone(c, req))    req = ""str$id"".format(cfg(""str$id""), token)    answer = queryone(c, req)        req = ""str$id"".format(cfg(""str$id""), token)        answer = queryone(c, req)    req = ""str$id"".format(cfg(""str$id""), poll_name)    return queryone(cursor, req) == num%id;    req = ""str$id"".format(cfg(""str$id""), key)    cursor.execute(req)    req = ""str$id"".format(cfg(""str$id""), poll_name)    ret = queryone(c, req) == num%id",sql_injection,72
"    return browser.do_request(aws_base_url + path, args, files)",xsrf,6
                self.w.p.poll(),remote_code_execution,1
"def get_subjects():    query = ""str$id""    cur.execute(query)",sql_injection,6
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,10
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"                    folder=self.get_root_path(),",path_disclosure,1
"        node, key = traverse(self, path, sep=self._sep,                             on_missing=self._create_on_missing)        if node is self:            self._data[key] = value        node, key = traverse(self, path, sep=self._sep,                             on_missing=raise_on_missing)        if node is self:            return self._data[key]        node, key = traverse(self, path, sep=self._sep,                             on_missing=raise_on_missing)        if node is self:            del self._data[key]",path_disclosure,40
"__version__ = ""str$id""",path_disclosure,3
"                       f""str$id""",sql_injection,1
"            tab_title = self.create_tab_title_from_filepath(                filechooser_opening_dialog.get_filename())            self.start_database_opening_routine(                tab_title, filechooser_opening_dialog.get_filename())",open_redirect,7
"        content = self.st_db.execute(""str$id"" % uuid_)",sql_injection,5
"    response = self.test_app.get(""str$id"", params={""str$id"": build_url})    self.assertequals(num%id, response.status_int)  def testanyonecanrequestanalysisoffailureonsupportedmaster(self, mock_fn):",xsrf,10
"                self.sos_cmd += ""str$id"" % only",command_injection,5
"                     headers=client.jsonrestclient._default_headers,",xsrf,1
"		command = ""str$id"".format(table_name, pth)		data = self._run_command(command)",sql_injection,7
        except redis.connectionerror:            pass,open_redirect,3
  now = now or int(time.time()),xsrf,5
"            data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
"            self._append(""str$id"", ""str$id"".format(s, self.rw[i], self.rs[i], self.rc[i]) if s else none)",remote_code_execution,9
"def player_in_url(db, player, urls):",sql_injection,4
"        embed.description = ""str$id""        await self.simple_embed(""str$id"")",command_injection,5
        if self.token_authenticated:,xsrf,2
"                                 ""str$id"",",command_injection,1
        response = self.client.post(url)        response = self.client.get(url),xsrf,6
"        cookie_file = os.path.expanduser(""str$id"")        cookie_dir = os.path.dirname(cookie_file)        self.cookies = mozillacookiejar(cookie_file)        if not os.path.isdir(cookie_dir):            os.mkdir(cookie_dir, num%id)        if os.path.isfile(cookie_file):            self.cookies.load()            self.cookies.clear_expired_cookies()            self.cookies.save()",xsrf,19
"    query = db.query(""str$id"" % page_name)",sql_injection,5
    def get(self):    def post(self):        pass,sql_injection,5
"        global should_tweet        sql = ""str$id""        res = self.db.exec(sql)        if res[num%id][num%id] == num%id:            should_tweet = true",sql_injection,15
"    sql_table_exists = ""str$id""",sql_injection,3
"dataset = pd.read_csv(""str$id"")",remote_code_execution,3
    if design and points.user.is_authenticated():,sql_injection,4
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id"")        show_host_cmd = ""str$id""",command_injection,10
"          ""str$id"": {""str$id"": ""str$id""},",xsrf,3
"                get_results.process(bracket, scene, self.db, display_name)                self.insert_placing_data(bracket, new_bracket)        log.info(""str$id"".format(bracket))",sql_injection,7
"            cursor.execute(""str$id""""str$id""""str$id"" % (target, status, str(botnetid)))",sql_injection,5
class adbproxy():,command_injection,2
"            data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"                onboarding.invite_somebody: {                    ""str$id"": ""str$id"",                    ""str$id"": ""str$id"",                    ""str$id"": ""str$id""                },",open_redirect,9
"    @throttle(min_time_between_updates)        ""str$id""""str$id""""str$id""        import pyatmo        self.station_data = pyatmo.weatherstationdata(self.auth)        if self.station is not none:            self.data = self.station_data.lastdata(                station=self.station, exclude=num%id)        else:            self.data = self.station_data.lastdata(exclude=num%id)",remote_code_execution,21
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"", help_text=b""str$id"")),                (""str$id"", models.foreignkey(to=""str$id"")),",sql_injection,6
        self.cursor.execute(self.sql_create_json_table % table_name)        self.cursor.execute(self.sql_drop_json_table % table_name),sql_injection,6
"        result = self.common._cli_run(""str$id"", none)",command_injection,4
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id"")",command_injection,7
"    name = fields.char(help=""str$id"", required=true, translate=true, size=num%id)        default=num%id, help=""str$id""",sql_injection,8
"    sql = ""str$id""+str(player)+""str$id""    result = db.exec(sql)",sql_injection,6
"        none,        ""str$id"",",xsrf,2
		for i in range(self.size):,path_disclosure,4
"        cmd = ""str$id"" % host_name",command_injection,5
"            user = table.filter_by(email=none, user_id=user_id)",sql_injection,4
"from snakemake.io import protected, temp, temporary, expand, dynamic, glob_wildcards, flag, not_iterable, touch",remote_code_execution,12
"      (        ""str$id"",        {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},        {""str$id"": ""str$id""},      ),",xsrf,10
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,9
"        sql = ""str$id""""str$id""""str$id"".format(project_id)        result = db.engine.execute(sql)",sql_injection,6
"        query = (""str$id""                 ""str$id"" %                 (self.table, nowstr, expiresstr, sid)        self._query(query)",sql_injection,10
"        self.env_var_override.set(""str$id"", ""str$id"")            self.assertequal(suite.cmd, self._expected_command(name=name, verify_xss=true))",xss,5
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"def check_authorization(request):  if request.user.is_staff or request.user.is_superuser:    return true  keystr = request.request.get(""str$id"")",xsrf,11
"    with _system_engine.connect().execution_options(            isolation_level=""str$id"") as conn:        conn.execute(f""str$id"")        conn.execute(f""str$id"")",sql_injection,7
"        ssh_cmd = ""str$id"" % host_name",command_injection,5
"    cur.execute(""str$id"")",sql_injection,1
"    def _cmd_to_dict(self, cmd):        arg_list = cmd.split()",command_injection,6
"	def set_order_by(self, args):		meta = frappe.get_meta(self.doctype)",sql_injection,6
"  def update(self, user, is_admin, **kwargs):",xsrf,5
"			if port == ""str$id"":port = num%id",command_injection,6
"""str$id"""" configuration variables for defining remote applications.",xsrf,7
"            return rc_user_error            return rc_runtime_error            return rc_user_error            return rc_user_error            print ""str$id""            print        return num%id",remote_code_execution,13
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url)",xsrf,6
"root = [""str$id"", ""str$id"", ""str$id""]dirs = []path = []curr_path = [] or [""str$id"", ""str$id"", ""str$id""]# to create directorydef mkdir():    global dirs    if dir in dirs:        print(""str$id"")    else:        dirs.append(dir)        path.append(dir)# shows directorydef ls():    global path    if path == root:        path = dirs        path = path[num%id]    print(*path, sep=""str$id"")# change directorydef cd():    global curr_path, dir, path    if dir == ""str$id"":        curr_path = root        path = root    elif dir in dirs:        curr_path.append(dir)        path.clear()    elif dir == ""str$id"":        curr_path.pop()        print(*curr_path, sep=""str$id"")        i = len(dirs) - num%id        if dirs[i] in path:            i = i - num%id            path.pop()            path.append(dirs[i])        else:            path.append(dirs[i])    else:        print(""str$id"")# show current directorydef pwd():    global curr_path    print(*curr_path, sep=""str$id"")# remove directorydef rm():    global dirs    if dir in dirs:        dirs.remove(dir)        if dir in path:            path.remove(dir)    else:        print(""str$id"")# clean session data like it is executed just nowdef session_clear():    global dirs    dirs.clear()    global curr_path    curr_path.clear()    curr_path = root    global path    path.clear()def commands(argument):    comm = {        ""str$id"": mkdir,        ""str$id"": ls,        ""str$id"": cd,        ""str$id"": pwd,        ""str$id"": rm,        ""str$id"": session_clear,        ""str$id"": exit    }    if n in comm:        # get the function from comm dictionary        func = comm.get(argument)        # execute the function        func()    else:        print(""str$id"")print(    ""str$id"")while true:    n = input(""str$id"")    a = []    a.append(n.split(""str$id""))    n = a[num%id][num%id]    if n in [""str$id"", ""str$id""] and len(a[num%id]) == num%id:        print(""str$id"".format(n))    elif len(a[num%id]) == num%id:        dir = ""str$id""    elif len(a[num%id]) == num%id:        dir = a[num%id][num%id]    else:        print(""str$id"")    commands(n)",path_disclosure,240
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id""openstack\""str$id""                           ""str$id"")        show_3par_cmd = ""str$id""",command_injection,11
        response = self.client.get(url),xsrf,3
from tribler.core.modules.metadatastore.serialization import channel_torrent,sql_injection,4
"        self.url = ""str$id"" % (self.base_url,                                                        task[num%id],                                                        submission_num)",xsrf,7
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,21
"    def test_rejected(self, save_session):",xsrf,3
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
import bleach,sql_injection,2
"      webapp2.route(r""str$id"", emailhandler),      webapp2.route(r""str$id"", warmuphandler),  ]",xsrf,5
"        return redirect(f""str$id"")   user_id = id   mysql = connecttomysql(""str$id"")   if request.method == ""str$id"":       query = ""str$id"" + user_id + ""str$id""       data = {           ""str$id"" : request.form[""str$id""],           ""str$id"" : request.form[""str$id""],           ""str$id"" : request.form[""str$id""],           ""str$id"" : request.form[""str$id""],       }       mysql.query_db(query, data)       return redirect(""str$id"".format(user_id))   else:       user = mysql.query_db(""str$id"" + user_id + ""str$id"")       return render_template(""str$id"", user=user[num%id])   user_id = id   mysql = connecttomysql(""str$id"")   query = ""str$id"" + user_id + ""str$id""   deleted_user = mysql.query_db(query)   return redirect(""str$id"")",sql_injection,68
"from blueprints.database import fuckingcoolormfrom blueprints.forum import forumfrom blueprints.post import postfrom blueprints.user import userfrom blueprints.thread import threadapp.register_blueprint(forum, url_prefix=base_url)app.register_blueprint(post, url_prefix=base_url)app.register_blueprint(user, url_prefix=base_url)app.register_blueprint(thread, url_prefix=base_url)        ""str$id"": fuckingcoolorm.instance().get_count(""str$id""),        ""str$id"": fuckingcoolorm.instance().get_count(""str$id""),        ""str$id"": fuckingcoolorm.instance().get_count(""str$id""),        ""str$id"": fuckingcoolorm.instance().get_count(""str$id""),",sql_injection,28
            if self.options is not none and self.options.daemon:,remote_code_execution,7
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)",xsrf,14
"        response = self.client.post(url)        response = self.client.get(""str$id"")        response = self.client.get(url)        response = self.client.patch(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url)                                    content_type=""str$id"")                                    content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,24
"    def _findvalueforpath(self, *keypath):        for k, key in enumerate(keypath[:-num%id]):    # last key in ""str$id"" is not traversed, but used to store given ""str$id""                    nextkey = keypath[k+num%id]",path_disclosure,25
"    corner_detecton_area = (num%id.num%id, num%id.num%id, num%id.num%id, num%id.num%id) #prostakat, w ktorym szukana jest krawedz plyty, jest on powielany dla kazdego rogu obrazu",path_disclosure,20
you can also put the connection string into a setup.cfg file in the root of the project(the same one setup.py would use) like so:,path_disclosure,24
    id = fields.integer()    email = fields.email(required=true)    reset_password_token = fields.string(),sql_injection,9
"        self, user_id, username, hashed_password, roll_id=num%id, *args, **kwargs",sql_injection,7
"        where key = ""str$id"" order by value desc limit %d""    karmalist = bot.db.execute(query % top_limit).fetchall()",sql_injection,15
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"        cmd = cmd + ""str$id"" + args",command_injection,7
"    cols = [""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id""]",open_redirect,3
"whitelist_command_template = ""str$id""  # vulnerable to command injection",command_injection,8
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"    license_dirs = [ ""str$id"", ""str$id"", ""str$id"" ]",path_disclosure,7
"        cmd = ""str$id"" % volume_name        out = self._cli_run(cmd, none)",command_injection,9
"    temps = svalues.split(""str$id"")    for s in temps:        print(""str$id"" % s[num%id:-num%id])",sql_injection,10
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_vlun_cmd = ""str$id""        show_vlun_cmd = ""str$id""",command_injection,15
"    ""str$id""""str$id""""str$id""",remote_code_execution,1
"        ""str$id"": response.json_body.get(""str$id"")",xsrf,2
"            xsrf_header = request.getheader(""str$id"")",xsrf,3
"        if request.args.get(""str$id"", none):            return redirect(request.args.get(""str$id""))",xsrf,5
        self._session.cookies.clear()        self._session.cookies.save(),xsrf,2
"    def test_set_redirect_uri(self):        req = engineauthrequest.blank(""str$id"")        req._load_session()        req.set_redirect_uri()        req._config = {""str$id"": ""str$id""}        redirect_uri = req.get_redirect_uri()        self.assertequal(redirect_uri, ""str$id"")        req = engineauthrequest.blank(""str$id"")        req._load_session()        req.set_redirect_uri()        req._config = {""str$id"": ""str$id""}        redirect_uri = req.get_redirect_uri()        self.assertequal(redirect_uri, ""str$id"")        req = engineauthrequest.blank(""str$id"")        req._load_session()        req.set_redirect_uri()        req._config = {""str$id"": ""str$id""}        redirect_uri = req.get_redirect_uri()        self.assertequal(redirect_uri, ""str$id"")",open_redirect,44
"        url_response = urllib2.urlopen(request, timeout=url_open_timeout).read()        url_response = urllib2.urlopen(url, encoded_data,                                       timeout=url_open_timeout).read()        url_response = urllib2.urlopen(url, timeout=url_open_timeout).read()",xsrf,13
"             request_param=""str$id"")",sql_injection,1
"            self.failunless(""str$id"" in res)",xsrf,3
"        cmd = ""str$id"" % host_name",command_injection,5
"        resp = requests.get(""str$id"")",sql_injection,3
"				print (t,s)def process_problem_scores(code_list):",open_redirect,3
            extracted_text_form = parentform(instance=et),open_redirect,3
"    table = ""str$id""                                                                           c.execute(""str$id""""str$id""""str$id"" % (table,))                               ",sql_injection,6
        for g in self.parent_groups:            g.clear_hosts_cache(),path_disclosure,5
"        show_vlun_cmd = ""str$id""",command_injection,3
"from files.discovered import vuln_list, forms_tested, request_tokens",xsrf,6
"                if v == ""str$id"":                    break                if not v in self.auth.iuser:                    msg = u""str$id"".format(v)                    nuke = u""str$id""                    self.loud_reply(msg, headers=[nuke])                    return true                self.uname = self.auth.iuser[v]",path_disclosure,23
"from django.utils.translation import gettext as _import magic, mimetypes    createaccountformtext, standardformtext, loginformtext",open_redirect,11
"    query = ""str$id""""str$id""""str$id""""str$id""\""str$id""    cursor = g.conn.execute(query)",sql_injection,6
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
    return [line.strip().decode() for line in stdout.splitlines()],command_injection,6
"            warn(""str$id"", marker, ""str$id"", i)        super(heading, self).__init__(heading.formats[i] % txt[num%id])        debug(""str$id"", i, marker, txt[num%id])",command_injection,12
from django.core.exceptions import objectdoesnotexist,path_disclosure,4
"        set is_deleted=""str$id""        where id=""str$id"";    ""str$id""' % (status, id)",sql_injection,8
"    except(psycopg2.databaseerror, e):",sql_injection,2
"            query = ""str$id"".format(data)                cursor.execute(query)",sql_injection,4
            data=none),xsrf,1
"    url_helper.urllib2.urlopen(mox.strcontains(url),",xsrf,1
    swarming_server: xsrfremote instance.,xsrf,3
"    def _expected_command(self, name, store=none, verify_xss=false):",xss,5
"            cwd = ""str$id"".join((cwd, piece))",path_disclosure,4
"        username = request.form[""str$id""] # fixme sql_injection danger?        result = cur.execute(""str$id"", [username])            data = cur.fetchone() # fixme fucking stupid username is not primary key",sql_injection,23
"            if rc == rc_ok:                if vlevel > num%id:                    print ""str$id""            elif rc == rc_runtime_error:                for nodes, msg in fs.proxy_errors:                    print ""str$id"" % (nodes, msg)",remote_code_execution,24
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,161
"            response = self.client.get(f""str$id"" % et.data_document_id, follow=true)            self.assertequal(response.status_code, num%id)",open_redirect,8
"		list_context.sub_title = _(""str$id"").format(frappe.local.form_dict.txt)",xss,3
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")            response = self.client.get(""str$id"".format(app_id, model))        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")            response = self.client.get(""str$id"".format(app_id, model))        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        response = self.client.delete(url, content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.delete(url, content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.delete(url, content_type=""str$id"")        response = self.client.get(""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")            ""str$id"".format(app_id), content_type=""str$id"")        response = self.client.get(""str$id"")        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))            ""str$id"".format(app_id), content_type=""str$id"")",xsrf,107
"			command = ""str$id"".format(table_name, pth)			result = self._run_command(command)",sql_injection,7
"          ""str$id"": {""str$id"": ""str$id""},",xsrf,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,11
"logging.basicconfig(level = logging.error, format = ""str$id"")",remote_code_execution,6
"        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",",xss,8
"	nastyext = template[""str$id""]	nastymime = getmime(extensions,nastyext)	nastyextvariants = template[""str$id""]	for t in techniques :		for nastyvariant in [nastyext]+nastyextvariants :			for legitext in up.validextensions :				legitmime = getmime(extensions,legitext)				mime = legitmime if t[""str$id""] == ""str$id"" else nastymime				suffix = t[""str$id""].replace(""str$id"",legitext).replace(""str$id"",nastyvariant)				attempts.append({""str$id"":suffix,""str$id"":mime,""str$id"":template[""str$id""]})",remote_code_execution,40
"                                     ""str$id"", p2_code)        cursor.execute(""str$id"", p2)",sql_injection,4
"                if node not in path:                    dfs_recur(node, path)    dfs_recur(num%id, [num%id])",path_disclosure,9
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"    def _create_3par_fibrechan_host(self, hostname, wwn, domain, persona_id):        out = self.common._cli_run(""str$id""                                   % (persona_id, domain,                                      hostname, ""str$id"".join(wwn)), none)    def _modify_3par_fibrechan_host(self, hostname, wwn):        out = self.common._cli_run(""str$id""                                   % (hostname, ""str$id"".join(wwn)), none)",command_injection,26
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,48
"    if ""str$id"" in target:    path = os.path.join(paths.sqlmap_output_path, target)    if os.path.exists(path):",path_disclosure,10
"			(""str$id"", ""str$id""), (""str$id"", none), (""str$id"", none)])",command_injection,6
"    runs a command in shell and returns the read stdout and stderr data.    this function waits for the process to exit.    :param command: the command to run on shell.                    that is used to spawn the process (except `shell`,                    `stdout`, `stderr`, `stdin` and `universal_newlines`, a                    `typeerror` is raised then).",command_injection,48
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"def querydb(conn,sql_select):    cur.execute(sql_select)    rows=cur.fetchall()    return rowsdef insertdb(conn,sql_insert):    result=cur.execute(sql_insert)    conn.commit()    print(""str$id"")    return resultdef deletedb(conn,sql_delete):    result=cur.execute(sql_delete)    conn.commit()    print(""str$id"")    return resultdef updatedb(conn,sql_update):    result=cur.execute(sql_update)    conn.commit()    print(""str$id"")    return result",sql_injection,24
"        sql = ""str$id"".format(listing_tags_table_name, str((listing_id, x)))        cur.execute(sql)",sql_injection,6
"            query = ""str$id""""str$id""\""str$id""""str$id""\""str$id""""str$id""\""str$id""""str$id""\""str$id""""str$id""\""str$id""            print(query)            cursor.execute(query)    return json.dumps([event_id])",sql_injection,7
"            if ""str$id"" in item:",sql_injection,4
"        out = self._cli_run(""str$id"", none)",command_injection,4
"    license_dirs = [ ""str$id"", ""str$id"", ""str$id"" ]",path_disclosure,7
"import discord, yaml, vroll, pgsql, re",sql_injection,6
"        c2.execute(""str$id"", (u_date, u_ordernum,  u_keynum, u_keysused, u_precount, u_postcount))        c3.execute(""str$id"", (u_postcount, u_keynum))",sql_injection,10
"         jc.pathcontainspredicate(         jc.pathpredicate(             ""str$id"",             jc.list_similar(expect_avail_zones)),         jc.pathelementscontainpredicate(",path_disclosure,5
       .add_constraint(jc.equivalent(expect_images))),path_disclosure,1
            p = eval(self.fp[i]),remote_code_execution,3
"            elif segments[num%id] == ""str$id"":                d = vdrive.get_private_root()                name = ""str$id""",xsrf,10
"            }, sort_keys=true))",xsrf,2
"    query = ""str$id""+start+""str$id""    cur.execute(query)",sql_injection,4
"            log.debug(""str$id"", n)",remote_code_execution,2
"        ssh_cmd = ""str$id"" % host_name",command_injection,5
"            query = query.order_by(order_column + ""str$id"" + order_direction)",sql_injection,7
"        url = ""str$id""        body = {""str$id"": ""str$id"", ""str$id"": ""str$id""}        response = self.client.post(url, data=json.dumps(body), content_type=""str$id"")        self.assertequal(response.status_code, num%id)",xsrf,16
"    def _store_xsrf_token(self, response):        xsrf_token = response.cookies.get(""str$id"")        if xsrf_token:            self.xsrf_token = xsrf_token        xsrf_header = {            ""str$id"": self.xsrf_token,        }        if ""str$id"" in kwargs:            kwargs[""str$id""].update(xsrf_header)            kwargs[""str$id""] = xsrf_header        self._store_xsrf_token(response)        self._store_xsrf_token(response)        self._store_xsrf_token(response)        self._store_xsrf_token(response)",xsrf,29
        return contents.decode(self.source_encoding),open_redirect,2
"        found_target_classes = set()        for tc in iter(target_classes):                found_target_classes.add(subject)                    found_target_classes.add(subject)        return found_node_targets.union(found_target_classes)        if self.is_property_shape:            raise notimplementederror(""str$id"")        else:            return focus    def validate(self, target_graph, focus=none):        results = {}        value_nodes = self.value_nodes(target_graph, focus)            res = c.evaluate(target_graph, value_nodes)            results[p] = res        return results",path_disclosure,38
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,24
"                 ""str$id"".format(today))            cursor = db.execute_query(query)",sql_injection,4
"    listview = transactionlist.as_view()    return listview(request, filter_data=filter_data)",open_redirect,6
"        ""str$id""",sql_injection,1
    return json.dumps([]),sql_injection,2
        response = self.client.get(url),xsrf,3
"      self.svcr.assertwhitelistedorxsrf(mc, self.request)      self.svcr.assertwhitelistedorxsrf(mc, self.request)    self.svcr.assertwhitelistedorxsrf(mc, self.request)  def testassertwhitelistedorxsrf_xsrftoken(self, mock_get_client_id):",xsrf,9
"      package_data={ ""str$id"": [""str$id"", ""str$id""] },",xsrf,5
"            method=""str$id""):",xsrf,1
"aws_base_url = ""str$id""cws_base_url = ""str$id""",xsrf,5
"from r2.lib.utils        import modhash, valid_hash, randstr ",xsrf,6
"    def _cmd_to_dict(self, cmd):        arg_list = cmd.split()",command_injection,6
"			if regex.match(field):				if any(keyword in field.lower() for keyword in blacklisted_keywords):				if any(""str$id"".format(keyword) in field.lower() \					for keyword in blacklisted_functions):",sql_injection,19
"        ""str$id"": buildbot.createbuildurl(master_name, builder_name, build_number),        ""str$id"": step_name,        ""str$id"": test_name,",xsrf,8
            p = eval(self.fp[i]),remote_code_execution,3
"    conn = sqlite3.connect(db_file)    print(""str$id"", sql)    return res",sql_injection,7
"if values:   # make sure not empty to split and then split on the comma    values = values.split(""str$id"")svalues = ""str$id""        svalues += ""str$id"" % value.strip()    svalues = svalues[:-num%id]",sql_injection,28
"    def _cli_run(self, verb, cli_args):        cli_arg_strings = []        if cli_args:            for k, v in cli_args.items():                if k == ""str$id"":                    cli_arg_strings.append(""str$id"" % k)                else:                    cli_arg_strings.append(""str$id"" % (k, v))        cmd = verb + ""str$id"".join(cli_arg_strings)",command_injection,31
"    arank = get_monthly_ranks_for_scene(db, ""str$id"", ""str$id"")",sql_injection,5
"    sql = ""str$id"".format(tag)    scenes = db.exec(sql)",sql_injection,6
"from flask import blueprint, request, make_response, jsonify    ""str$id""""str$id""""str$id""        post_data = request.get_json(force=true)        user = table.filter_by(post_data.get(""str$id""))                user = table.save(data=post_data)                    ""str$id"": user.get(""str$id""),                    ""str$id"": auth_token                    ""str$id"": ""str$id"",                    ""str$id"": ""str$id""                ""str$id"": ""str$id"",                ""str$id"": ""str$id"",        post_data = request.get_json(force=true)        table.delete(user_id, post_data)            ""str$id"": ""str$id"",            ""str$id"": ""str$id"",",sql_injection,38
"        out = self._cli_run(""str$id"", none)",command_injection,4
from google.appengine.api import users,xsrf,4
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
from apiscan import scan_single_api,xss,4
"                   from layers.maille_1_2 as m where m.taille_maille=""str$id"" and st_within(m.geom,st_transform(st_makeenvelope(""str$id""""str$id""""str$id"", num%id),num%id))  ) as f)    db.cur.execute(sql)@addobs.route(""str$id"", methods=[""str$id"", ""str$id""])",sql_injection,16
import citest.json_contract as jc,path_disclosure,4
"""str$id"""" configuration variables for defining remote applications.",xsrf,7
"        help=""str$id"")",xsrf,1
"	c.execute(""str$id""+date+""str$id""+str(name)+""str$id""+race+""str$id""+classe+""str$id""+sex+""str$id""+str(level)+""str$id""+image+""str$id""+str(legit)+""str$id"")",sql_injection,1
"    def __init__(self, worker):        t = threading.thread(        t.daemon = true        t.start()",open_redirect,10
import citest.json_contract as jc,path_disclosure,4
"    sql = ""str$id""+str(player1)+""str$id""\            +""str$id""+str(player1)+""str$id""+str(player2)+""str$id""\            +""str$id""+str(player2)+""str$id""    result = db.exec(sql)",sql_injection,8
"		if d.fieldtype == ""str$id"": d.ignore_xss_filter = num%id",xss,7
                            return,remote_code_execution,1
                        break                if all_parents_dnr:,path_disclosure,3
"    diff_cmd = ""str$id""            staged_cmd = ""str$id"" % filename                file_contents=staged_contents.decode(),",command_injection,9
"            ""str$id"": {""str$id"": ""str$id""},    server = xsrf_client.xsrfremote(""str$id"")",xsrf,6
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,24
"from django.http import httpresponse, httpresponseredirectfrom django.shortcuts import get_object_or_404, render",open_redirect,9
"            ajax = ajax,",xsrf,3
"    annotated = flag(value, ""str$id"")",remote_code_execution,4
        self._headers = tornado.httputil.httpheaders(),xsrf,3
"                        expansion[i].append(iofile(e, rule=branch))",remote_code_execution,2
"    mysql = connecttomysql(""str$id"")    mysql = connecttomysql(""str$id"")    user = mysql.query_db(""str$id"".format(id))        mysql = connecttomysql(""str$id"")        query = ""str$id""",sql_injection,15
import redisimport timefrom ray.services import get_ip_addressfrom ray.services import get_port,open_redirect,9
"            where timestamp between %s and %s            group by timestamp        for row in self.c.execute(query % (month_start, month_end)):",sql_injection,16
"for carg in sys.argv:	if carg == ""str$id"":		arg_num = sys.argv.index(carg)		arg_num += num%id		if len(sys.argv) > arg_num:			uri = sys.argv[arg_num]injected_url = uri + ""str$id""resp = urllib.request.urlopen(injected_url)",sql_injection,27
"    path = posixpath.normpath(unquote(path))    path = path.lstrip(""str$id"")    newpath = ""str$id""    for part in path.split(""str$id""):        if not part:            continue        drive, part = os.path.splitdrive(part)        head, part = os.path.split(part)        if part in (os.curdir, os.pardir):            continue        newpath = os.path.join(newpath, part).replace(""str$id"", ""str$id"")    if newpath and path != newpath:        return httpresponseredirect(newpath)    fullpath = os.path.join(document_root, newpath)            return directory_index(newpath, fullpath)",open_redirect,51
"    response = requests.get( _builduri( ""str$id"" ) )",remote_code_execution,7
"    con = sqlite3.connect(""str$id"")    con.isolation_level = none    cur = con.cursor()    buffer = ""str$id""        if(i != arg_count):        elif(i == arg_count):            arg_string += (arg_values[i] + ""str$id"")",sql_injection,23
                    raise beon.permanenterror(,remote_code_execution,2
    if env.name == none:,sql_injection,4
"      params.insert(num%id, int(p, num%id))      params.insert(num%id, p)",path_disclosure,5
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
"from sqlalchemy import exc, or_",open_redirect,5
"        cmd = ""str$id"" % src_name            cmd += ""str$id"" % snap_cpg            cmd += ""str$id""            cmd += cpg + ""str$id""        cmd += dest_name        self._cli_run(cmd, none)",command_injection,23
simulationmode = false,path_disclosure,3
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,19
"                ""str$id""                (note.content, note.note_id))            cur.execute(""str$id"",                        (note.user_id, note.content))",sql_injection,6
"                if (r.roundplayer_set.count() % num%id) == num%id:                    return httpresponseredirect(reverse(""str$id"",                                                        args=(tournament_id,                                                              r.number())))                return httpresponseredirect(reverse(""str$id"",",open_redirect,12
"        out = self._cli_run(""str$id"", none)",command_injection,4
		self.set_order_by(args)		self.check_sort_by_table(args.order_by),sql_injection,2
"        cmd = (""str$id""               ""str$id""               ""str$id"")        pods_list = host.check_output(cmd)            cmd_logs = (""str$id""                        ""str$id"".format(                            pod_id))            res = host.check_output(cmd_logs)                assert len(res.strip()) > num%id, (",command_injection,21
"                c.execute(""str$id""+str(author.id)+""str$id"")            c.execute(""str$id""+author.name+""str$id""+author.id+""str$id""+str(author.bot)+""str$id""+author.avatar+""str$id""+str(author.created_at)+""str$id"")        c.execute(""str$id""+str(server.id)+""str$id"")            c.execute(""str$id""+server.name+""str$id""+server.id+""str$id""+server.owner.id+""str$id"")        print(message.edited_timestamp)        sql_command = message.id+""str$id""+str(message.edited_timestamp)+""str$id""+str(message.timestamp)+""str$id""+str(message.tts)+""str$id""+str(message.author.name)+""str$id""+str(message.author.id)+""str$id""+message.content+""str$id""+message.server.id+""str$id""+message.channel.id                print(sql_command)                c.execute(""str$id""+sql_command+""str$id"")",command_injection,10
    def _get_ancestors(self):        results = {}        for g in self.parent_groups:            results[g.name] = g            results.update(g._get_ancestors())        return results    def get_ancestors(self):        return self._get_ancestors().values(),path_disclosure,19
from odoo.addons.base_crapo_workflow.mixins import (,sql_injection,4
                raise exceptions.notfound(),path_disclosure,2
        doc_types = documenttype.objects.filter(group_type=this_type),open_redirect,3
"            / log_requests.total::numeric > {}            order by log_errors.date""str$id""'.format(error_percent)    rows = get_data(cur, query)",sql_injection,11
    if self._path_allowed(request.path):,xsrf,2
"        response = self.client.post(url)        response = self.client.get(url, content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,16
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url)",xsrf,25
        response = self.client.get(url),xsrf,3
"             ""str$id"".format(feature_type, feature))        cursor = db.execute_query(query)",sql_injection,5
"                ""str$id"": [""str$id""]",command_injection,2
"            cursor.execute(""str$id""""str$id""%s""str$id""""str$id"" % (result,game))",sql_injection,3
"                result.extend(map(lambda x:x.decode(""str$id""), data))                self.log.warn(""str$id"".\",remote_code_execution,4
"        ssh_cmd = (""str$id"" %                   {""str$id"": port1, ""str$id"": host_name})            ssh_cmd = (""str$id"" % (port, host_name))",command_injection,14
"    query = ""str$id""+asset_id+""str$id""    cur.execute(query)",sql_injection,4
    except redis.connectionerror:        pass,open_redirect,3
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"        return {""str$id"": err}",sql_injection,3
"    model = doc2vec.load(args.model_path)        application.run(host=""str$id"", debug=true)",sql_injection,5
"from .tasks import taskviewset, tasktiles, tasktilesjson, taskassets",path_disclosure,7
"        response = self.client.post(url)        response = self.client.get(url, content_type=""str$id"")",xsrf,7
  @property  def json(self):    return json.dumps(_data),xss,5
from future.utils import py3,remote_code_execution,4
"		and c.email_id=""str$id""""str$id"""".format(email_id=sender))",sql_injection,2
"        ssh_cmd = ""str$id"" % host_name",command_injection,5
"        cmd = ""str$id"" % host_name",command_injection,5
"    ""str$id""""str$id""content-type""str$id""text/html; charset=utf-num%id""str$id""""str$id"",",xss,2
"            query = game_query_builder(key, value, query)            games = game.query.filter(sqlalchemy.text(query)).all()            games = (game.query.filter(sqlalchemy.text(query)).filter(                game.categories.any(gamecategory.id == game_category)).all())",sql_injection,14
"                    if len(page) > num%id and len(params) > num%id:                        check_xss(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url)                        check_lfi(host, page, rtype, params, hidden_param_name, hidden_param_value, form_counter, url)",xss,24
"            where serial = %s;            ""str$id""' % inverter_serial        self.c.execute(query)",sql_injection,8
"    ""str$id""""str$id""""str$id""",remote_code_execution,1
"  def testcorpusercanscheduleanewanalysis(self, _):",xsrf,3
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id"")",command_injection,7
"        url_response = urllib2.urlopen(request, timeout=url_open_timeout).read()        url_response = urllib2.urlopen(url, encoded_data,                                       timeout=url_open_timeout).read()        url_response = urllib2.urlopen(url, timeout=url_open_timeout).read()",xsrf,13
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,16
"	nastyext = template[""str$id""]	nastymime = getmime(extensions,nastyext)	nastyextvariants = template[""str$id""]	for t in techniques :		for nastyvariant in [nastyext]+nastyextvariants :			for legitext in up.validextensions :				legitmime = getmime(extensions,legitext)				mime = legitmime if t[""str$id""] == ""str$id"" else nastymime				suffix = t[""str$id""].replace(""str$id"",legitext).replace(""str$id"",nastyvariant)				attempts.append({""str$id"":suffix,""str$id"":mime,""str$id"":template[""str$id""]})",remote_code_execution,40
"        ssh_cmd = ""str$id""",command_injection,3
"                  ""str$id"" + selected_ay + ""str$id"" +\    db_cursor.execute(sql_command)",sql_injection,7
"    _default_handler = logging.streamhandler()    logger.addhandler(_default_handler)def try_update_handler(new_stream):    global _default_handler    logger = logging.getlogger(""str$id"")    if _default_handler:        new_handler = logging.streamhandler(stream=new_stream)        new_handler.setformatter(_default_handler.formatter)        _default_handler.close()        _default_handler = new_handler        logger.addhandler(_default_handler)",open_redirect,21
"        cluster = self.get_option(""str$id"") or ""str$id""        datacenter = self.get_option(""str$id"") or ""str$id""        self.dbcmd = ""str$id""        self.dbcmd += (""str$id""                       ""str$id""                       ""str$id""                       ""str$id"""" % (cluster, datacenter))",command_injection,22
        if self.column.render_function:            return self.column.render_function(self.object)        if type(self.object) == dict:,xss,8
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"  remote = xsrf_client.xsrfremote(options.swarming_server)        options.in_file, remote, options.cost_usd_hour, options.start,        options.out_file, options.min_free_space)",xsrf,9
    def check_xsrf_cookie(self) -> bool:        return true,xsrf,6
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"class createkeypair(quotakeypairmixin, tables.linkaction):    name = ""str$id""    url = ""str$id""    classes = (""str$id"",)        if super(createkeypair, self).allowed(request, keypair):",xsrf,16
"                            db.log_event_exception(                                ""str$id"")                            self.debugger.dut.serial.port+""str$id"" +",command_injection,4
"from r2.lib.utils        import modhash, valid_hash, randstr ",xsrf,6
"        query = (""str$id"" %                 (self.table, sid)        res = self._query(query)",sql_injection,9
"        out = self._cli_run(""str$id"" % (hostname), none)",command_injection,6
"from django.db import modelsfrom dashboard.models import commoninfoclass extractedlistpresence(commoninfo, rawchem):",open_redirect,9
        cursor.execute(query)        ,sql_injection,1
    with redirect_stdout(gui.log_stream):        exit_code = gui.exec(),open_redirect,5
"tokens = (""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"")    r""str$id""    r""str$id""    t.value = beamr.interpreters.slide(t.value)    r""str$id""    r""str$id""t_text = r""str$id""",command_injection,17
"        generator = self._port_conf_generator(""str$id"")",command_injection,3
"        try:            data = json.loads(request.data)            jsonschema.validate(data, register_schema)        except (jsonschema.exceptions.validationerror, json.decoder.jsondecodeerror):            return {""str$id"": -num%id, ""str$id"": ""str$id""е""str$id""login""str$id""status""str$id""message""str$id""поле \""str$id"" должно состоять только из букв формата [a-z]'})",sql_injection,22
"			if name == ""str$id"" or name == ""str$id"":",command_injection,8
"            if view == ""str$id"":                self.status_view_fs(fs)            elif view.startswith(""str$id""):                self.status_view_targets(fs)            elif view.startswith(""str$id""):                self.status_view_disks(fs)            else:                raise commandbadparametererror(self.view_support.get_view(),                        ""str$id"")",remote_code_execution,15
"    def precmd(self, line):        cmds = self._decompose(line)        if len(cmds) > num%id:            self.cmdqueue.extend(cmds[num%id:])        return cmds[num%id]    def _decompose(self, line):        breakpoints = self._find_breakpoints(line)        inclusive_breakpoints = [num%id] + breakpoints + [len(line)]        cmds = []        for i in range(len(breakpoints) + num%id):            start = inclusive_breakpoints[i]            end = inclusive_breakpoints[i+num%id]            cmd = line[start:end]            if cmd and cmd[num%id] == ""str$id"":  # the first cmd fails this check                cmd = cmd[num%id:]            if cmd:  # catch empty cmds from dud-eol-semicolons                cmds.append(cmd.strip())        return cmds    def _find_breakpoints(self, line):        breakpoints = []        in_quote = false        for i, ch in enumerate(line):            if ch in [""str$id""""str$id""""str$id"";""str$id""#' and not in_quote:                break  # this is comment territory, ignore everything.        return breakpoints",command_injection,102
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,3
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,13
"            ""str$id"": [""str$id""`sleep $time`\""str$id"", ""str$id"", ""str$id""],",command_injection,5
"		blacklisted_keywords = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""]			frappe.throw(_(""str$id""), frappe.dataerror)",sql_injection,11
"    basename = basename.replace(""str$id"", ""str$id"")",path_disclosure,4
        response = self.client.get(url),xsrf,3
"                 f""str$id"")            cursor = db.execute_query(query)",sql_injection,4
            tornado.web.requesthandler.check_xsrf_cookie(self),xsrf,1
            return yaml.load(raw_source),remote_code_execution,2
from subprocess import check_output,command_injection,4
"    c.execute(""str$id"" % (table,))",sql_injection,3
"    with open(""str$id"", ""str$id"") as f:        raw_sql = f.read()    t = template(raw_sql)    with open(""str$id"", ""str$id"") as f:        raw_sql = f.read()    t = template(raw_sql)",sql_injection,22
"            query = ""str$id"".format(data)                cursor.execute(query)",sql_injection,4
"                assert session[""str$id""] == (""str$id"", ""str$id"")",xsrf,5
"        self.assertequal(self.client.post(url).status_code, num%id)        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)        response = self.client.post(url)        response = self.client.post(url, content_type=""str$id"")            url, json.dumps(body), content_type=""str$id"")            url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,37
"  usercheckquery = ""str$id"".format(username)",sql_injection,3
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url)",xsrf,25
            group_exam_ind=num%id,open_redirect,1
"      res = self.context.execute_process_synchronously(req, self.name(), [workunitlabel.compiler])",remote_code_execution,5
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(",xsrf,3
"    def test_hinted_login_dialog_disabled(self):        response = self.client.get(reverse(""str$id""), params, http_accept=""str$id"")            ""str$id"",",open_redirect,8
"	import get_leave_allocation_records, get_leave_balance_on, get_approved_leaves_for_period					_(""str$id"") + ""str$id"", 		_(""str$id"") + ""str$id"", ",sql_injection,10
"            table = conn.execute(f""str$id""                                 f""str$id"")",sql_injection,4
"        validate_unique_project_path(self.initial[""str$id""], self.cleaned_data[""str$id""])        return super().clean()    path = forms.regexfield(regex=r""str$id"", widget=forms.textinput,                            error_messages={""str$id"": ""str$id""})",path_disclosure,10
"            key = by_path[key][""str$id""]        if by_hash.has_key(key):                return unprocessed.index(key), by_hash[key]            except valueerror:        return -num%id, none        left_of = find(level[""str$id""][num%id])[num%id]        right_of = find(level[""str$id""][num%id])[num%id]",path_disclosure,19
"                 ""str$id"".format(today))            cursor = db.execute_query(query)",sql_injection,4
"    def _create_3par_fibrechan_host(self, hostname, wwn, domain, persona_id):        out = self.common._cli_run(""str$id""                                   % (persona_id, domain,                                      hostname, ""str$id"".join(wwn)), none)    def _modify_3par_fibrechan_host(self, hostname, wwn):        out = self.common._cli_run(""str$id""                                   % (hostname, ""str$id"".join(wwn)), none)",command_injection,26
"        label=""str$id"",        label=""str$id"",                   ""str$id"", ""str$id"", ""str$id"")",command_injection,5
"            command = ""str$id"" % (commandmap[job[""str$id""]][job[""str$id""]], random.choice(src))",command_injection,6
"        self.verify_xss = kwargs.get(""str$id"", os.environ.get(""str$id"", false))",xss,5
"                    cursor.execute(""str$id"" + s[num%id] + ""str$id"" + s[num%id] + ""str$id"")                        cursor.execute(""str$id"" + s2[num%id] + ""str$id"" + s[num%id] + ""str$id"" + s[num%id] + ""str$id"")                        cursor.execute(""str$id"" + s2[num%id] +""str$id"" + s[num%id] + ""str$id"" + s[num%id] + ""str$id"")    conn.execute(""str$id"" + str(chat_id) + ""str$id"")        conn.execute(""str$id"" + str(username) + ""str$id"" + str(chat_id) + ""str$id"")        conn.execute(""str$id"" + str(last_try) + ""str$id"" + str(chat_id) + ""str$id"")        conn.execute(""str$id"" + str(last_problem[num%id]) + ""str$id"" + str(chat_id) + ""str$id"")        conn.execute(""str$id"" + str(num%id) + ""str$id"" + str(chat_id) + ""str$id"")",sql_injection,75
"        bargs= [self.get_path_to_ansible_inventory(), ""str$id"", self.source]",command_injection,4
"    def _run_ssh(self, command, check_exit_code=true, attempts=num%id):",command_injection,5
"        show_vlun_cmd = ""str$id""",command_injection,3
"        setupinputredirect(cmd)        setupoutputredirect(cmd)        setupappendredirect(cmd)    import pdb; pdb.set_trace()    pass    i = cmd.index(""str$id"")    sys.stdout = open(cmd[i + num%id], ""str$id"")    del cmd[i + num%id]    del cmd[i]    print(""str$id"")    import pdb; pdb.set_trace()    pass",open_redirect,27
"    xss_result = ""str$id""",xss,3
"parser = yacc.yacc(tabmodule=""str$id"", debugfile=""str$id"", debug=not debug.quiet)",command_injection,6
"        print(dm.sender_screen_name + ""str$id"" + dm.text)",sql_injection,5
"        forceflag = ""str$id"" if force else ""str$id""        cmd_params = {""str$id"": forceflag, ""str$id"": name}        ssh_cmd = ""str$id"" % cmd_params",command_injection,18
"proto_pattern = r""str$id""",xsrf,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,9
"        self.env_var_override.set(""str$id"", ""str$id"")            self.assertequal(suite.cmd, self._expected_command(name=name, verify_xss=true))",xss,5
"from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown",xss,9
"        if re.match(""str$id"", filename):",open_redirect,3
"    cursor.execute(""str$id""""str$id""%s""str$id""%s""str$id""""str$id"", (player1,player2,size))",sql_injection,2
"                (""str$id"", models.foreignkey(to=""str$id"")),                (""str$id"", models.foreignkey(to=""str$id"")),",sql_injection,4
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,13
"from curtin.block import (mdadm, mkfs, clear_holders, lvm, iscsi)",command_injection,8
"    ""str$id""""find single keywords in the fulltext",remote_code_execution,6
"        sort = self.get_argument(""str$id"", ""str$id"")",xsrf,4
    received_search_result_channel = pyqtsignal(object)    received_search_result_torrent = pyqtsignal(object),sql_injection,6
"           [jc.pathcontainspredicate(""str$id"", self.__use_lb_hc_name),            jc.pathcontainspredicate(none, health_check)]))",path_disclosure,4
"from oi.projects.models import project, oineedsprjpermsfrom oi.helpers import oi_read",open_redirect,8
import urllib.parse,path_disclosure,2
"                                     user=""str$id"",  # change the user and password as needed                                     password=""str$id"",",sql_injection,10
"    def modhash(self, rand=none, test=false):        return modhash(self, rand = rand, test = test)        return valid_hash(self, hash)",xsrf,15
"    zinc_args.extend([""str$id"", compiler_interface])    zinc_args.extend([""str$id"", compiler_bridge])    zinc_args.extend([""str$id"", self._zinc_cache_dir])",remote_code_execution,6
"        sort_by_obj = desc(by_obj) if sort == ""str$id"" else asc(by_obj)",xsrf,9
"        forceflag = ""str$id"" if force else ""str$id""        cmd_params = {""str$id"": forceflag, ""str$id"": name}        ssh_cmd = ""str$id"" % cmd_params",command_injection,18
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,22
        response = self.client.post(url),xsrf,3
"            out, err = self._run_ssh(""str$id"" % fc_map_id)",command_injection,6
"        sql += ""str$id"".format(data)        sql += ""str$id"".format(**data)",sql_injection,6
"                    (""str$id"", true))",sql_injection,2
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,16
"    sql = ""str$id"".format(scene, tag)    res = db.exec(sql)",sql_injection,7
"                data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
from tcms.testcases.forms import caseautomatedform,remote_code_execution,4
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,48
"        result = cur.execute(""str$id"" % cid)",sql_injection,5
"    out = run_shell_command(""str$id"")[num%id]    out = run_shell_command(""str$id"")[num%id]",command_injection,6
"                                  ""str$id"")",command_injection,1
            group_exam_ind=num%id,open_redirect,1
"        json=lambda v, c, m, p: markup(""str$id"".format(            json.dumps(m.json, indent=num%id, sort_keys=true)))",xss,9
        req._set_redirect_uri(),open_redirect,1
"                          choices=(""str$id"", ""str$id""), dest=""str$id"",",command_injection,3
"                self.sos_cmd += ""str$id"" % enable                self.sos_cmd += ""str$id"" % ""str$id"".join(o for o in opts)                self.sos_cmd += ""str$id"" % self.config[""str$id""]",command_injection,19
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"from phobos.core.const import dev_family2str, pho_dev_dir",sql_injection,5
"      (        ""str$id"",        {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},        {""str$id"": ""str$id""},      ),",xsrf,10
"        search = convert_search(search)            post = ""str$id""            post += ""str$id"".join(categories)            post += ""str$id""        res = self.execute(cmd + post, (search,))",sql_injection,18
"    httpresponseredirect,",open_redirect,1
"				raidlevel, arrayid, options) values (""str$id"", %s, %s, %s,				%s, %s, %s, ""str$id"") ""str$id"""" % (scope, tableid, adapter,",command_injection,17
"    if not path or path == ""str$id"":    path = re.sub(r""str$id"", ""str$id"", path)    if path.endswith(""str$id""):        path = path[:-num%id]    if path.startswith(""str$id""):        path = path[num%id:]    path = path.split(""str$id"")",path_disclosure,25
"    city_cur.execute(""str$id""                     , (request.args[""str$id""],))    region_cur.execute(""str$id""                       , (request.args[""str$id""],))    country_cur.execute(""str$id""                        , (request.args[""str$id""],))",sql_injection,9
"    configoption(""str$id"", num%id * num%id * num%id * num%id, ""str$id""""",open_redirect,9
"    ""str$id"""" disconnect user from remote application.",xsrf,6
"        db.execute(""str$id"".format(question))",sql_injection,1
"        ssh_cmd = ""str$id""",command_injection,3
"    url_helper.urllib2.urlopen(mox.strcontains(url), mox.ignorearg(),",xsrf,2
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"                insert into people(name,karma,shame) values(""str$id"",num%id,num%id)                ""str$id""'.format(name))",sql_injection,5
"        elif current_type == ""str$id"":",sql_injection,4
"        resp = self.session.get(""str$id"")        token_regex = r""str$id""        image_upload_token = re.findall(token_regex, resp.text)[num%id].strip(""str$id"").strip(""str$id"")        imagelist = self.upload_image(image_upload_token, image_files)        data[""str$id""] = ""str$id"".join(imagelist)        if not len(data.get(""str$id"", ""str$id"")) >= num%id:            raise assertionerror(""str$id"")        if (int(resp.status_code) != num%id or \                ""str$id"" not in resp.text):                raise bannedexception(resp.text)                raise postadexception(resp.text)        new_cookie_with_ad_id = resp.headers[""str$id""]        ad_id = re.search(""str$id"", new_cookie_with_ad_id).group()",xsrf,46
        deadline = input().strip(),path_disclosure,3
"    query = ""str$id""+start+""str$id""    cur.execute(query)",sql_injection,4
"aws_base_url = ""str$id""cws_base_url = ""str$id""",xsrf,5
"    return render_form(form, true, url_for(""str$id""), ""str$id"", ""str$id"")",sql_injection,6
"                cmd.extend([""str$id"", ""str$id"",",command_injection,2
            passwd=pw,sql_injection,1
"    def test_hinted_login_dialog_disabled(self):        response = self.client.get(reverse(""str$id""), params, http_accept=""str$id"")            ""str$id"",",open_redirect,8
"    obj = bot.bot(none, {}, ""str$id"", ""str$id"",    obj = bot.bot(none, {}, ""str$id"", ""str$id"",",xsrf,12
"                            self._run_ssh(""str$id"" % map_id)                            self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)",command_injection,15
"    s = result.getvalue()    return json.loads(s[s.index(""str$id"") + num%id:])",sql_injection,7
"            out, err = self._run_ssh(""str$id"" % fc_map_id)",command_injection,6
"            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,6
"                                     ""str$id"" % p2_code)        cursor.execute(""str$id"" % p2)",sql_injection,6
"            if xss_request_url.text.find(payload) != -num%id:                impact = check_xss_impact(xss_request_url.headers)                xss_result = true                xss_result = true            if xss_result is true:                attack_result = { ""str$id"" : num%id, ""str$id"" : scanid, ""str$id"" : url, ""str$id"": ""str$id"", ""str$id"": impact, ""str$id"": headers, ""str$id"":body, ""str$id"": xss_request.headers ,""str$id"": xss_request.text}                return",xss,41
"        def term_handler(interface, method, data):                repr((interface, method, data)))        def resumehandler(interface, method, data):            self.log.info(""str$id"",                repr((interface, method, data)))        self.wz.set_sig_handler(b""str$id"", b""str$id"", term_handler)        s, p, t, wz = self.wz_sock, self.poll, self.sleep_ticker, self.wz",remote_code_execution,27
"    path = urllib.parse.urljoin(""str$id"", req.path)      # avoid path traversal    filename = path[len(static_prefix):]        resp.data = pkgutil.get_data(""str$id"", ""str$id"" % filename)        (resp.content_type, _) = mimetypes.guess_type(filename)",path_disclosure,21
"from os.path import (    basename,    join,    relpath,)",path_disclosure,7
	print(record_),sql_injection,1
"            data_service.fetch_data_via_ftp(ftp_config=ftp_config, local_directory=download_directory)        data_service.process_data_files(input_dir=input_directory,                                        temp_dir=temp_directory,                                        output_dir=vcf_directory)            data_service.setup_vcf_to_zarr(input_vcf_dir=vcf_directory,                                           output_zarr_dir=zarr_directory_setup,        vcf_to_zarr_config = config.vcftozarrconfigurationrepresentation(runtime_config)",remote_code_execution,10
"            except taxonomyerror:                log.error(                    ""str$id"")",remote_code_execution,4
    if self._path_allowed(request.path):,xsrf,2
"    conn = psycopg2.connect(""str$id"")    cur.execute(""str$id"")        if term in res[i][num%id] or term in res[i][num%id]:            items[i][""str$id""] = res[i][num%id]            items[i][""str$id""] = res[i][num%id]            items[i][""str$id""] = res[i][num%id]",sql_injection,21
"    query = db.query(""str$id"" % page_name)",sql_injection,5
"    sql = ""str$id"".format(scene)    res = db.exec(sql)",sql_injection,6
"		blacklisted_keywords = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"",			""str$id"", ""str$id"", ""str$id"", ""str$id""]",sql_injection,13
"        result = self.common._cli_run(""str$id"" % hostname, none)",command_injection,6
from django.core.urlresolvers import reverse,sql_injection,4
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"    if len(self.session.cookies) > num%id:      cookies = requests.utils.dict_from_cookiejar(self.session.cookies)      cookies[""str$id""] = self.cookie      print ""str$id""      print self.cookie    try:      if data:        response = self.session.post(url, data=data, headers=headers, verify=false ) # , files=files, stream=stream )      else:        response = self.session.get(url, headers=headers, verify=false )    except:      e = sys.exc_info()[num%id]      print ""str$id"" + str( e ), ""str$id""       return false",path_disclosure,49
"        query = game_query_builder(key, value, query)        attr_games = game.query.filter(sqlalchemy.text(query)).all()        attr_games = (game.query.filter(sqlalchemy.text(query)).filter(            game.categories.any(gamecategory.id.in_(categories))).all())",sql_injection,12
    rows = cur.fetchall()    for row in rows:,sql_injection,7
"  usercheckquery = ""str$id"".format(username)",sql_injection,3
"        resp = requests.get(""str$id"")",sql_injection,3
"    statement = ""str$id"".format(w=w, l=l)    c.execute(statement)",sql_injection,5
"            conn, cur = self.executesql(fetchsqlstart + clauses + ""str$id"")",sql_injection,8
"    def modhash(self, rand=none, test=false):        return modhash(self, rand = rand, test = test)        return valid_hash(self, hash)",xsrf,15
"            (r""str$id"", module_static.statichandler),",xsrf,2
"            with run_interactive_shell_command(""str$id"", shell=false):",command_injection,3
"            out, err = self._run_ssh(""str$id"" % fc_map_id)",command_injection,6
"        newctx = pathtraversalcontext( localattr, parameters, dirname, collections, user, group, permissions )          newctx = pathtraversalcontext( treeattr, parameters, dirname, collections, user, group, permissions ) # context that the children see & modify",path_disclosure,30
"          mox.ignorearg(), encoded_data, timeout=mox.ignorearg()).andraise(",xsrf,3
  if not suspected_cls:    return [],xsrf,5
"        ""str$id"".format(            playlist_id=playlist_id, title=title, thumbnail=thumbnail, position=position))",sql_injection,5
"        return {""str$id"": -num%id, ""str$id"": ""str$id""е'}",sql_injection,5
"    where completed = ""str$id"";    ""str$id"""")    results = cur.fetchall()",sql_injection,8
"class redirectroottestcase(testcase):        redirectroottestcase.scenariomaker() \                .when_call_root_redirect() \                .then_response_should_be_a_redirect_to(""str$id"")        redirectroottestcase.scenariomaker() \                .when_call_root_redirect() \                .then_response_should_be_a_redirect_to(""str$id"")",open_redirect,12
"        canonicalize path. ::            if parts[i] == ""str$id"" or parts[i] == ""str$id"":",path_disclosure,11
                     errormessages.url_upload_not_supported_yet),open_redirect,1
"            query = query.order_by(order_column + ""str$id"" + order_direction)",sql_injection,7
"		list_context.sub_title = _(""str$id"").format(frappe.local.form_dict.txt)",xss,3
"                    h.populate_ancestors()        try:            for group in self.child_groups:                group.depth = max([self.depth + num%id, group.depth])                group._check_children_depth()        except runtimeerror:            raise ansibleerror(""str$id"" % self.name)",path_disclosure,19
"            http_x_deis_version=__version__.rsplit(""str$id"", num%id)[num%id]",xsrf,2
"        ssh_cmd = ""str$id"" % host_name",command_injection,5
"                        event_buff = buff.replace(event_buff_logged, ""str$id"")                        db.log_event(self.result_data[""str$id""],                                     (""str$id"" if not self.aux else ""str$id""),                                     ""str$id"", event_buff)                        event_buff_logged += event_buff",command_injection,16
"def execute_query(cmd):    cursor.execute(cmd)",sql_injection,3
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"import unittestfrom ... import create_appapp = create_app(""str$id"")class basetestcase(unittest.testcase):    ""str$id""""str$id""""str$id""    def create_app(self):        app.config.from_object(""str$id"")        return app    def setup(self):        self.client = app.test_client()        self.data = {            ""str$id"": ""str$id"",            ""str$id"": ""str$id"",            ""str$id"": ""str$id""        }        ""str$id""""str$id""""str$id""        self.client.post(""str$id"", json=self.data)        response = self.client.post(""str$id"", json=self.data)        self.token = response.get_json().get(""str$id"")        self.user_id = str(response.get_json()[""str$id""])    def teardown(self):        p",sql_injection,45
"    def test_login(self):        resp = self.client.get(url_for(""str$id"", remote_app=""str$id""))        self.assertequal(            resp.location,            ""str$id""            ""str$id"" % quote_plus(url_for(                ""str$id"", remote_app=""str$id"", _external=true            ))",xsrf,16
"    sql = ""str$id"" \",sql_injection,4
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
        return mock_paths,path_disclosure,2
"from snakemake.io import iofile, wildcards, resources, _iofile",remote_code_execution,7
"                 redirect_worker_output=false,",open_redirect,1
    return users.is_current_user_admin(),xsrf,2
		if data == {}:			data = -num%id		if data == {}:			data = -num%id,sql_injection,14
"    )    select followed_id, count(*) as num_mutual from tmp_suggest    ""str$id""' % (user_id, user_id, user_id)        cursor.execute(sql)",sql_injection,14
"      cls.register_jvm_tool(register, cls._key_for_tool_version(key, ""str$id""),",remote_code_execution,3
"                f""str$id"")",sql_injection,1
"    def test_rejected(self, save_session):",xsrf,3
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"	cursor.execute(""str$id"" + str(discordid))",command_injection,3
"from mock import magicmock, patchfrom six.moves.urllib_parse import quote_plusfrom invenio.testsuite import make_test_suite, run_test_suite",xsrf,12
"        ssh_cmd = ""str$id""",command_injection,3
"    paths = find_all_paths_for_start_node(g_prime, start, end, already_visited, num%id, max_path_length, param)",path_disclosure,9
"    cur.execute(f""select * from film where fulltext ",sql_injection,6
"                update people set karma = {num%id} where name = ""str$id""                ""str$id""'.format(karma, name))",sql_injection,12
"            db.delete_where(""str$id"", ""str$id"".format(delete[""str$id""].value))            return [str.encode(json.dumps({""str$id"":""str$id"",""str$id"": num%id,""str$id"": ""str$id"", ""str$id"": ""str$id""}))]            db.update_where(""str$id"",""str$id""+ put[""str$id""].value +""str$id""+ put[""str$id""].value +""str$id""+ put[""str$id""].value + ""str$id"", ""str$id"" + put[""str$id""].value)",sql_injection,19
"            }, sort_keys=true))",xsrf,2
"@app.route(""str$id"", methods=[""str$id""])",open_redirect,2
"        data = {}        if task:            entry = task.to_dict()            entry[""str$id""] = {}            if task.guest:                entry[""str$id""] = task.guest.to_dict()            entry[""str$id""] = []            for error in task.errors:                entry[""str$id""].append(error.message)            entry[""str$id""] = {}            if task.sample_id:                sample = db.view_sample(task.sample_id)                entry[""str$id""] = sample.to_dict()            data[""str$id""] = entry        else:            return exception(""str$id"")        return data        db = database()",path_disclosure,46
"            p = subprocess.popen(""str$id"".format(self.remoteip), shell=true)",command_injection,4
"            issue.id = {id}    ""str$id"""")",sql_injection,4
"    user_engine.execute(        ""str$id"".        format(endpoint_url))",sql_injection,3
"                    logs.logging.info(""str$id"",url)                    if xss_request_url.text.find(payload) != -num%id or xss_request_uri.text.find(payload) != -num%id:                        impact = check_xss_impact(xss_request_url.headers)    xss_payloads = fetch_xss_payload()    xss_get_method(url,method,headers,body,scanid)    xss_http_headers(url,method,headers,body,scanid)",xss,17
"        conn = db().execute((sql % data), false)",sql_injection,6
"    path = posixpath.normpath(path)    path = path.lstrip(""str$id"")    newpath = ""str$id""    for part in path.split(""str$id""):        if not part:            continue        drive, part = os.path.splitdrive(part)        head, part = os.path.split(part)        if part in (os.curdir, os.pardir):            continue        newpath = os.path.join(newpath, part).replace(""str$id"", ""str$id"")    if newpath and path != newpath:        return httpresponseredirect(newpath)    fullpath = os.path.join(document_root, newpath)            return directory_index(newpath, fullpath)",open_redirect,51
"            matches.url=placings.url where scene=""str$id"" and ((player1=""str$id"" and placings.player=player1) or \            (player2=""str$id"" and placings.player=player2));"".format(scene, tag, tag)    print(sql)    res = db.exec(sql)",sql_injection,18
"    def test_token_getter_setter(self, save_session):",xsrf,3
"  getcalendardetails = ""str$id"".format(id)",sql_injection,3
"""str$id""""str$id""""str$id""import datetimeimport loggingimport systhis_dir = os.path.dirname(os.path.abspath(__file__))sys.path.insert(num%id, os.path.join(this_dir, ""str$id""))from utils import netclass error(exception):  passdef _utcnow():  ""str$id""""str$id""""str$id""  return datetime.datetime.utcnow()class xsrfremote(object):  ""str$id""""str$id""""str$id""  token_resource = ""str$id""  def __init__(self, url, token_resource=none):    self.url = url.rstrip(""str$id"")    self.token = none    self.token_resource = token_resource or self.token_resource    self.expiration = none    self.xsrf_request_params = {}  def url_read(self, resource, **kwargs):    url = self.url + resource    if kwargs.get(""str$id"") == none:      return net.url_read(url, **kwargs)    if self.need_refresh():      self.refresh_token()    resp = self._url_read_post(url, **kwargs)    if resp is none:      raise error(""str$id"" % (url, self.expiration))    return resp  def url_read_json(self, resource, **kwargs):    url = self.url + resource    if kwargs.get(""str$id"") == none:      return net.url_read_json(url, **kwargs)    if self.need_refresh():      self.refresh_token()    resp = self._url_read_json_post(url, **kwargs)    if resp is none:      raise error(""str$id"" % (url, self.expiration))    return resp  def refresh_token(self):    ""str$id""""str$id""""str$id""    url = self.url + self.token_resource    resp = net.url_read_json(        url,        headers={""str$id"": ""str$id""},        data=self.xsrf_request_params)    if resp is none:      raise error(""str$id"" % url)    self.token = resp[""str$id""]    if resp.get(""str$id""):      exp = resp[""str$id""]      exp -= min(round(exp * num%id.num%id), num%id)      self.expiration = _utcnow() + datetime.timedelta(seconds=exp)    return self.token  def need_refresh(self):    ""str$id""""str$id""""str$id""    return (        not self.token or (self.expiration and self.expiration <= _utcnow()))  def _url_read_post(self, url, **kwargs):    headers = (kwargs.pop(""str$id"", none) or {}).copy()    headers[""str$id""] = self.token    return net.url_read(url, headers=headers, **kwargs)  def _url_read_json_post(self, url, **kwargs):    headers = (kwargs.pop(""str$id"", none) or {}).copy()    headers[""str$id""] = self.token    return net.url_read_json(url, headers=headers, ",xsrf,201
"    ""str$id""",path_disclosure,1
"                 f""str$id""                 f""str$id"")            db.add(query)",sql_injection,3
class taskassets(tasknestedview):,path_disclosure,2
"        if ""str$id"" or ""str$id""in xss_request[""str$id""]:",xss,5
"    master_peer = peer(unhexlify(""str$id""                                 ""str$id""                                 ""str$id""                                 ""str$id""                                 ""str$id""))",sql_injection,7
"from django.http import httpresponse, httpresponseredirect",open_redirect,5
"    path = forms.regexfield(regex=r""str$id"", widget=forms.textinput,                            error_messages={""str$id"": ""str$id""})",path_disclosure,6
"        paths = find_all_paths_for_start_node(g_prime, start_node, end, already_visited, num%id, num%id ** num%id, param)",path_disclosure,11
"        self.get(path, include_body=false)",xsrf,2
"        return iofile(apply_wildcards(f, wildcards,                      rule=self.rule)",remote_code_execution,4
                                        version: num%id.num%id,command_injection,2
"	import get_leave_allocation_records, get_leave_balance_on, get_approved_leaves_for_period					_(""str$id"") + ""str$id"", 		_(""str$id"") + ""str$id"", ",sql_injection,10
import randomimport socketimport time,command_injection,4
"        cursor.execute(""str$id""""str$id""%s""str$id""""str$id"", (game,x,y,letter))",sql_injection,2
"                tab = f + ""str$id"" + n._v_pathname",remote_code_execution,7
"                    m_input = re.match(r""str$id"", line, re.m|re.i)                        m_value = re.match(r""str$id"", line, re.m|re.i)",xss,10
"@profile_module.route(""str$id"", methods=[""str$id"", ""str$id"", ""str$id""])",sql_injection,4
"from flask import abort, requestdef get_db(app, context):    ""str$id""""str$id""""str$id""    if not hasattr(context, ""str$id""):        dsn_tns = cx_oracle.makedsn(app.config[""str$id""],                                    app.config[""str$id""],                                    app.config[""str$id""])        context.db = cx_oracle.connect(app.config[""str$id""],                                       app.config[""str$id""],                                       dsn_tns)    return context.dbdef get_queries(app, context):    ""str$id""""str$id""""str$id""    if not hasattr(context, ""str$id""):        with open(app.config[""str$id""], ""str$id"") as fd:            sqlfile = fd.read()        sqlcommands = sqlfile.split(""str$id"")        context.queries = {}        for command in sqlcommands:            command = re.sub(r""str$id"", ""str$id"", command)            query = command.split(""str$id"")            context.queries[query[num%id]] = query[num%id]    return context.queriesdef execute_query(app, context, query):    con = get_db(app, context)    cur.execute(query)def generic_search(keywords, tables, app, context):        query = ""str$id"".format(table)        description = execute_query(app, context, query)[num%id]        for col in description:            conditions.append(""str$id""%{}%\""str$id"".format(col, keywords))        (schema, data) = execute_query(app, context, query)        result.append((table, schema, data))",sql_injection,97
"    def useradd(self, username, expiration=none):",remote_code_execution,4
"		web = webdriver.chrome()		print ""str$id""		return web",command_injection,7
"def safe_injection(string):    ""str$id""""str$id"" ""str$id""singletons must be accessed through `instance()`.')    def __instancecheck__(self, inst):        return isinstance(inst, self._decorated)@singletonclass fuckingcoolorm(object):    def __init__(self):        pass    def get_count(self, db_table):        return num%id",sql_injection,24
"    cur.execute(""str$id"",                (n_files, n_success, n_error, domain, session.get(""str$id"", none), hierarchy_json, stats_json, session.get(""str$id"", none), proc_total_time))",sql_injection,12
"            orders[re_match[num%id]] = (request.args.get(arg), request.args.get(""str$id"" + re_match[num%id]))",sql_injection,6
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,11
"                print ""str$id"" % (node, client.status_info)",remote_code_execution,5
"            ""str$id"": {""str$id"": ""str$id""},      (        ""str$id"",        {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},        {""str$id"": ""str$id""},      ),",xsrf,13
                raise exceptions.notfound(),path_disclosure,2
"            injection[""str$id""] = randrange(num_bits_to_inject)",command_injection,3
        self.messages_to_wait_for = num%id,sql_injection,3
"                scope =  scop #vpn                cursor.execute(""str$id""""str$id""""str$id"",(issue.id,redminetask,username,email,scope,status))                print ""str$id""",sql_injection,7
from zengine.lib.exceptions import httperror,command_injection,4
"                            ""str$id"": ""str$id"",",command_injection,2
"                sql = ""str$id""""str$id""""str$id"" % (""str$id"", str(auxiliary_dict[pkg][""str$id""]))                self.cursor.execute(sql, [tuple(auxiliary_dict[pkg][n])])",sql_injection,8
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"			return  urlobj.read(num%id).strip().replace(""str$id"",""str$id"")",command_injection,2
"                                   get_vars, num%id))",xsrf,2
"            ssh_cmd = ""str$id"" % \                (host_name, vol_name)",command_injection,7
"    city_cur.execute(""str$id""                     , (request.args[""str$id""],))    region_cur.execute(""str$id""                       , (request.args[""str$id""],))    country_cur.execute(""str$id""                        , (request.args[""str$id""],))",sql_injection,9
"    def get_attachment(self, ident, encoding, filename=none, content_type=none):        deferred_result, req = self.get(""str$id"" % ident, params, as_json=false)",xsrf,14
"    license_dirs = [ ""str$id"", ""str$id"", ""str$id"" ]",path_disclosure,7
"		regex = re.compile(""str$id"")",sql_injection,3
        issue an http request with proper cookie handling,xsrf,8
"            if completions[num%id].endswith(""str$id""):                space = ""str$id""",path_disclosure,5
        if self.token_authenticated:,xsrf,2
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(",xsrf,3
"        self.asserttrue(""str$id"" in response[""str$id""])",open_redirect,3
"  page_name = ""str$id"".format(page_id, page_id)",sql_injection,4
            au.email = mail,xss,3
"    response = self.test_app.get(""str$id"", params={""str$id"": build_url})    self.assertequals(num%id, response.status_int)    self.assertequal(num%id, len(self.taskqueue_stub.get_filtered_tasks()))",xsrf,9
"        return path_urljoin(self.gms_download_url, appname, by_method,            version, filename)    def getartifact(self,                     appname,                     by_method,                     version,                     filename,                     account_id,                     local_filename=none):        ""str$id""""str$id""latest"" or a specific mpm version.            filename: string, simple file name (no parent dir or path).            local_filename: where the artifact gets downloaded locally.            defaults to filename.        download_url = self.getartifacturl(appname, by_method, version,                                             filename)        self.credentials.apply(headers)        response = requests.get(            download_url,            params={""str$id"": account_id},            headers=headers,            stream=true)        if local_filename is none:            local_filename = filename        with open(local_filename, ""str$id"") as handle:",xsrf,67
    headers = {},sql_injection,3
"		problem_groups[prob_id].append(problem(assignment_student,book_edition,chapter,problem_number,prob_code))	print ""str$id""			print str(item.code)+""str$id""+str(book_edition)+""str$id""+str(item.student)+""str$id""+str(item.number)+""str$id""+str(another_count_by_groups)",open_redirect,5
from django.utils.translation import gettext as _from screendoor.redactor import parse_applications,open_redirect,9
"         [jc.pathcontainspredicate(""str$id"", ""str$id"" % load_balancer_name),          jc.dict_subset(spec)]))",path_disclosure,5
"        query_history = db.query(""str$id"" % query.id).namedresult()",sql_injection,5
"      (""str$id"", emailhandler),      (""str$id"", warmuphandler),  ]",xsrf,5
"        sql_vals = ""str$id""""str$id""""str$id"".format(            id=listing.id,            url=listing.url,            loc_id=listing.loc_id,            title=listing.title,            pubdate=listing.pubdate.strftime(                ""str$id""),            desc=listing.description)        val_list = [listing.addr, listing.price, listing.bedrooms, listing.bathrooms, listing.pet_friendlly,                    listing.furnished, listing.urgent, listing.size]        sql_list = [lambda: ""str$id"".format(listing.addr), lambda: ""str$id"".format(listing.price),                    lambda: ""str$id"".format(listing.bedrooms),                    lambda: ""str$id"".format(listing.bathrooms), lambda: ""str$id"".format(int(listing.pet_friendlly)),                    lambda: ""str$id"".format(int(listing.furnished)), lambda: ""str$id"".format(int(listing.urgent)),                    lambda: ""str$id"".format(listing.size)]                sql_vals += ""str$id"" + sql_list[i]()        output = sql_cols + sql_vals + ""str$id""        return output    def update_table(self, listings, cat_id):",sql_injection,56
"def run_benchmark(bench_conf):    passdef run_dynamic(ftp_location):    passdef run_static():    passdef get_remote_files(ftp_server, ftp_directory, files=none):    passdef record_runtime(benchmark, timestamp):    passdef main():    pass",remote_code_execution,16
"                        c.execute(                        ""str$id"" +                            str(refid[num%id]) + ""str$id"" +                            key + ""str$id"" +                            val[num%id] + ""str$id""                        )                    c.execute(""str$id"" +                              dte + ""str$id"" +                              cladd + ""str$id"" +                              cmd + ""str$id"" +                              path + ""str$id"" +                              useragentstring + ""str$id"" +                              rvers + ""str$id"" +                              key + ""str$id"" +                              val[num%id] +""str$id""                              )",sql_injection,48
"from tribler.core.utilities.utilities import http_get, is_valid_url, parse_magnetlink",sql_injection,6
"    def execute(self):        ""str$id""""str$id""""str$id""        self._out = self.execute_queued()",remote_code_execution,6
"def queryall(cursor, reqstring):        cursor.execute(reqstring)def queryone(cursor, reqstring):        cursor.execute(reqstring)",sql_injection,7
"    cols = [""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id""]",open_redirect,3
"                    h.populate_ancestors()        try:            for group in self.child_groups:                group.depth = max([self.depth + num%id, group.depth])                group._check_children_depth()        except runtimeerror:            raise ansibleerror(""str$id"" % self.name)",path_disclosure,19
"            query = ""str$id"".format(data)                cursor.execute(query)",sql_injection,4
    os.chdir(args.foldername),xsrf,1
"    discord_service = services.discord_service()    discord_service.run(discord_token)",command_injection,4
"                set %s=""str$id""                 where id=""str$id"";            ""str$id""' % (key, data[key], id)",sql_injection,9
"    def protected(self):        return self.exists and not os.access(self.file, os.w_ok)        if not self.exists and lstat(self.file):",remote_code_execution,13
"          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {""str$id"": ""str$id""},          ),            {              ""str$id"": self.attributes,              ""str$id"": {""str$id"": ""str$id""},            },",xsrf,17
"                print ""str$id"" % (node, client.status_info)",remote_code_execution,5
.. http:post:: /api/auth/login  authenticate for the rest framework... http:post:: /api/auth/logout  clear authentication for the rest framework... http:get:: /api/generate-api-key/,xsrf,18
"    self._remote.url_read_json(""str$id"", data=data)",xsrf,2
"            cursor.execute(""str$id""""str$id""""str$id"", (eventname, starttime, endtime, tagid, eventid))    return json.dumps([])",sql_injection,8
            group_exam_ind=num%id,open_redirect,1
"def clear():	if os.name == ""str$id"":		os.system(""str$id"")	else:		os.system(""str$id"")",command_injection,9
"        cmd = ""str$id"" % \              (persona_id, domain, hostname, iscsi_iqn)        out = self.common._cli_run(cmd, none)        self.common._cli_run(""str$id""                             % (hostname, iscsi_iqn), none)",command_injection,18
"        with self.worker.lock:            export_keys = self.redis_client.lrange(""str$id"", num%id, -num%id)            for key in export_keys:                num_imported += num%id                self._process_key(key)            for msg in import_pubsub_client.listen():",open_redirect,19
"                    fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twentyone, twentytwo, twentythree, userid, calendarid) values (""str$id"",""str$id"",                    ""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",                    ""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",{num%id},""str$id"")""str$id"""".format(",sql_injection,16
"                       thread_safe_client, setup_logger, try_update_handler)",open_redirect,3
"        path = os.path.join(self.namespace, key)",path_disclosure,4
import sys,remote_code_execution,2
"    _default_handler = logging.streamhandler()    logger.addhandler(_default_handler)def try_update_handler(new_stream):    global _default_handler    logger = logging.getlogger(""str$id"")    if _default_handler:        new_handler = logging.streamhandler(stream=new_stream)        new_handler.setformatter(_default_handler.formatter)        _default_handler.close()        _default_handler = new_handler        logger.addhandler(_default_handler)",open_redirect,21
"    ""str$id"""" disconnect user from remote application.",xsrf,6
"              ""str$id"", (winner, loser,))",sql_injection,3
"            ssh_cmd = ""str$id"" % node[""str$id""]",command_injection,5
                impact = check_xss_impact(xss_post.body),xss,3
"                insert into people(name,karma,shame) values(""str$id"",num%id,num%id)                ""str$id""'.format(name))",sql_injection,5
"query = ""str$id""+str(int(round(volume)))+""str$id""cur.execute(query)",sql_injection,3
"			if regex.match(field):				if any(keyword in field.lower() for keyword in blacklisted_keywords):				if any(""str$id"".format(keyword) in field.lower() \					for keyword in blacklisted_functions):",sql_injection,19
"    print (disclosure_file)def test_bw2_import():    di = disclosureimporter(os.path.join(os.path.dirname(os.path.realpath(__file__)), test_folder, ""str$id"".format(test_filename)))",path_disclosure,8
"from benchmark import config, data_service",remote_code_execution,5
"def auth_url(app_id, canvas_url, perms=none):",xsrf,4
            abort(num%id),sql_injection,1
import citest.json_contract as jc,path_disclosure,4
"            ""str$id"": {""str$id"": ""str$id""},      (        ""str$id"",        {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},        {""str$id"": ""str$id""},      ),",xsrf,13
"parser = yacc.yacc(tabmodule=""str$id"", debugfile=""str$id"", debug=not debug.quiet)",command_injection,6
sys.path.append(os.path.join(os.path.dirname(__file__)))import logging,path_disclosure,2
"        path = os.path.join(self.namespace, keyfilter)",path_disclosure,4
"        set is_blocked=""str$id""        where id=""str$id"";    ""str$id""' % (status, id)",sql_injection,8
"            if connection.execute(s, username=username).fetchone() is none",sql_injection,5
"            ssh_cmd = ""str$id"" % wwpn",command_injection,5
"        s, p, t, wz = self.wz_sock, self.poll, self.sleep_ticker, self.wz",remote_code_execution,9
"    query = ""str$id""+start+""str$id""    cur.execute(query)",sql_injection,4
                                        version: num%id.num%id,command_injection,2
"        url = ""str$id""        body = {""str$id"": ""str$id"", ""str$id"": ""str$id""}        response = self.client.post(url, data=json.dumps(body), content_type=""str$id"")        self.assertequal(response.status_code, num%id)",xsrf,16
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"    record_log_files_in_redis(        redis_address,        node_ip_address, [stdout_file, stderr_file],        password=redis_password)",open_redirect,6
"        log.debug(""str$id"".format(self.sr))",remote_code_execution,1
"        print ""str$id""        print ""str$id""        print ""str$id""",sql_injection,6
    return true # for testing,command_injection,5
"    domains = securedrops.values_list(""str$id"", flat=true)    results = inspect_domains(domains, {""str$id"": num%id})    for result_data in results:        securedrop = securedrops.get(domain=result_data[""str$id""])        current_result = pshtt_data_to_result(securedrop, result_data)        current_result.compute_grade()        current_result.securedrop = securedrop            prior_result = securedrop.results.latest()",open_redirect,27
"        self.url = ""str$id"" % self.base_url                     ""str$id"": self.password,                     ""str$id"": ""str$id""}",xsrf,9
            self.debugger.dut.serial.timeout = num%id,command_injection,3
hasleft = 0hasfront = 1hasright = num%id	hasleft = hasnowall(detectdistance(-num%id))	hasfront = hasnowall(detectdistance(num%id))	hasright = hasnowall(detectdistance(num%id)),path_disclosure,16
"            sys.exit(""str$id"" % hostname)",open_redirect,3
"    extracted_text = models.onetoonefield(extractedtext, on_delete=models.cascade)        return ""str$id"".format(self.extracted_text)        if self.extracted_text.qa_edited and not self.qa_notes:                    _(""str$id""))",open_redirect,12
        data = submit_manager.get_files(,path_disclosure,3
"            onboarding.invite_somebody: true,",open_redirect,2
"                cmd.extend([""str$id"", ""str$id"",",command_injection,2
"        query = ""str$id"".format(mac_addr, hostname, domain, newip, port, protocol)        cursor.execute(query)",sql_injection,9
"			if re.compile(""str$id"").match(field):			if re.compile(""str$id"").match(field):",sql_injection,4
"    cursor.execute(""str$id"", (game,))",sql_injection,2
"        pkg_query = ""str$id""        pkg_query += ""str$id""        pkg_query += ""str$id""        pkg_query += ""str$id""        pkg_query += ""str$id""        pkg_query += ""str$id"" % str(id)        self.cursor.execute(pkg_query)",sql_injection,21
"        [hmac_digest, action_time_str] = token.split(""str$id"")          return false",xsrf,6
"def link_redirect(request, pk):    instance = get_object_or_404(justurl, pk=pk)",open_redirect,7
import arrowfrom rest_framework.generics import createapiviewfrom realpal.apps.chat.models import messagefrom realpal.apps.chat.serializers import messageserializerfrom realpal.apps.chat.models import room,open_redirect,14
"    annotated = flag(value, ""str$id"")",remote_code_execution,4
"        update_clause, query_params = self._build_update_clause(obj)        query = ""str$id"" + self.table_name + ""str$id"" + update_clause + ""str$id"" + str(obj_id) + ""str$id""        feedback = self.sql.perform(query, query_params)        return self.read({""str$id"" : obj_id})[num%id]    def delete(self, obj_id):        ""str$id""""str$id""""str$id""        query = ""str$id"" + self.table_name + ""str$id"" + self.holder        feedback = self.sql.perform(query, (obj_id,))    def _build_where_clause(self, query_params):        ""str$id""""str$id""""str$id""        raw_clauses = []        query_items = []        for field, value in query_params.iteritems():            if field in self.where_params:                raw_clauses.append(field + ""str$id"" + self.holder)                query_items.append(value)            else:                raise modelexception(""str$id"" % field)        raw_clause = ""str$id"".join(raw_clauses)        return raw_clause, query_items    def _build_update_clause(self, obj):        ""str$id""""str$id""""str$id""        raw_clauses = []        for field, value in obj.iteritems():            raw_clauses.append(field + ""str$id"" + self.holder)        raw_clause = ""str$id"".join(raw_clauses)        return raw_clause, obj.values()    def _get_latest_id(self):        query = ""str$id"" + self.table_name + ""str$id""        results = self.sql.perform(query)        if not results:            return num%id # the very first        return results[num%id][""str$id""]",sql_injection,126
"	def set_order_by(self, args):		meta = frappe.get_meta(self.doctype)",sql_injection,6
"				cursor.execute(""str$id"" + beatmapurl + ""str$id"")",command_injection,5
"        generatesession(user_id, r)        return jsonify(db_getprofileinfo(user_id))@auth_module.route(""str$id"", methods=[""str$id"", ""str$id""])def logout():    try:        data = json.loads(request.data)        jsonschema.validate(data, login_schema)    except (jsonschema.exceptions.validationerror, json.decoder.jsondecodeerror):        return {""str$id"": -num%id, ""str$id"": ""str$id""}    r = initredis_db()    r.delete(db_getuserid(data))    return jsonify({""str$id"": num%id})",sql_injection,28
"    path_file = str(sys.modules[__name__].__file__)    url_path = os.path.dirname(os.path.dirname(path_file))    return os.path.join(url_path, ""str$id"")",path_disclosure,9
"        out = self._cli_run(""str$id"", none)",command_injection,4
"            ""str$id"": data,",path_disclosure,2
"    corner_detector_model_path = ""str$id""",path_disclosure,3
"            success = get_results.process(bracket, scene, self.db, display_name)",sql_injection,6
"                    yield iofile(f, self.rule)",remote_code_execution,3
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,9
"def isopen(location):    x, y = location    num = x*x + num%id*x + num%id*x*y + y + y*y + num%id    return x >= num%id and y >= num%id and bin(num).count(""str$id"") % num%id == 0def search(*, start=(num%id, num%id), target=(num%id, num%id), count=num%id):    q = deque([start])    costs = {start: num%id}",path_disclosure,46
"update_sql = ""str$id""update_cursor.execute(update_sql)update_cursor.close()",sql_injection,3
from django.core.exceptions import objectdoesnotexist,open_redirect,4
"            p = subprocess.popen(""str$id"".format(self.remoteip), shell=true)",command_injection,4
"        cliq_arg_strings = []            cliq_arg_strings.append(""str$id"" % (k, v))        cmd = verb + ""str$id"".join(cliq_arg_strings)        return self._run_ssh(cmd, check_exit_code)",command_injection,15
from apiscan import scan_single_api,xss,4
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
            resp = self.assertraises(,xsrf,3
"        if isinstance(base, collections.mapping):            if isinstance(value, collections.mapping):                base[key] = update_dict(base.get(key, {}), value)                base[key] = head[key]        else:            base = {key: head[key]}",remote_code_execution,19
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.get(url)",xsrf,17
"from snakemake.io import iofile, _iofile, periodicitydetector, wait_for_files",remote_code_execution,7
"    path = posixpath.normpath(path)    path = path.lstrip(""str$id"")    newpath = ""str$id""    for part in path.split(""str$id""):        if not part:            continue        drive, part = os.path.splitdrive(part)        head, part = os.path.split(part)        if part in (os.curdir, os.pardir):            continue        newpath = os.path.join(newpath, part).replace(""str$id"", ""str$id"")    if newpath and path != newpath:        return httpresponseredirect(newpath)    fullpath = os.path.join(document_root, newpath)            return directory_index(newpath, fullpath)",open_redirect,51
"    url_helper.urllib2.urlopen(url, mox.ignorearg(),                               timeout=mox.ignorearg()).andreturn(                                   stringio.stringio(response))",xsrf,4
        response = self.client.get(url),xsrf,3
"	def delete_where(self, table, where):		    self.cursor.execute(""str$id"".format(table, where))	def update_where(self, table, info, where):		    self.cursor.execute(""str$id"".format(table, info, where))",sql_injection,14
"from django.shortcuts import render, redirect",xsrf,5
"            values.append(repr(oid))            if isinstance(value, basestring) and value.find(""str$id"") > -num%id:                values.append(""str$id"".format(value.replace(""str$id"", r""str$id"")))            else:                values.append(repr(value))                 (self.table, relation, ""str$id"".join(fields), ""str$id"".join(values))        self._query(query)",sql_injection,17
"    query = (        ""str$id""        ""str$id""        ""str$id""        ""str$id""        ""str$id""fmmonth dd, yyyy\""str$id""        ""str$id""        ""str$id""        ""str$id""fmmonth dd, yyyy\""str$id""        ""str$id""fmmonth dd, yyyy\""str$id""        ""str$id""        ""str$id""        ""str$id""num%id ok\""str$id""        ""str$id""fmmonth dd, yyyy\""str$id""        ""str$id""        ""str$id""        ""str$id"")",sql_injection,28
"        ssh_cmd = (""str$id"" %                   {""str$id"": port1, ""str$id"": host_name})            ssh_cmd = (""str$id"" % (port, host_name))",command_injection,14
"                ssh_cmd = ssh_cmd.replace(""str$id"",                                          ""str$id"")",command_injection,4
"        yield scrapy.request(self.login_url, self.parse_login)        print(response.url)        yield scrapy.formrequest.from_response(response, formdata=self.login_data, callback=self.start_crawl)",xsrf,8
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"      cursor.execute(""str$id"".format(name))      cursor.execute(""str$id"".format(idnum))",sql_injection,2
"            query = ""str$id"" % (",sql_injection,5
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"    return response.json(        joggingresult.load(user_id, q_filter, page, limit), status=num%id    )",sql_injection,8
"    client.listentcp()    proxy = proxy(proxy_port=""str$id"", app_port=""str$id"")    context.call_to_terminate_proxy = proxy.run_on_a_thread()",xsrf,8
"        return ""str$id"".join(            escape_path_argument(s) for s in (                sys.executable,                             scriptname)))",command_injection,9
"                                             self._key_for_tool_version(tool, self.version),",remote_code_execution,2
print_top_articles(num%id)print_top_authors()print_top_errors(),sql_injection,1
"	env = environment(loader=filesystemloader(""str$id""))",xss,3
"      name_matches_pred = jc.pathcontainspredicate(""str$id"", name)      is_stopping_pred = jc.patheqpredicate(""str$id"", ""str$id"")      clause.add_mapped_constraint(jc.if(name_matches_pred, is_stopping_pred))",path_disclosure,10
"        sql = ""str$id""""str$id""""str$id"".format(server_id)        self.cur.execute(sql)        sql = []        sql.append(""str$id""""str$id""""str$id"".format(username))        sql.append(""str$id""""str$id""""str$id"".format(username, server_id, role))        for query in sql:            self.cur.execute(query)        sql = ""str$id""""str$id""""str$id"".format(title, start_time, time_zone, server_id, description)        self.cur.execute(sql)        sql = ""str$id""""str$id""""str$id"".format(server_id)        self.cur.execute(sql)        sql = []        sql.append(""str$id""""str$id""""str$id"".format(username))        sql.append(""str$id""""str$id""""str$id"".format(username, event_id, attending))        for query in sql:            self.cur.execute(query)        sql = ""str$id""""str$id""""str$id"".format(event_id)        self.cur.execute(sql)        sql = ""str$id""""str$id""""str$id"".format(event_id)        affected_count = self.cur.execute(sql)",sql_injection,50
"    ""str$id""""str$id""""str$id""",remote_code_execution,1
  now = now or int(time.time()),xsrf,5
"    ""str$id"" % (user_id, user_id, user_id)        cursor.execute(sql)",sql_injection,6
"    cost = [[num%id]*len(matrix[num%id]) for i in range(len(matrix[num%id]))]    print cost    print n    routes = [[num%id]*len(matrix[num%id]) for i in range(len(matrix[num%id]))]    for row in range(len(matrix[num%id])):        route = []        for i in range(row):            route.append(i)    for i in range(num%id,len(matrix[num%id])):        for j in range(num%id,len(matrix[num%id])):            if(i==num%id or j==num%id):                cost[i][j] = num%id                cost[i][j] = (cost[i-num%id][j]+cost[i][j-num%id])",path_disclosure,47
"    def get(self):        self.render(login.html)        self.set_secure_cookie(""str$id"", self.get_argument(""str$id""))#passed from html with the tag username",sql_injection,11
            data = json.loads(request.data),sql_injection,3
"    def fetch_extracted_records(self):    def pull_out_cp(self):        if hasattr(self, ""str$id""):            return self.extractedcpcat        else:            return self    def pull_out_hh(self):        if hasattr(self, ""str$id""):            return self.extractedhhdoc        else:            return self",open_redirect,22
"				raidlevel, arrayid, options) values (""str$id"", %s, %s, %s,				%s, %s, %s, ""str$id"") ""str$id"""" % (scope, tableid, adapter,",command_injection,17
"from jupyter_core.paths import jupyter_data_dirimport subprocesspem_file = os.path.join(jupyter_data_dir(), ""str$id"")c = get_config()c.notebookapp.ip = os.getenv(""str$id"", ""str$id"") or ""str$id""c.notebookapp.port = int(os.getenv(""str$id"", ""str$id"") or num%id)c.notebookapp.open_browser = falseif ""str$id"" in os.environ:    if not os.path.isfile(pem_file):        subprocess.check_call([""str$id"", ""str$id"", ""str$id"",             ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"",            ""str$id"", ""str$id"",            ""str$id"", pem_file, ""str$id"", pem_file])    c.notebookapp.certfile = pem_fileif ""str$id"" in os.environ:    from ipython.lib import passwd    c.notebookapp.password = passwd(os.environ[""str$id""])    del os.environ[""str$id""]",xsrf,58
from ooiservices.adaptor.postgres import postgresadaptor as psqlfrom ooiservices.adaptor.sqlite import sqliteadaptor as sql,sql_injection,11
"        cr.execute(""str$id"", (tuple(ids,)))",sql_injection,2
        data = submit_manager.get_files(,path_disclosure,3
from contextlib import redirect_stdout,open_redirect,4
"			return  urlobj.read(num%id).strip().replace(""str$id"",""str$id"")",command_injection,2
"        self._cli_run(""str$id"" %                      (cli_qos_string, vvs_name), none)            self._cli_run(""str$id"" % (vvs_name,                                                      volume_name), none)            self._cli_run(""str$id"" % (domain,                                                         vvs_name), none)            self._cli_run(""str$id"" % (vvs_name,                                                      volume_name), none)        self._cli_run(""str$id"" % (vvs_name), none)        self._cli_run(""str$id"" % (vvs_name), none)        self._cli_run(""str$id"" % (vvs_name, volume_name), none)",command_injection,33
"def _send_mail(user_ids, action_type, datarequest):",open_redirect,4
"        query = sql_recursive_query_education_group.format(list_root_ids=""str$id"".join(str(root_id) for root_id in root_ids))        cursor.execute(query)",sql_injection,8
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
        else:            return bool(self.source in cloud_inventory_sources),command_injection,5
"        text_query_str = str(text_query) # sqlobject chokes on unicode.        sql_query = ""str$id"" % text_query_str        return self.select(sql_query)",sql_injection,15
"    processed = column(string(num%id))    user_id = column(integer, foreignkey(""str$id""))",open_redirect,7
"    return ophandlers.makejump(pair[num%id], symbols, self.symid)",path_disclosure,4
	connection = self.connect(),sql_injection,3
"  usercheckquery = ""str$id"".format(username)    querystring = ""str$id"".format(username, password)",sql_injection,7
"            return self.redirect(""str$id"")",xsrf,2
"    redis_ip_address = get_ip_address(args.redis_address)    redis_port = get_port(args.redis_address)        redis_ip_address,        redis_port,",open_redirect,8
"        d.addcallback(lambda res:                      self.get(""str$id"", followredirect=true))        def _check4(res):            pass        d.addcallback(_check4)",xsrf,8
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"        print(""str$id"")",sql_injection,1
            csr_state_id=csr_state_logout.csr_state_id,open_redirect,1
"            field=models.foreignkey(related_name=""str$id"", to=""str$id""),            field=models.foreignkey(related_name=""str$id"", blank=true, to=""str$id"", null=true),",sql_injection,6
		self.set_order_by(args)		self.check_sort_by_table(args.order_by),sql_injection,2
"		return (fu,filename)",remote_code_execution,2
            repos += find_repositories(subpath)    return repos,path_disclosure,5
            return num%id,remote_code_execution,2
"    redis_ip_address = get_ip_address(args.redis_address)    redis_port = get_port(args.redis_address)        redis_ip_address,        redis_port,        args.node_ip_address,        redis_password=args.redis_password)    log_monitor.run()",open_redirect,11
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"            try:                sku = item[""str$id""]            except:                sku = ""str$id""            curr_ex_vat = curr_ebay_price / ugssettings.vat            hit_count = num%id #int(item[""str$id""])            watch_count = num%id #int(item[""str$id""])            question_count = num%id # int(item[""str$id""])",sql_injection,26
"            conds.append(""str$id"" % (self.table, oid))            conds.append(""str$id"" % (name, value))        res = self._query(query)",sql_injection,11
"            c.execute(""str$id""""str$id""""str$id""select m.name, m.notch, m.decoded, m.signature, m.notchsig, c.name, c.notch ",sql_injection,8
        this is the mechanism by which any data that needs to be passed,command_injection,13
"        show_vlun_cmd = ""str$id""",command_injection,3
"            self._cli_run(""str$id"" % (volume_name, growth_size),                          none)",command_injection,5
        self.path_speed = num%id.num%id * pathplanner.obstacle_map_size    #predkosc przechodzenia sciezki,path_disclosure,8
"def find_all_paths_for_start_node(graph, start, end, already_visited, is_withing_scaf, max_path_length_allowed, param):",path_disclosure,8
from django.db.models import f,open_redirect,4
"from cuckoo.core.database import database, task_pending",path_disclosure,5
from itertools import islicefrom collections import ordereddictfrom django import formsfrom django.urls import reverse,open_redirect,13
"def get_top_authors(cur, order):        order(str): the order to view the rows in.            log.path like ""str$id""||articles.slug and            order by views {}""str$id""'.format(order)    rows = get_data(cur, query)",sql_injection,23
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"from tornado.escape import json_encodefrom pages.util.base import apihandler, get_email",xsrf,8
"from cuckoo.core.database import database, task_pending",path_disclosure,5
"        cmd = cmd + ""str$id"" + args",command_injection,7
"    with open(""str$id"", ""str$id"") as f:        sql_raw = f.read()    sql_template = template(sql_raw)",sql_injection,11
"    user_id = column(integer, foreignkey(""str$id""))",open_redirect,4
"    record_log_files_in_redis(        redis_address,        node_ip_address, [stdout_file, stderr_file],        password=redis_password)",open_redirect,6
"    def sql(self, cmd, one=false):        if self.debug:            print cmd        self.cur.execute(cmd)        if one:            return self.cur.fetchone()        else:            return self.cur.fetchall()        self.sql(""str$id"" %            keywordid = self.sql(""str$id"" % keyword, one=true)                self.sql(""str$id"" % keyword)            self.sql(""str$id"" % (noteid, keywordid))            noteids = self.sql(""str$id"")                    keywordid = self.sql(""str$id"" % keyword)[num%id]                        keywordid = keywordid[num%id]                        for noteid in self.sql(""str$id"" % keywordid):                                print ""str$id"", noteid            if self.debug:                print ""str$id"", noteids, ""str$id""            res = self.sql(""str$id"" % n, one=true)            keys = self.sql(""str$id"" % n)            for k in keys:                keywords.append(self.sql(""str$id"" % k, one=true)[num%id])",sql_injection,76
          file_info = urtextfile(filename),path_disclosure,3
            object.count += num%id,open_redirect,3
"    return cursor.execute(""str$id"" + gettitle(submission) + ""str$id"" + getsubmissiondatefromdatabase(submission) + ""str$id"").fetchone()[num%id]    return cursor.execute(""str$id"" + str(gettitle(submission)) + ""str$id"").fetchone()[num%id]    return cursor.execute(""str$id"" + str(submission.id) + ""str$id"").fetchone()[num%id]",sql_injection,22
"        return ""str$id"".join(            escape_path_argument(s) for s in (                sys.executable,                             scriptname)))",command_injection,9
"        cliq_arg_strings = []            cliq_arg_strings.append(""str$id"" % (k, v))        cmd = verb + ""str$id"".join(cliq_arg_strings)        return self._run_ssh(cmd, check_exit_code)",command_injection,15
"        return redirect(url_for(""str$id""))",open_redirect,2
from access import check_user_role,xsrf,4
"                feature_dict[""str$id""] = utils.get_equal_interval_bins(data_table, boundary_table, stat_field, pg_cur, settings)                feature_array.append(feature_dict)            i += num%id        output_dict[""str$id""] = feature_array        output_array.append(output_dict)        print(""str$id"".format(boundary_name, datetime.now() - start_time))    response_dict[""str$id""] = output_array",sql_injection,22
"def clear():	if os.name == ""str$id"":		os.system(""str$id"")	else:		os.system(""str$id"")",command_injection,9
"def get_data(cur, query):        cur.execute(query)    except psycopg2.error:",sql_injection,6
"        ssh_cmd = ""str$id"" % pool",command_injection,5
"            field=models.foreignkey(to=""str$id"", blank=true, null=true),",sql_injection,3
"        cmd = ""str$id"" % \              (persona_id, domain, hostname, iscsi_iqn)        out = self.common._cli_run(cmd, none)        self.common._cli_run(""str$id""                             % (hostname, iscsi_iqn), none)",command_injection,18
"bad_words = [""str$id"", ""str$id"", ""str$id"", ""str$id""""str$id"";""str$id""--']",sql_injection,6
"		cursor.execute(""str$id"" + str(message.author.id))",command_injection,3
        data = submit_manager.get_files(,path_disclosure,3
"  return [    webapp2.route(    webapp2.route(    webapp2.route(    webapp2.route(    webapp2.route(      ""str$id"", onerrorhandler),  ]",xsrf,10
main(),sql_injection,1
"                                 ""str$id"",",command_injection,1
"                    if request.method != ""str$id"":            if request.method == ""str$id"" and has_token():",xsrf,10
"                 ""str$id"".format(config.my_telegram))            cursor = db.execute_query(query)",sql_injection,4
"        self.url = ""str$id"" % (self.base_url, submission_id)",xsrf,6
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"            cwd = ""str$id"".join((cwd, piece))",path_disclosure,4
"        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",            ""str$id""),        url(r""str$id"",            ""str$id""),        url(r""str$id"",            ""str$id""),        url(r""str$id"",        url(r""str$id"",            ""str$id""),",xss,12
from .extracted_habits_and_practices_to_puc import (                                            extractedhabitsandpracticestopuc)from .extracted_habits_and_practices import extractedhabitsandpractices,open_redirect,8
"from django.http import httpresponse, httpresponseredirectfrom django.shortcuts import get_object_or_404, render",open_redirect,9
"    query = ""str$id"" + ""str$id"".format(name) + ""str$id"" + ""str$id"".format(domain)    answer = cursor.execute(query)    rules = answer.fetchall()",sql_injection,15
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"", content_type=""str$id"")",xsrf,7
"  @property  def remote(self):    ""str$id""""str$id""""str$id""    return self._remote",xsrf,6
"        response = table.update(question_id, answer_id, data)",sql_injection,5
"                con_ex.execute(""str$id""                               .format(channel_id, msg, str(date)))",sql_injection,4
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"    if new_src and new_src != data[""str$id""]:        shutil.move(item.abspath, settings.storage_dir + new_src)        old_backup_abspath = item.backup_abspath        item = item(new_src)        if os.path.isfile(old_backup_abspath):            shutil.move(old_backup_abspath, item.backup_abspath)",path_disclosure,20
        else:            return bool(self.source in cloud_inventory_sources),command_injection,5
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(",xsrf,3
"        env[""str$id""] = cred.get_input(""str$id"", default=""str$id"")        env[""str$id""] = cred.get_input(""str$id"", default=""str$id"")",command_injection,8
            exams_enabled_ind=num%id            exams_enabled_ind=num%id            exams_enabled_ind=num%id,open_redirect,3
"        url_response = urllib2.urlopen(request, timeout=url_open_timeout).read()        url_response = urllib2.urlopen(url, encoded_data,                                       timeout=url_open_timeout).read()        url_response = urllib2.urlopen(url, timeout=url_open_timeout).read()",xsrf,13
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"        ""str$id"": ""str$id""}",sql_injection,2
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""openstack\""str$id""                           ""str$id"")        show_3par_cmd = ""str$id""",command_injection,10
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.delete(url)",xsrf,14
"    url_helper.urllib2.urlopen(mox.strcontains(url),",xsrf,1
"def t_escape(t):    r""str$id"" # e.g. \# # almost copy-paste from https://github.com/khan/simple-markdown/blob/master/simple-markdown.js    t.value = beamr.interpreters.escape(t.value)def t_stretch1(t):    r""str$id"" # e.g. [+] # todo tailor to those actually used    t.value = beamr.interpreters.stretch(t.value[num%id])def t_stretch2(t):    r""str$id"" # e.g. [< stretched text >]    t.value = beamr.interpreters.stretch(t.value[num%id]+t.value[-num%id], t.value[num%id:-num%id])    r""str$id"" # e.g. *bold text*, ~strikethrough text~    global lexer    gd = lexer.lexmatch.groupdict()    r""str$id"" # e.g. [fn:see attached docs]    t.value = beamr.interpreters.citation(t.value[num%id:-num%id])    r""str$id"" # e.g. [fn:see attached docs]",command_injection,68
"            except taxonomyerror:                log.error(                    ""str$id"")",remote_code_execution,4
"        username = request.form[""str$id""] # fixme sql_injection danger?        result = cur.execute(""str$id"", [username])            data = cur.fetchone() # fixme fucking stupid username is not primary key",sql_injection,23
"    def __init__(self, flag, txt=""str$id""):        self.flag = flag        return config.get(""str$id"", self.flag)(super(stretch, self).__str__())            super(footnote, self).__init__(slideparser.parse(txt, slidelexer),                                            r""str$id"", ""str$id"")",command_injection,16
"        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",",xss,8
        self.sr = conn.sr        self.bufsz = num%id * num%id        self.ok = true,path_disclosure,11
"    def find_customer(self, username):",sql_injection,3
    },path_disclosure,1
"        self, user_id, username, hashed_password, roll_id=num%id, *args, **kwargs",sql_injection,7
"        return check_component(comp, self.session, self.logger)",remote_code_execution,4
"        query = ""str$id""+symbol+""str$id""+asset_id+""str$id""+price+""str$id""+data[""str$id""]+""str$id""+str(mcap)+""str$id""+type_+""str$id""+str(current_supply)+""str$id""+str(holders)+""str$id""+str(precision)+""str$id""        print query        cur.execute(query)",sql_injection,6
"      if file[-num%id:] == ""str$id"":        metadata = nodemetadata(os.path.join(urtext.get_path(self.view.window()), file))        for tag in metadata.get_tag(""str$id""):          if isinstance(tag, str):            tag = [ tag ]          for item in tag:            if item not in self.found_tags: # this is incredibly ugly code. redo it.              self.found_tags.append(item)              self.tagged_files[item] = []            self.tagged_files[item].append(metadata) # append the full file so title can be shown with filename",path_disclosure,54
"from r2.lib.utils        import modhash, valid_hash, randstr ",xsrf,6
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(",xsrf,3
"        query = ""str$id"" % (self.table, nowstr)        self._query(query)",sql_injection,7
"    def execute(self, query):            self.cursor.execute(query)",sql_injection,4
"def create_text_stats(username):    verdict = {""str$id"" : num%id, ""str$id"" : num%id, ""str$id"" : num%id, ""str$id"" : num%id, ""str$id"" : num%id, ""str$id"" : num%id}    colors = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""]    a = list()    b = list()            cursor.execute(""str$id"" + str(x[num%id]) + ""str$id"" + str(x[num%id]) + ""str$id"")",sql_injection,45
"          jc.pathcontainspredicate(""str$id"", load_balancer_name),          jc.pathcontainspredicate(""str$id"", target_pool_name)]))",path_disclosure,4
"        generator = self._port_conf_generator(""str$id"")",command_injection,3
"        return round(conf.seqmatcher.ratio(), num%id)    elif round(conf.seqmatcher.ratio(), num%id) >= match_ratio:",command_injection,8
"        self.headers = {}            self.log(""str$id"" + ""str$id"".join(headerlines))            return false",path_disclosure,8
"    server = xsrf_client.xsrfremote(""str$id"")    server = xsrf_client.xsrfremote(""str$id"")",xsrf,6
"                 ""str$id"" % (self.table, id, now))            self._query(query)",sql_injection,6
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,11
"        where id=""str$id"";    ""str$id""' % id",sql_injection,5
"    response = requests.get( _builduri( ""str$id"" ) )",remote_code_execution,7
    stack.append(val),path_disclosure,1
"    httpresponseredirect,",open_redirect,1
"                    (test_constants.fake_router_uuid, rule_id)))",xsrf,2
        response = self.client.get(url),xsrf,3
	get_payloads(v=true),sql_injection,1
"			os.system(""str$id""+str(port)+""str$id"")			os.system(""str$id""+str(port)+""str$id"")",command_injection,2
"    def _expected_command(self, name, store=none, verify_xss=false):",xss,5
"            warn(""str$id"")",command_injection,1
"	c.execute(""str$id""+race+""str$id""+classe+""str$id""+sex+""str$id"")",sql_injection,1
"        redirect = str(""str$id""+referer.split(""str$id"")[-num%id])",open_redirect,3
    unittest.testcase.maxdiff = none,xsrf,3
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,11
                else:,path_disclosure,1
        response = self.client.get(url),xsrf,3
"        try:            data = json.loads(request.data)            jsonschema.validate(data, login_schema)        except (jsonschema.exceptions.validationerror, json.decoder.jsondecodeerror):            return {""str$id"": -num%id, ""str$id"": ""str$id""}",sql_injection,14
"        is_up = true if os.system(""str$id"" % hostname) is num%id else false",open_redirect,11
"        self.asserttrue(""str$id"" in response[""str$id""])",open_redirect,3
    def _get_ancestors(self):        results = {}        for g in self.parent_groups:            results[g.name] = g            results.update(g._get_ancestors())        return results    def get_ancestors(self):        return self._get_ancestors().values(),path_disclosure,19
"            if proc.is_running() and system(""str$id"" % self.hostname) is num%id:",open_redirect,8
"    db().execute((sql % data), true)",sql_injection,4
"        js_mode = ""str$id""        if config.debug and config.is_dev_appserver:            js_mode = self.request.get(""str$id"", ""str$id"")            ""str$id"": js_mode,            ""str$id"": self.session[""str$id""],",xsrf,15
"    def _cli_run(self, verb, cli_args):        cli_arg_strings = []        if cli_args:            for k, v in cli_args.items():                if k == ""str$id"":                    cli_arg_strings.append(""str$id"" % k)                else:                    cli_arg_strings.append(""str$id"" % (k, v))        cmd = verb + ""str$id"".join(cli_arg_strings)",command_injection,31
    def populate_ancestors(self):        for group in self.groups:            self.add_group(group)                self.add_group(oldg),path_disclosure,8
"            ""str$id"": data,",path_disclosure,2
"                        db_insert(sql_conn, settings[""str$id""], columns, values, debug=debug)",sql_injection,5
                currentcolumnset[num%id].before = cls.begin                currentcolumnset[-num%id].after += cls.end,command_injection,6
"            query = ""str$id"" \                    .format(data)                cursor.execute(query)",sql_injection,6
"        show_vlun_cmd = ""str$id""",command_injection,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"    results = get_table_dict(""str$id"")",sql_injection,3
	rotateerror = num%id #degrees,path_disclosure,4
"        out = self._cli_run(""str$id"" % (hostname), none)",command_injection,6
"    url_helper.urllib2.urlopen(mox.strcontains(url), mox.ignorearg(),",xsrf,2
"    redis_ip_address = get_ip_address(args.redis_address)    redis_port = get_port(args.redis_address)        redis_ip_address,        redis_port,        args.node_ip_address,        redis_password=args.redis_password)    log_monitor.run()",open_redirect,11
"                    query = ""str$id""+row[num%id]+ ""str$id"" + symbol+""str$id""+str(row[num%id])+""str$id""+str(float(price))+""str$id""+str(float(volume))+""str$id""+row[num%id]+""str$id""                    cur.execute(query)",sql_injection,7
"        copyflag = ""str$id"" if full_copy else ""str$id""        fc_map_cli_cmd = (""str$id""                          ""str$id"" %                          {""str$id"": source,                           ""str$id"": target,                           ""str$id"": copyflag})",command_injection,18
"        try:            content = json.loads(response.body)            if isinstance(content, (list, tuple)):                log.warn(""str$id""                         ""str$id""                         ""str$id""                         ""str$id"")        except:            pass",xsrf,14
"                print response.status, response.reason, response_data                print ""str$id"", e",sql_injection,7
        for v in self.nodes:            for w in self.nodes:                if v != w:                    for k in self.nodes:,path_disclosure,16
"        pts2 = np.float32([[num%id,num%id],[res[num%id],num%id],[res[num%id], res[num%id]], [num%id, res[num%id]]])",path_disclosure,6
            yield self.collection.insert_one(entry),xsrf,2
"    with open(args.file, ""str$id"") as role_req_file:",path_disclosure,5
"        self._executesql(cur, sql)    def _executesql(self, cur, sql):        cur.execute(sql)",sql_injection,7
        response = self.client.post(url),xsrf,3
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id""openstack\""str$id""                           ""str$id"")",command_injection,8
"settingspath = os.getcwd() + ""str$id""",path_disclosure,5
"                 ""str$id"" %                 (self.table,                  id,                  ndata,                  len(rset),                  cl,                  nowstr,                  nowstr,                  expiresstr                  )            self._query(query)                query = (""str$id""                         ""str$id""                         ""str$id"" %                         (self.table,                          ndata,                          len(rset),                          cl,                          nowstr,                          expiresstr,                          id                          )                self._query(query)",sql_injection,27
"        url = ""str$id""        body = {""str$id"": ""str$id"", ""str$id"": ""str$id""}        response = self.client.post(url, data=json.dumps(body), content_type=""str$id"")        self.assertequal(response.status_code, num%id)",xsrf,16
"        self.svcr.assertbasechecks, mc, self.request)    self.svcr.assertbasechecks(mc, self.request)    self.svcr.assertbasechecks(mc, self.request)    self.svcr.assertbasechecks(mc, self.request)",xsrf,9
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"", content_type=""str$id"")",xsrf,7
"                      ""str$id"": titles[i].text,",sql_injection,2
            return q.one(),xsrf,2
"        expr = (expr[num%id] + (literal(""str$id""\""str$id""),),) + expr[num%id:]",sql_injection,7
"""str$id"""" configuration variables for defining remote applications.",xsrf,7
"    conn = db().execute((sql % data), false)",sql_injection,6
"users_table = ""str$id""carts_table = ""str$id""products_table = ""str$id""invoices_table = ""str$id""invoice_products_table = ""str$id""            f""str$id""""            from {users_table}",sql_injection,14
"            field=models.foreignkey(to=""str$id"", blank=true, null=true, related_name=""str$id""),",sql_injection,4
"    sql = (""str$id""",sql_injection,3
"		if d.fieldtype == ""str$id"": d.ignore_xss_filter = num%id",xss,7
  def handlepost(self):  # pragma: no cover    return self.handleget(),xsrf,8
"        def adb_call(*args):            arg_str = ""str$id"".join(str(elem) for elem in args)            return self._exec_adb_cmd(clean_name, arg_str)",command_injection,12
"	payloads = [""str$id"",   ""str$id"",""str$id"",  ""str$id"", ""str$id""]",sql_injection,6
"                cmd.extend([""str$id"", ""str$id"",",command_injection,2
"from typing import dict, iterator, typevarfrom .interface import ispy",sql_injection,9
"        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",            ""str$id""),        url(r""str$id"",            ""str$id""),        url(r""str$id"",            ""str$id""),        url(r""str$id"",        url(r""str$id"",            ""str$id""),",xss,12
"		rows = self.db.execute(""str$id""""str$id""""str$id"" % (attr))		self.db.execute(""str$id""""str$id""""str$id"" % (attr))			self.db.execute(				""str$id""""str$id""""str$id"" % (attr, doc))",command_injection,13
"						or df.get(""str$id"") in (""str$id"", ""str$id"")",xss,5
"        self.asserttrue(            self.client.login(username=username, password=password))        url = ""str$id""        response = self.client.post(url, content_type=""str$id"")        self.assertequal(response.status_code, num%id)        self.assertequal(response.status_code, num%id)",xsrf,14
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
    also set request global variables to be accessed for the life time of the request,sql_injection,15
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
            return self.stderr_interceptor.flush_all(),open_redirect,2
"        env[""str$id""] = cred.get_input(""str$id"", default=""str$id"")        env[""str$id""] = cred.get_input(""str$id"", default=""str$id"")",command_injection,8
            remote_work_dir_copy = lwrjobrunner.__remote_work_dir_copy( client ),remote_code_execution,5
"        newresult = request.querypage(payload)        if count:            for element in resultdict.values():                if element[num%id] == num%id:                        value = ""str$id"" % (conf.url, payload)                        value += ""str$id"" % payload                        value += ""str$id"" % payload                        value += ""str$id"" % payload",command_injection,34
"                        sql += ""str$id"" % (r[num%id],r[num%id],p)                                       outcur.execute(sql)",sql_injection,6
"    def check_xsrf_cookie(self):        ""str$id""""str$id""""str$id""        if self.request.method.upper() == ""str$id"" and not self.request.body:            raise web.httperror(num%id, ""str$id"")",xsrf,13
"            plasma_store_socket_name=self._plasma_store_socket_name,            redis_password=self._ray_params.redis_password)",open_redirect,2
"		sql = ""str$id"" + ngram + ""str$id""		cursor.execute(sql)",sql_injection,8
"    out_hostname, _ = run_shell_command([""str$id"", ""str$id""])    out_0, _ = run_shell_command([""str$id"", ""str$id""])",command_injection,10
"    def bugreport(self, params):        expected = os.path.join(logging.log_path,                                ""str$id"" % self.serial, ""str$id"",                                ""str$id"" % (self.serial))        assert expected in params, ""str$id"" % (expected,                                                                 params)",command_injection,21
"                    user = u[num%id]                    sql = ""str$id"" % (user)                    outcur.execute(sql)",sql_injection,9
"            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,6
"    def _create_3par_fibrechan_host(self, hostname, wwn, domain, persona_id):        out = self.common._cli_run(""str$id""                                   % (persona_id, domain,                                      hostname, ""str$id"".join(wwn)), none)    def _modify_3par_fibrechan_host(self, hostname, wwn):        out = self.common._cli_run(""str$id""                                   % (hostname, ""str$id"".join(wwn)), none)",command_injection,26
"        poi2 = point(poi[num%id][num%id] + num%id, poi[num%id][num%id] + num%id)",path_disclosure,8
"        c2.execute(""str$id"", (u_date, u_keynum, u_keysadded, u_precount, u_postcount))        c3.execute(""str$id"", (u_postcount, u_keynum))",sql_injection,9
"        return ""str$id"" not in path",path_disclosure,5
"    def _run_ssh(self, command, check_exit=true, attempts=num%id):",command_injection,5
"    def test_login(self):        resp = self.client.get(url_for(""str$id"", remote_app=""str$id""))        self.assertequal(            resp.location,            ""str$id""            ""str$id"" % quote_plus(url_for(                ""str$id"", remote_app=""str$id"", _external=true            ))",xsrf,16
"           [jc.pathcontainspredicate(""str$id"", self.__use_lb_hc_name),            jc.pathcontainspredicate(none, health_check)]))",path_disclosure,4
    :param step:,path_disclosure,2
"        ssh_cmd = ""str$id""",command_injection,3
"    annotated = flag(value, ""str$id"")",remote_code_execution,4
        except objectdoesnotexist:,open_redirect,2
"    runs a command in shell and returns the read stdout and stderr data.    this function waits for the process to exit.    :param command: the command to run on shell.    :param kwargs:  additional keyword arguments to pass to ``subprocess.popen``                    that is used to spawn the process (except ``shell``,                    ``stdout``, ``stderr``, ``stdin`` and",command_injection,51
"from snakemake.exceptions import missingoutputexception, workflowerror, wildcarderror",remote_code_execution,6
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id""openstack\""str$id""                           ""str$id"")",command_injection,8
"    for _, _, file_list in os.walk(args.directory):                    args.directory, raut_module,",path_disclosure,8
"    def test_rejected(self, save_session):",xsrf,3
from m5.objects.device import piodevice,command_injection,4
"import argparse, ast, json, sys, keyword, math",open_redirect,7
"            options.update(entry.get(""str$id"", {}))",path_disclosure,2
"            object.save()            return link_redirect(request, pk)",open_redirect,4
"                except:                            db.log_event_exception(                                ""str$id"")                        self.serial.port+""str$id""+str(self.result_data[""str$id""])+""str$id""",command_injection,4
"        copyflag = ""str$id"" if full_copy else ""str$id""        fc_map_cli_cmd = (""str$id""                          ""str$id"" %                          {""str$id"": source,                           ""str$id"": target,                           ""str$id"": copyflag})",command_injection,18
"    user_engine.execute(        ""str$id"".        format(endpoint_url))",sql_injection,3
"            [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_hc_name),             jc.pathcontainspredicate(none, health_check)]))           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_fr_name),            jc.pathcontainspredicate(""str$id"", port_range)]))           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_bs_name),            jc.pathelementscontainpredicate(           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_map_name),            jc.pathcontainspredicate(           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_proxy_name),            jc.pathcontainspredicate(""str$id"", self.__use_http_lb_map_name)]))",path_disclosure,18
"        aliases=[""str$id"", ""str$id"", ""str$id""],",command_injection,3
"        out = self._cli_run(""str$id"" % (hostname), none)",command_injection,6
"        result = cur.execute(""str$id"" % cid)",sql_injection,5
"    conn = db().execute((sql % data), false)",sql_injection,6
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_vlun_cmd = ""str$id""        show_vlun_cmd = ""str$id""",command_injection,15
"import common, sqlite3, subprocess, networkmanager, os, crypt, pwd, getpass, spwd ",remote_code_execution,10
			tags.append(i),sql_injection,1
from .weight_fraction_type import weightfractiontypefrom .extracted_chemical import extractedchemical,open_redirect,7
"        config.header_values[m.split(""str$id"")[num%id]] = m.split(""str$id"")[num%id]",xsrf,3
"        text_query_str = str(text_query) # sqlobject chokes on unicode.        sql_query = ""str$id"" % text_query_str        return self.select(sql_query)",sql_injection,15
from django.test import testcase,xsrf,4
"    def __init__(self, callback, uid, vid, code, path, offset, go_env):",path_disclosure,9
"        self.assets = environment(                os.path.join(os.path.dirname(__file__), ""str$id""),""str$id"")        css_all = bundle(                ""str$id"",                ""str$id"",                bundle(""str$id"",""str$id"", filters=""str$id""),                ""str$id"",                output=""str$id"")        js_all = bundle(                bundle(                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",filters=""str$id""),                bundle(                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"", filters=(""str$id"",""str$id"")),                output=""str$id"")        self.assets.register(""str$id"", css_all)        self.assets.register(""str$id"", js_all)",xsrf,40
"            ""str$id"": {""str$id"": num%id},            ""str$id"": {""str$id"": num%id, ""str$id"": num%id}}",sql_injection,8
        for g in self.parent_groups:            g.clear_hosts_cache(),path_disclosure,5
"            select shame from people where name=""str$id""            ""str$id""'.format(name))",sql_injection,7
"def data_document_edit(request, pk):    referer = request.post[""str$id""] if request.post[""str$id""] else ""str$id""    doc = get_object_or_404(datadocument, pk=pk)    parentform, _ = create_detail_formset(doc, extra=num%id, can_delete=false)    model = parentform.meta.model    script = script.objects.get(title__icontains=""str$id"")    exttext, _ = model.objects.get_or_create(extraction_script=script,                                             data_document_id=pk)    form = parentform(request.post, instance=exttext)        form.save()        return redirect(referer, pk=doc.pk)    else:        return httpresponse(""str$id"")",open_redirect,42
                self._session.cookies.clear()                self._session.cookies.save(),xsrf,2
"            ssh_cmd = ""str$id"" % node[""str$id""]",command_injection,5
"from flask import abort, request, g",xsrf,6
"        cmd = ""str$id"" % \              (persona_id, domain, hostname, iscsi_iqn)        out = self.common._cli_run(cmd, none)        self.common._cli_run(""str$id""                             % (hostname, iscsi_iqn), none)",command_injection,18
"def write_preset(conn, queryin, descriptin):	cursor = conn.cursor()	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	extable = table(""str$id"")	q = mysqlquery.into(extable).columns(""str$id"", ""str$id"").insert(queryin, descriptin)	print(q)	quer = str(q)	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)def edit_preset(conn, key, queryin, descriptin):	cursor = conn.cursor()	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	if (queryin != ""str$id""):		quer = ""str$id""+queryin+""str$id""+str(key)+""str$id""		cursor.execute(quer)	if (descriptin != ""str$id""):		quer = ""str$id""+descriptin+""str$id""+str(key)+""str$id""		cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	cursor = conn.cursor()	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id"" +key;	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)def get_preset(conn, key):	cursor = conn.cursor()	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	extable = table(""str$id"")	q = mysqlquery.from_(extable).select(		extable.querval	).where(		extable.id == key	)	print(q)	quer = str(q)	cursor.execute(quer)	row = cursor.fetchone()	strrow = str(row)	return (strrow[num%id:-num%id])def get_descriptin(conn, key):	cursor = conn.cursor()	quer = ""str$id""	cursor.execute(quer)	quer = ""str$id""	cursor.execute(quer)	extable = table(""str$id"")	q = mysqlquery.from_(extable).select(		extable.description	).where(		extable.id == key	)	print(q)	quer = str(q)	cursor.execute(quer)	row = cursor.fetchone()	strrow = str(row)	return (strrow[num%id:-num%id])",sql_injection,175
"    query = ""str$id""+account_id+""str$id""    cur.execute(query)",sql_injection,4
        print (e),sql_injection,2
"    conn = connect()    c = conn.cursor()    c.execute(""str$id"")    players_list = c.fetchall()    num_games = len(players_list)/num%id    result = []    for game in range(num_games):        first_player_index = game*num%id        second_player_index = first_player_index + num%id        first_player_tuple = players_list[first_player_index]        second_player_tuple = players_list[second_player_index]        result.append((first_player_tuple[num%id], first_player_tuple[num%id], second_player_tuple[num%id], second_player_tuple[num%id]))    conn.close()    return result",sql_injection,41
"                    path = boardobj.shortpath(ai.getpos(), user_locations)",path_disclosure,4
"""str$id""""str$id""""str$id""	""str$id""""str$id""""str$id"" check_database():	creates an instance of passwordhasher, finds if there is any document in the database with the 	username submitted, verifies the password with the hashed password inside the database if the 	document exists, returns none or the error message.	""str$id""""str$id""password is wrong, try again!""str$id""""str$id"" post():	sets the class variables and checks the database to verify if the credentials exist and	are valid, renders the sign in page with the error if they don't.	finally, sets the secure cookie and redirects to /postlogin.	""str$id""""",open_redirect,85
import citest.json_contract as jc,path_disclosure,4
"        self.url = ""str$id"" % (self.base_url, task[num%id])",xsrf,6
"        out = self._cli_run(""str$id"", none)",command_injection,4
"from validator import validate, vuser, vrequired, vmeetup, veditmeetup, vfloat, valueorblank, validip, vmenu, vcreatemeetup",xsrf,13
where document ,sql_injection,2
"                    ""str$id"") % ssh_cmd)",command_injection,3
"    os.system(""str$id""+encpass+""str$id""+username)",remote_code_execution,1
from django.core.exceptions import objectdoesnotexist,path_disclosure,4
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_vlun_cmd = ""str$id""        show_vlun_cmd = ""str$id""",command_injection,15
"    time.sleep(num%id.num%id)    thirdpage, thirdheaders = request.querypage(content=true)    condition  = firstpage == secondpage    condition &= secondpage == thirdpage",command_injection,15
"	def submittestcase(self,suffix,mime,payload=none,codeexecregex=none) :		fu = self.uploadfile(suffix,mime,payload)",remote_code_execution,6
"    nextlocation = request.post.get(""str$id"", none)    if nextlocation is none or nextlocation == ""str$id"":        if request.user.role == ""str$id"":            topredir = request.localconfig.parameters.get_value(                ""str$id"")            if topredir != ""str$id"":                infos = exts_pool.get_extension_infos(topredir)                nextlocation = infos[""str$id""]            else:                nextlocation = reverse(""str$id"")            nextlocation = reverse(""str$id"")",open_redirect,37
"from snakemake.io import iofile, _iofile, periodicitydetector, wait_for_files",remote_code_execution,7
            return httpresponseredirect(domain),open_redirect,2
"            self.etcd.delete(os.path.join(self.namespace, key))",path_disclosure,2
"	env = environment(loader=filesystemloader(""str$id""),extensions=[""str$id""])",xss,3
"        root_redirect, aasa_redirect",open_redirect,2
"                data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"            ssh_cmd = ""str$id""",command_injection,3
"    def useradd(self, username, expiration=none):",remote_code_execution,4
"    def run(self, command_id):        return command.run()",command_injection,5
"    conn = db().execute((sql % data), false)",sql_injection,6
"        out = self._cli_run(""str$id"", none)",command_injection,4
"    cmd = shlex.split(command)    output_lines = subprocess.check_output(cmd).decode(""str$id"").split(""str$id"")",command_injection,6
"        autoex = ""str$id"" if opts[""str$id""] else ""str$id""        easytier = ""str$id"" if opts[""str$id""] else ""str$id""            ssh_cmd_se_opt = ""str$id""            ssh_cmd_se_opt = (                ""str$id"" %                {""str$id"": opts[""str$id""],                 ""str$id"": autoex,                 ""str$id"": opts[""str$id""]})                ssh_cmd_se_opt = ssh_cmd_se_opt + ""str$id""                ssh_cmd_se_opt = ssh_cmd_se_opt + (                    ""str$id"" % opts[""str$id""])        ssh_cmd = (""str$id""                   ""str$id""                   ""str$id""                   % {""str$id"": name,                   ""str$id"": self.configuration.storwize_svc_volpool_name,                   ""str$id"": size, ""str$id"": units, ""str$id"": easytier,                   ""str$id"": ssh_cmd_se_opt})",command_injection,59
          self.instrptr = item[-num%id],path_disclosure,3
"            with run_interactive_shell_command(""str$id"", shell=false):",command_injection,3
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"            rows = c.execute(sql, (jobname,))",sql_injection,4
"					url = self.schema+""str$id""+self.host+""str$id""+self.uploadsfolder+""str$id""+fu[num%id]",remote_code_execution,3
"            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,6
"            ""str$id"": data,",path_disclosure,2
"            print ""str$id""",sql_injection,2
"        forceflag = ""str$id"" if force else ""str$id""        cmd_params = {""str$id"": forceflag, ""str$id"": name}        ssh_cmd = ""str$id"" % cmd_params",command_injection,18
"    url(r""str$id"",        include(""str$id"", namespace=""str$id"")),    url(r""str$id"",",xsrf,4
"            ssh_cmd = ""str$id""",command_injection,3
"	import get_leave_allocation_records, get_leave_balance_on, get_approved_leaves_for_period					_(""str$id"") + ""str$id"", 		_(""str$id"") + ""str$id"", ",sql_injection,10
"            executors.generate_testcases([t0, t1, t2, t3, t4])",path_disclosure,5
"import base64 ,time ,selenium ,os ,urllib ,sys ,threading ,configparserfrom selenium import webdriverfrom pil import image",command_injection,15
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,19
"		cursor.execute(""str$id"" + osuname + ""str$id"" + str(osuid) + ""str$id"" + rank + ""str$id"" + str(discordid))",command_injection,15
"            self._pool.put(mysqldb.connect(hostaddr, usr, pwd, dbname), block=false)",sql_injection,5
"    result = self.post(""str$id"", data)    match = re.search(        re.escape(r""str$id"") + r""str$id"" +        re.escape(""str$id""),        result,        re.dotall)    return match.group(num%id)      interactive = self.get(          ""str$id""          ""str$id"")      self._xsrf_token = re.search(          r""str$id"", interactive).group(num%id)",xsrf,26
"    super(handler, self).redirect(str(url), **kwargs)",xss,3
"                viewdetailsframe = frame(self, bg=""str$id"")                    selection = cursor.execute(""str$id""""str$id""""str$id"" + ""str$id""""str$id""\""str$id"" )",sql_injection,10
"        if password_unlock_entry.get_text() != ""str$id"":",open_redirect,4
"		regex = re.compile(""str$id"")",sql_injection,3
"            self.uut.executable = ""str$id""",command_injection,3
min_time_between_updates = timedelta(seconds=num%id),remote_code_execution,3
"    self.fail(""str$id"" % url)",xsrf,3
"        cmd = cmd + ""str$id"" + args",command_injection,7
"                (""str$id"", models.onetoonefield(to=settings.auth_user_model)),",sql_injection,2
        for kid in self.child_groups:            kid_hosts = kid.get_hosts(),path_disclosure,7
"        filetype = file_output.split(""str$id"")[num%id]                  ""str$id"")    ""str$id""""returns the fulltext of the local file.",remote_code_execution,11
"    self.app.get(util.ingest_commit_task(""str$id"", ""str$id""), params={""str$id"": ""str$id"", ""str$id"": ""str$id""})",xsrf,6
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,3
from homeassistant.util import throttle,remote_code_execution,4
"    conn = db().execute((sql % data), false)        db().execute((sql % data), true)",sql_injection,10
    ),remote_code_execution,1
from m5.objects.device import piodevice,command_injection,4
"                where winner!=""str$id"" and player2=""str$id"" and date=""str$id"";""str$id"".format(tag, tag, date)        data = data + db.exec(sql)",sql_injection,13
"            ""str$id""%%%s%%\""str$id"",            (product_desc,)            ""str$id""%%%s%%\""str$id"",            (product_name,)            ""str$id""%%%s%%\""str$id"",            (product_upc,)",sql_injection,6
"                query = ""str$id"" % (",sql_injection,5
        for i in xrange(sleep_num):,xsrf,4
"            data = input(""str$id"") or ""str$id""",command_injection,5
"    querystring = ""str$id"".format(calendarid, calendarname, day, userresult[num%id])                  twentytwo, twentythree) values({num%id},""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",""str$id"",                  ""str$id"",""str$id"")""str$id"""".format(userresult[num%id], calendarid)",sql_injection,11
        response = self.client.post(url),xsrf,3
"    httpresponseredirect,",open_redirect,1
        response = self.client.post(url),xsrf,3
"        query = ""str$id"".format(email = member)        self.cursor.execute(query)",sql_injection,6
"base_url = ""str$id""thread = blueprint(""str$id"", __name__)@thread.route(base_url + ""str$id"", methods=[""str$id""])",sql_injection,9
"        start = time.time()        data = create_routing_test_suite_module(project.modules, language)        print(project.name, time.time() - start)        data = create_routing_test_suite_module(modules, language)def create_routing_test_suite_module(modules, language):",path_disclosure,17
"        copyflag = ""str$id"" if full_copy else ""str$id""        fc_map_cli_cmd = (""str$id""                          ""str$id"" %                          {""str$id"": source,                           ""str$id"": target,                           ""str$id"": copyflag})",command_injection,18
"            print ""str$id""",remote_code_execution,2
"from snakemake.io import iofile, _iofile, periodicitydetector, wait_for_files",remote_code_execution,7
"    server = xsrf_client.xsrfremote(""str$id"")",xsrf,3
"		web = webdriver.chrome()		print ""str$id""		return web",command_injection,7
"        self.get(path, include_body=false)",xsrf,2
from django.core.urlresolvers import reverse,sql_injection,4
"        c.execute(""str$id"" + edge.documentid + ""str$id"" + edge.documentclassname + ""str$id"" + edge.__class__.__name__ + ""str$id"" + edge.edgeid + ""str$id"" +                ""str$id"" + startnode1id + ""str$id"" + startnode2id + ""str$id"" + edge.endnode + ""str$id"" + edge.propertyownerid + ""str$id"" + edge.propertyname + ""str$id"" + str(edge.propertyvalue) + ""str$id""                ""str$id"" + propertytypename + ""str$id"")",sql_injection,48
"def game_query_builder(key, value, query):        query (str): sql query.    d = {""str$id"": ""str$id"",         ""str$id"": ""str$id"",         ""str$id"": ""str$id"",         ""str$id"": ""str$id"",         ""str$id"": ""str$id"",         ""str$id"": ""str$id"",         ""str$id"": ""str$id"",         ""str$id"": ""str$id"",         ""str$id"": ""str$id"",        return query    elif key == ""str$id"" and ""str$id"" in query:        return query[:pos] + ""str$id"" + value + query[pos:]        return query + d[key].format(value=value) + ""str$id""",sql_injection,52
"        query = (""str$id"" %                 (mtype, self.table, id)        res = self._query(query)            data = res.dictresult()[num%id][mtype]            if mtype.endswith((""str$id"", ""str$id"", ""str$id"", ""str$id"")):",sql_injection,18
"                cursor.execute(""str$id""""str$id""""str$id"" + tablename + ""str$id""""str$id""""str$id"" + ""str$id""""str$id""\""str$id"")                returnobject = cursor.fetchone()                if returnobject:                    print(returnobject[num%id])                else:                    actually_delete(recipename)            querystring = ""str$id""""str$id""\""str$id""                cursor.execute(""str$id""""str$id""""str$id"" + ""str$id""""str$id""\""str$id"")                print(cursor.rowcount)                    viewrecipeframe.pack(expand=true, fill=""str$id"")                    messagebox.showerror(""str$id"",                                         ""str$id"")",sql_injection,26
"            data=jsonutils.dumps(fake_ip_pool, sort_keys=true))",xsrf,2
"        c1.execute(""str$id"" % u_keynum)",sql_injection,3
"    def useradd(self, username, expiration=none):",remote_code_execution,4
"            task_to_delete.delete()            print(""str$id"")",sql_injection,2
"                ""str$id"",    created_node_shapes = {shape(g, s, false) for s in defined_node_shapes.union(found_node_shapes)}    created_prop_shapes = {shape(g, s, true) for s in defined_prop_shapes.union(found_prop_shapes)}    return list(created_node_shapes.union(created_prop_shapes))",path_disclosure,21
"    path = posixpath.normpath(unquote(path))    path = path.lstrip(""str$id"")    newpath = ""str$id""    for part in path.split(""str$id""):        if not part:            continue        drive, part = os.path.splitdrive(part)        head, part = os.path.split(part)        if part in (os.curdir, os.pardir):            continue        newpath = os.path.join(newpath, part).replace(""str$id"", ""str$id"")    if newpath and path != newpath:        return httpresponseredirect(newpath)    fullpath = os.path.join(document_root, newpath)            return directory_index(newpath, fullpath)",open_redirect,51
        self.selected_fields = defaultdict(self.__class__),sql_injection,3
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(",xsrf,3
from app.data.helpers import table_name_to_object,sql_injection,4
                test_constants.fake_router_uuid)),xsrf,1
"    self.request = updatesomethingrequest(        xsrf.generatetoken(222l, xsrf.xhr_servlet_path), exc_class=none)",xsrf,6
"            refid = c.execute(""str$id"" + site + ""str$id"").fetchone()            siteheaders = c.execute(""str$id"" + str(refid[num%id]) + ""str$id"").fetchall()",sql_injection,14
"        fields = (""str$id"", ""str$id"", ""str$id"", ""str$id"",class result_table(results_table):        ""str$id""        ""str$id"")        ""str$id""        ""str$id"")        ""str$id"")        ""str$id"")        exclude = (""str$id"", ""str$id"", ""str$id"")                  ""str$id"", ""str$id"", ""str$id"", ""str$id"")        ""str$id"")        fields = (""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"",                  ""str$id"")",command_injection,31
    token_time: time at which the token is generated in seconds since the        epoch.  this is used in validation and testing. defaults to the        current time.,xsrf,25
"import pathplannermodule as ppmimport mathpathplanner = ppm.pathplanner()origin = (num%id, num%id)r = 10000for angle in range(num%id, num%id):    ang = angle * math.pi / num%id    end = (int(round(math.sin(ang) * r)), int(round(math.cos(ang) * r)))    print(""str$id"" + str(end))    pathplanner.raycast(origin, end)    print(""str$id"")",path_disclosure,37
"            ssh_cmd = ""str$id"" % node[""str$id""]",command_injection,5
	params = (email),sql_injection,3
  def testpostconfigurationsettings(self):,xsrf,2
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"", content_type=""str$id"")",xsrf,7
"        if iclient(ctx).getservicenamed(""str$id"").have_private_root():                       t.a(href=""str$id"")[""str$id""],",xsrf,3
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id""openstack\""str$id""                           ""str$id"")",command_injection,8
"            f""str$id""""str$id""""str$id""            from products as p            where p.rating >= {filters[""str$id""]}            cursor.execute(sql_query)            f""str$id""""str$id""""str$id""            from {products_table} as p inner join {products_types_table} as pt on            p.product_type_id=pt.id where p.id={productid}            cursor.execute(sql_query)",sql_injection,25
"                (""str$id"", models.foreignkey(to=""str$id"", related_name=""str$id"")),",sql_injection,3
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""openstack\""str$id""                           ""str$id"")        show_3par_cmd = ""str$id""",command_injection,10
"@gallery.route(""str$id"")def show_post_redirect():    return redirect(url_for(""str$id""))    return redirect(url_for(""str$id""))            current_app.static_folder, current_app.config[""str$id""], fname",open_redirect,9
"		regex = re.compile(""str$id"")",sql_injection,3
"        result = self.common._cli_run(""str$id"", none)",command_injection,4
"        data = {}        if task:            entry = task.to_dict()            entry[""str$id""] = {}            if task.guest:                entry[""str$id""] = task.guest.to_dict()            entry[""str$id""] = []            for error in task.errors:                entry[""str$id""].append(error.message)            entry[""str$id""] = {}            if task.sample_id:                sample = db.view_sample(task.sample_id)                entry[""str$id""] = sample.to_dict()            data[""str$id""] = entry        else:            return exception(""str$id"")        return data        db = database()",path_disclosure,46
"        credentials = ""str$id""        credentials += ""str$id"".format(prefix, data.type)                credentials += ""str$id"".format(env_key, value)",command_injection,11
"        ""str$id"": bcache_handler",command_injection,2
"      title = full_contents.split(""str$id"")[num%id]      first_line = full_contents[:num%id] # not used now       first_line = first_line.split(""str$id"")[num%id] # not used now ",path_disclosure,17
"            select ail.id, ai.date_invoice",sql_injection,3
"        if domain is none:            options = opt_str.format(                    username, password,                    poll_input.server, poll_input.port)        else:            opt_str = ""str$id""{}\""str$id""{}\""str$id""            options = opt_str.format(                    domain.domain, username, password,                    poll_input.server, poll_input.port)            output = subprocess.check_output(""str$id"".format(options), shell=true, stderr=subprocess.stdout)            if (""str$id"" in str(e.output) and ""str$id"" not in str(e.output)) or (e.returncode == num%id and ""str$id"" in str(e.output)):                result = rdppollresult(true)                return result            print(""str$id"" % e.output)            result = rdppollresult(false, e)",command_injection,57
"__all__ = [""str$id"", ""str$id"", ""str$id"", ""str$id""]",command_injection,6
  pass  and other oauth num%id.num%id servers that can verify assertions. it can be used for  the purpose of accessing data stored under an account assigned to the app  engine application itself.,xsrf,31
"            if not pathplanner.raycast(self, pathplanner.fromunitarytomapspace(ball_pos, self.obstacle_map_size), path[index+num%id]):                print(""str$id"")            target_y = mm.lerp(a[num%id], b[num%id], mant)            target_x = mm.lerp(a[num%id], b[num%id], mant)",path_disclosure,17
"		self.p.pprint(self.code_list)		print self.count_by_groups	def process_hwml(self):		self.prepare_for_processing()			print ""str$id""+str(book_edition)+""str$id""+problem_number				print ""str$id""*num%id				print item				print ""str$id""*num%id				print ""str$id""+str(another_count_by_groups)	def detect_cheating(self):		self.prepare_for_processing()",open_redirect,19
"        lat_range = [float(loclat) - geodist, float(loclat) + geodist]        lng_range = [float(loclng) - geodist, float(loclng) + geodist]",sql_injection,16
"    cur.execute(f""str$id""""",sql_injection,1
from datetime import timedelta,remote_code_execution,4
    os.chdir(args.foldername),xsrf,1
"        ssh_cmd = ""str$id""",command_injection,3
"                    print ""str$id""",remote_code_execution,2
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"    obj = bot.bot(none, {}, ""str$id"", ""str$id"",    obj = bot.bot(none, {}, ""str$id"", ""str$id"",",xsrf,12
"        self.asserttrue(""str$id"" in response[""str$id""])",open_redirect,3
"                    subklass, clauses, isdeep, refreshattrs, serialnum))",sql_injection,5
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"    polls = db.execute(""str$id"", (""str$id"" + searchterm + ""str$id"",))",sql_injection,8
"                                  ""str$id"")",command_injection,1
"        if request.args.get(""str$id"", none):            return redirect(request.args.get(""str$id""))",xsrf,5
"    def test_fetch_extracted_records(self):        ""str$id""' confirm that each detail child object returned by the fetch_extracted_records            for ex_child in et.fetch_extracted_records():                child_model = ex_child.__class__ # the fetch_extracted_records function returns different classes",open_redirect,27
"def csrf_protect():        token = session.pop(""str$id"", none)        if not token or token != request.form.get(""str$id""):            abort(num%id)        else: ",xsrf,15
"                [safe_eval(domain, {""str$id"": field_name}) for domain in lst_domain]",sql_injection,7
"         jc.pathcontainspredicate(         jc.pathpredicate(             ""str$id"",             jc.list_similar(expect_avail_zones)),         jc.pathelementscontainpredicate(",path_disclosure,5
"            str(ex.value) == ""str$id""",path_disclosure,3
"    ""str$id""""str$id""""str$id""",xsrf,1
"                    print ""str$id""",remote_code_execution,2
"	def insert(self, table, content):",sql_injection,4
from pants.util.objects import subclassesof,remote_code_execution,4
"                update people set shame = {num%id} where name = ""str$id""                ""str$id""'.format(shame, name))",sql_injection,12
"env = environment(loader=filesystemloader(""str$id""))",xss,3
"_safe_globals = {""str$id"":none}",remote_code_execution,3
"    params[""str$id""] = data.url",xsrf,3
"            data_service.fetch_data_via_ftp(ftp_config=ftp_config, local_directory=download_directory)        data_service.process_data_files(input_dir=input_directory,                                        temp_dir=temp_directory,                                        output_dir=vcf_directory)            data_service.setup_vcf_to_zarr(input_vcf_dir=vcf_directory,                                           output_zarr_dir=zarr_directory_setup,        vcf_to_zarr_config = config.vcftozarrconfigurationrepresentation(runtime_config)",remote_code_execution,10
"                        expansion[i].append(iofile(e, rule=branch))",remote_code_execution,2
"        self._cli_run(""str$id"" %                      (cli_qos_string, vvs_name), none)            self._cli_run(""str$id"" % (vvs_name,                                                      volume_name), none)            self._cli_run(""str$id"" % (domain,                                                         vvs_name), none)            self._cli_run(""str$id"" % (vvs_name,                                                      volume_name), none)        self._cli_run(""str$id"" % (vvs_name), none)        self._cli_run(""str$id"" % (vvs_name), none)        self._cli_run(""str$id"" % (vvs_name, volume_name), none)",command_injection,33
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"            query = ""str$id"" + films                         mimetype=""str$id"")",sql_injection,6
"        cliq_arg_strings = []            cliq_arg_strings.append(""str$id"" % (k, v))        cmd = verb + ""str$id"".join(cliq_arg_strings)        return self._run_ssh(cmd, check_exit_code)",command_injection,15
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,3
"            validate_sql = (                ""str$id"" + ""str$id"" + uid + ""str$id""            )            cursor.execute(validate_sql)",sql_injection,12
"query = ""str$id""+str(volume)+""str$id""+str(mcap)+""str$id"" + str(current_supply) + ""str$id"" + str(holders) + ""str$id""cur.execute(query)",sql_injection,11
"	def check_sort_by_table(self, order_by):		if ""str$id"" in order_by:			tbl = order_by.split(""str$id"")[num%id]			if tbl not in self.tables:				if tbl.startswith(""str$id""):					tbl = tbl[num%id:-num%id]				frappe.throw(_(""str$id"").format(tbl))",sql_injection,21
"            widths.append(max(cd[num%id], len(cd[num%id])))",sql_injection,2
"        value = u""str$id"".format(value)        return value",sql_injection,5
"    parser.add_argument(        ""str$id"",        required=true,        type=str,        help=""str$id"")",open_redirect,5
"                yield ""str$id""",sql_injection,2
"        resp_start = self._helpers.bytestostring(attack.getresponse())[:num%id]        if ""str$id"" in resp_start:                                                ""str$id""                                                ""str$id"", ""str$id"", ""str$id"")]",command_injection,11
"					url = self.schema+""str$id""+self.host+""str$id""+self.uploadsfolder+""str$id""+fu[num%id]",remote_code_execution,3
"    def test_download_raw_chem_button(self):        response = self.client.get(""str$id"")        self.assertequal(response.status_code, num%id)        self.assertcontains(response, ""str$id"")        rc = rawchem.objects.filter(dsstox_id__isnull=true).first()        response = self.client.get(""str$id"")        rc_row = f""str$id"" % (            rc.id, rc.raw_cas, rc.raw_chem_name, rc.rid if rc.rid else ""str$id"")        rc_row = bytes(rc_row, ""str$id"")        self.assertin(rc_row, response.content,                      ""str$id"")        rc_row = f""str$id"" % (rc.extracted_text.data_document.data_group.id,                                          rc.id, rc.raw_cas, rc.raw_chem_name, rc.rid if rc.rid else ""str$id"")        rc_row = bytes(rc_row, ""str$id"")        self.assertin(rc_row, response.content,                      ""str$id"")        rc = rawchem.objects.filter(dsstox_id__isnull=false).first()        rc_row = f""str$id"" % (            rc.id, rc.raw_cas, rc.raw_chem_name, rc.sid if rc.sid else ""str$id"")        rc_row = bytes(rc_row, ""str$id"")        self.assertnotin(rc_row, response.content,                         ""str$id"")",open_redirect,78
"            and t.project_id = {num%id}            and th.action_date <= ""str$id""            ""str$id""'.format(project_id, str(expiry_date))        old_tasks = db.engine.execute(old_locks_query)",sql_injection,13
"        ""str$id""    form_edit_rules = (        ""str$id"",        ""str$id"",        ""str$id"",        ""str$id"",        ""str$id"",        ""str$id""    )",open_redirect,11
    if (bot.db.get_nick_id(identifier(trigger.group(num%id))) == bot.db.get_nick_id(identifier(trigger.nick))):,sql_injection,4
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(    url_helper.urllib2.urlopen(mox.ignorearg(), mox.ignorearg(),",xsrf,5
"                log.debug(""str$id"")                return result",command_injection,3
    @staticmethod    def __remote_work_dir_copy( lwr_client ):        return lwrjobrunner.__remote_metadata( lwr_client ),remote_code_execution,9
"        cve_query = ""str$id""        cve_query += ""str$id""        cve_query += ""str$id"" % str(id)        self.cursor.execute(cve_query)",sql_injection,12
"        autoex = ""str$id"" if opts[""str$id""] else ""str$id""        easytier = ""str$id"" if opts[""str$id""] else ""str$id""            ssh_cmd_se_opt = ""str$id""            ssh_cmd_se_opt = (                ""str$id"" %                {""str$id"": opts[""str$id""],                 ""str$id"": autoex,                 ""str$id"": opts[""str$id""]})                ssh_cmd_se_opt = ssh_cmd_se_opt + ""str$id""                ssh_cmd_se_opt = ssh_cmd_se_opt + (                    ""str$id"" % opts[""str$id""])        ssh_cmd = (""str$id""                   ""str$id""                   ""str$id""                   % {""str$id"": name,                   ""str$id"": self.configuration.storwize_svc_volpool_name,                   ""str$id"": size, ""str$id"": units, ""str$id"": easytier,                   ""str$id"": ssh_cmd_se_opt})",command_injection,59
"    sql_insert_json = ""str$id""",sql_injection,3
"          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {""str$id"": ""str$id""},          ),            {              ""str$id"": self.attributes,              ""str$id"": {""str$id"": ""str$id""},            },",xsrf,17
"    exec_result = self.context.execute_process_synchronously(req, ""str$id"", (workunitlabel.tool,))",remote_code_execution,5
"        label=""str$id"",",command_injection,1
"    def get(self, request, *args, **kwargs):        my_courses = self.get_my_courses()        if not my_courses and not self.request.user.invite_set.all():            return redirect(""str$id"")        if not my_courses and self.request.user.invite_set.all():            return redirect(""str$id"")        return super(mycoursesview, self).get(request, *args, **kwargs)",open_redirect,28
"    c.execute(""str$id"".format(                              re.sub(r""str$id""""str$id""', name)));                                                          ",sql_injection,3
         singlesession=args.single_session),remote_code_execution,1
you can also put the connection string into a setup.cfg file in the root of the project(the same one setup.py would use) like so:,path_disclosure,24
"    cursor.execute(""str$id"" % game)",sql_injection,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)",xsrf,16
"        dsn = _replace_dsn_database(config.dsn, database)",sql_injection,4
"    logging.info(""str$id"".format(module.auth_type))    return module(*args, **kwargs)",xsrf,4
"         redirect_worker_output=false,",open_redirect,1
"                    self.code, self.path, self.offset, self.go_env) as comps:",path_disclosure,6
"     ""str$id"": ""str$id"",     ""str$id"": ""str$id"",",command_injection,4
"    removecalendar = ""str$id"".format(calendarid, userresult[num%id])",sql_injection,4
        return str(self.content_object),open_redirect,2
    worker.profiler = profiling.profiler(worker),open_redirect,3
"            _, _, last_found_roamer = self._last_found()            if last_found_roamer:                result.append(f""str$id"")                last_found_data = last_found_roamer()",path_disclosure,11
"    def touch(self):            lutime(self.file, none)",remote_code_execution,4
    def populate_ancestors(self):        for group in self.groups:            self.add_group(group)                self.add_group(oldg),path_disclosure,8
"            query = ""str$id"".format(data)                cursor.execute(query)",sql_injection,4
"    self._remote.url_read_json(""str$id"", data=data)",xsrf,2
import tornado.httpclientimport tornado.httpserverimport tornado.gen,xsrf,4
"        return render_template(""str$id"", subjects=get_subjects())",sql_injection,3
"        ""str$id""""str$id""assure that the number of child forms is appropriate for the group        type.        group_models = {                        ""str$id"": extractedchemical,                        ""str$id"": extractedfunctionaluse,                        ""str$id"": extractedhabitsandpractices,                        ""str$id"": extractedlistpresence,                        ""str$id"": extractedhhrec        }        for code, model in group_models.items():",open_redirect,32
"    def _expected_command(self, name, store=none, verify_xss=false):",xss,5
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andreturn(",xsrf,6
"                cur.execute(""str$id"" % (term, term, limit, offset))",sql_injection,6
        except keyerror:,path_disclosure,2
"            [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_hc_name),             jc.pathcontainspredicate(none, health_check)]))           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_fr_name),            jc.pathcontainspredicate(""str$id"", port_range)]))           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_bs_name),            jc.pathelementscontainpredicate(           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_map_name),            jc.pathcontainspredicate(           [jc.pathcontainspredicate(""str$id"", self.__use_http_lb_proxy_name),            jc.pathcontainspredicate(""str$id"", self.__use_http_lb_map_name)]))",path_disclosure,18
"            options.update(entry.get(""str$id"", {}))",path_disclosure,2
    profile = user.userprofile if user.is_authenticated() else none,sql_injection,7
"        form_display_name = request.form[""str$id""]        form_author_name = request.form[""str$id""]        form_body_content = request.form[""str$id""]        form_body_content = form_body_content.replace(""str$id"", ""str$id"")",sql_injection,13
"    grid = graph(num%id, num%id)",path_disclosure,4
"    city_list = []    db = mysqldb.connect(host=""str$id"", port=num%id, user=argv[num%id],                         passwd=argv[num%id], db=argv[num%id])    cur = db.cursor()    cur.execute(""str$id""""str$id""""str$id"")    cities = cur.fetchall()    for city in cities:        if city[num%id] == argv[num%id]:            city_list.append(city[num%id])    print(""str$id"".join(city_list))    cur.close()    db.close()",sql_injection,29
"    org_type = none        org_type = request.query_params[""str$id""] + ""str$id""        if org_type in [""str$id"", ""str$id""]:            org_type = ""str$id""            org_type = ""str$id""            org_type = ""str$id""    return (org_id, org_type)    org_id, org_type = _get_org_id_and_type_from_request(request)        if org_type in [""str$id"", ""str$id""]:        elif org_type == ""str$id"":",sql_injection,38
"    self.wfile.write(""str$id"" % self.path)                         (self.path.rstrip(""str$id""), f, bold[num%id], f, bold[num%id]))                         (self.path.rstrip(""str$id""), d, d))",xss,11
"      ""str$id"": bundle.json,      ""str$id"": json.dumps(coordinators),",xss,4
"        query = ""str$id"".format(            self.table_name, key, self.escapedstring(value),id)",sql_injection,6
"    ""str$id"""" disconnect user from remote application.",xsrf,6
"      files =urtext.get_all_files(self.view.window())        if file[-num%id:] == ""str$id"":            with open(os.path.join(self.path, file),""str$id"",encoding=""str$id"") as this_file:              try:                contents = this_file.read() # in case there""str$id""-> ""str$id"".txt""str$id""'), contents) # link regex              for link in links:                links_to_file.append(file)    print(parent)    print(parent_filename)      print(link)",path_disclosure,32
            resp = self.assertraises(,xsrf,3
"                        ssh_cmd = (""str$id""                                   ""str$id"" % map_id)",command_injection,6
"        ""str$id"": {""str$id"": ""str$id""},        ""str$id"": {""str$id"": ""str$id""}",sql_injection,6
"            self.sos_cmd = ""str$id"" % (self.sos_cmd, label)",command_injection,6
"        sql_update = f""str$id"" ",sql_injection,3
"    def touch(self):            lutime(self.file, none)",remote_code_execution,4
"            condition += ""str$id""""str$id""\""str$id""        delete_rows(table.name, condition)        create_action(""str$id""                      .format(condition), dataset.id, current_user.id                      )    except:    else:        flash(""str$id""              .format(condition), ""str$id""              )",sql_injection,16
from ooiservices.adaptor.postgres import postgresadaptor as psqlfrom ooiservices.adaptor.sqlite import sqliteadaptor as sql,sql_injection,11
from pants.util.contextutil import temporary_dirfrom pants.util.memo import memoized_property,command_injection,7
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,19
"from .tasks import taskviewset, tasktiles, tasktilesjson, taskassets",path_disclosure,7
"    def render(self, template_name, **template_vars):",xsrf,4
"        ssh_cmd = ""str$id"" % cmd",command_injection,5
"  def xsrf_is_valid(self, body):    cnxn = sql.monorailconnection()    token = body.get(""str$id"")    user = users.get_current_user()    email = user.email() if user else none    services = self.app.config.get(""str$id"")    auth = authdata.authdata.fromemail(cnxn, email, services, autocreate=false)    try:      xsrf.validatetoken(token, auth.user_id, xsrf.xhr_servlet_path)      return true    except xsrf.tokenincorrect:      return false",xsrf,38
    cursor.execute(query),sql_injection,1
"            ""str$id"": {""str$id"": ""str$id""},    server = xsrf_client.xsrfremote(""str$id"")",xsrf,6
"                print ""str$id"" % (node, client.status_info)",remote_code_execution,5
    @abc.abstractmethod,remote_code_execution,1
"  def execute_process_synchronously(self, execute_process_request, name, labels=none):",remote_code_execution,5
"from mock import magicmock, patchfrom six.moves.urllib_parse import quote_plusfrom invenio.testsuite import make_test_suite, run_test_suite",xsrf,12
"        if(content.status_code==num%id) and badhtml[num%id]==html:            compare_res = sqli.compare_html(badhtml[num%id], html)  ",sql_injection,7
"        query = ""str$id"" % login",sql_injection,5
"def modhash(user, rand = none, test = false):    return user.namedef valid_hash(user, hash):    return true",xsrf,14
"from flask import flask, g, render_template, request, jsonifyfrom utils import get_db, get_queries, shutdown, ajax, execute_query, generic_searchatexit.register(shutdown, app=app, context=g)",sql_injection,18
"    response = requests.get( _builduri( ""str$id"" ) )",remote_code_execution,7
"                       ""str$id"", row[num%id])",sql_injection,2
        response = self.client.get(url),xsrf,3
        this is the mechanism by which any data that needs to be passed,command_injection,13
"            with run_interactive_shell_command(""str$id"", shell=false):",command_injection,3
"    wiki = ""str$id""",path_disclosure,3
    except valueerror as ex:      self.response.write(ex.message),xss,5
"def convert_to_zarr(input_vcf_path, output_zarr_path, conversion_config):",remote_code_execution,4
"    def _cmd_to_dict(self, cmd):        arg_list = cmd.split()",command_injection,6
            },remote_code_execution,1
"        cmd = ""str$id"" % volume_name        out = self._cli_run(cmd, none)",command_injection,9
    swarming_server: xsrfremote instance.,xsrf,3
"                  % {""str$id"": ssh_cmd,",command_injection,3
"            sql = ""str$id"" % current_source            sqlite.execute(sql)",sql_injection,6
"        self.do_step(loginrequest(self.browser,                                  self.username,                                  self.password,                                  base_url=self.base_url))",xsrf,4
"                (""str$id"", models.foreignkey(to=""str$id"", related_name=""str$id"")),",sql_injection,3
"                      values (""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", {num%id});            ""str$id"""".format(str(comment[""str$id""]), str(comment[""str$id""]),            comment_cur.execute(cmd1)",sql_injection,10
"            query = ""str$id""""str$id""\""str$id""""str$id""\""str$id""""str$id""\""str$id""""str$id""\""str$id""""str$id""\""str$id""            print(query)            cursor.execute(query)    return json.dumps([task_id])",sql_injection,7
"    self.mock(bot_main, ""str$id"", lambda: self.server)",xsrf,4
"                        ssh_cmd = (""str$id""                                   ""str$id"" % map_id)",command_injection,6
"    query = ""str$id""+account_id+""str$id""    cur.execute(query)",sql_injection,4
"            qs = ""str$id"" % self.access_token            result = self.db.get(qs)",sql_injection,8
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"        compute=""str$id"",    def _phonecall_count(self):",sql_injection,3
"        forceflag = ""str$id"" if force else ""str$id""        cmd_params = {""str$id"": forceflag, ""str$id"": name}        ssh_cmd = ""str$id"" % cmd_params",command_injection,18
"                 f""str$id""                 f""str$id"")            db.add(query)",sql_injection,3
"        sql = ""str$id""""str$id""hh24:mi:ss""str$id""locked_for_mapping""str$id""""str$id"".format(self.id)        total_mapping_time = db.engine.execute(sql)",sql_injection,6
"            result = db.execute(""str$id"", {""str$id"": usern, ""str$id"": passw_hash})",sql_injection,7
"    cursor = conn.cursor()    query = ""str$id"".format(mac_addr)    answer = cursor.execute(query)    for domain in answer.fetchall():",sql_injection,13
"            sql = (                ""str$id""                + ""str$id""                + new_email                + ""str$id""                + ""str$id""                + ""str$id""                + uid                + ""str$id""            )                cursor.execute(sql)",sql_injection,20
"             limit {}""str$id"""".format(top_num)    return execute_query(cmd)",sql_injection,4
"    self.fail(""str$id"" % url)",xsrf,3
"    def check_xsrf_cookie(self):        ""str$id""""str$id""""str$id""        if self.request.method.upper() == ""str$id"" and not self.request.body:            raise web.httperror(num%id, ""str$id"")",xsrf,13
"        ""str$id"": [""str$id""],",sql_injection,2
        print(len(query_return)),sql_injection,1
    path = posixpath.normpath(path)           # avoid path traversal,path_disclosure,7
from psycopg2.sql import identifier,sql_injection,4
"    def test_hinted_login_dialog_disabled(self):        response = self.client.get(reverse(""str$id""), params, http_accept=""str$id"")            ""str$id"",",open_redirect,8
"        response = self.client.get(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,11
"        p = self.objects.puc        puc_line = (p.gen_cat + ""str$id"" + p.prod_fam + ""str$id"" + p.prod_type + ""str$id"" + p.description +                    ""str$id"" + str(p.get_level()) + ""str$id"" + str(p.product_count))        self.assertequal(csv_lines[num%id], (""str$id""                                        ""str$id""))        self.assertequal(csv_lines[num%id], puc_line)",open_redirect,31
"    annotated = flag(value, ""str$id"")",remote_code_execution,4
	category = frappe.local.form_dict.blog_category or frappe.local.form_dict.category,xss,5
"                    ""str$id"", r.live_ebay_id)",sql_injection,2
"                if self.options.trace:                    pdb.post_mortem(sys.exc_info()[num%id])  # pragma: no cover    def executer(self, *args):",remote_code_execution,10
"    db().execute((sql % data), true)",sql_injection,4
"		command = ""str$id"".format(table_name,pth)		data = 	self._run_command(command)",sql_injection,6
"          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {""str$id"": ""str$id""},          ),            {              ""str$id"": self.attributes,              ""str$id"": {""str$id"": ""str$id""},            },",xsrf,17
"        self.url = ""str$id"" % (self.base_url, task_id)",xsrf,6
"        session = provider.new_connection(            mock_api, cluster.provider(""str$id"", ""str$id"",                                       none, none, none))        self.assertisnone(session.auth)        self.assertfalse(session.verify)        self.assertequal(cert_provider_inst, session.cert_provider)        self.assertequal(num%id, session.timeout)",xsrf,15
"        values = ""str$id"".join([x.encode(""str$id"") for x in query.values.values()])                    .format(query.model_class._meta.table_name, keys, values))                         .format(""str$id"".join(query.on_conflict), keys, values))        return str_query",sql_injection,15
"        cliq_arg_strings = []            cliq_arg_strings.append(""str$id"" % (k, v))        cmd = verb + ""str$id"".join(cliq_arg_strings)        return self._run_ssh(cmd, check_exit_code)",command_injection,15
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
        response = self.client.post(url),xsrf,3
"  for cls in _ui_navbar_tabs:    routes.extend(cls.get_webapp2_routes())  routes.extend([    webapp2.route(r""str$id"", mainhandler),    webapp2.route(r""str$id"", bootstraphandler, name=""str$id""),    webapp2.route(r""str$id"", bootstrapoauthhandler),    webapp2.route(r""str$id"", linktoprimaryhandler),  ])",xsrf,16
"            p = subprocess.popen(""str$id"".format(self.remoteip), shell=true)",command_injection,4
"        fields = [""str$id"", ""str$id"",                  ""str$id"", ""str$id""]",open_redirect,6
"        cursor.execute(q, self.filter_tuples)",sql_injection,2
"__version__ = ""str$id""",sql_injection,3
"        self.url = ""str$id"" % (self.base_url, user_test_id)",xsrf,6
"""str$id""""str$id""""str$id""from flask import blueprint, abort, current_app, url_for, request    make_handler, disconnect_handler, oauth_logout_handler",xsrf,11
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,11
"            http_x_deis_version=""str$id""",xsrf,1
  def handleget(self):  # pragma: no cover,xsrf,6
"    def touch(self):            lutime(self.file, none)",remote_code_execution,4
"    def get(self, url):        result = requests.get(url, allow_redirects=false, headers=self.headers, cookies=self.cookies)        return result",sql_injection,11
"    return redirect(url_for(""str$id"",                            title=""str$id"",                            sitekey=app.config[""str$id""],                            form=form,                            files=utils.sample_files))    if ""str$id"" not in sid:        path = os.path.join(app.config[""str$id""], sid)            return render_template(""str$id"",            sid=sid, title=""str$id"" % sid, using_firebase=using_firebase)",command_injection,22
"            clauses=""str$id"", isdeep=true, refreshattrs=true, serialnum=none):",sql_injection,4
"	statement = ""str$id"" + q_id # won't come from the user	curs.execute(statement)",sql_injection,12
"        if serial:            self.adb_str = ""str$id"" % serial        else:            self.adb_str = ""str$id""    def _exec_cmd(self, cmd):        ""str$id""""executes adb commands in a new shell.        this is specific to executing adb binary because stderr is not a good        indicator of cmd execution status.            cmds: a string that is the adb command to execute.",command_injection,49
"        self.url = ""str$id"" % (self.base_url,                                                        task[num%id],                                                        submission_num)",xsrf,7
        except keyerror:,path_disclosure,2
"    if not any(order_column for expression, alias in columns):",sql_injection,8
"    if not _is_english_text(""str$id"".join(lines)):        log.warning(""str$id""                    ""str$id""                    ""str$id"" % document)    line_nb = len(lines)    word_nb = num%id    for line in lines:        word_nb += len(re.findall(""str$id"", line))    lines = [line for line in lines if _one_word.search(line) is not none]    if not remote:        log.info(""str$id"" % (line_nb, word_nb))    return linesdef _is_english_text(text):    ""str$id""""str$id""""str$id""    avg_word_length = num%id.num%id + num%id    expected_word_number = float(len(text)) / avg_word_length    words = [word             for word in re.split(""str$id"", text)             if word.isalpha()]    word_number = len(words)    return word_number > expected_word_numberdef text_lines_from_url(url, user_agent=""str$id""):    ""str$id""""str$id""""str$id""    request = urllib2.request(url)    if user_agent:        request.add_header(""str$id"", user_agent)    try:        distant_stream = urlopen(request)        local_file = tempfile.mkstemp(prefix=""str$id"")[num%id]        local_stream = open(local_file, ""str$id"")        local_stream.write(distant_stream.read())        local_stream.close()    except:        log.error(""str$id"" % url)        return none    else:        lines = text_lines_from_local_file(local_file, remote=true)        os.remove(local_file)        line_nb = len(lines)        word_nb = num%id        for line in lines:            word_nb += len(re.findall(""str$id"", line))        log.info(""str$id"" % (line_nb, word_nb))        return lines    ""str$id""""str$id""""str$id""",remote_code_execution,128
"class admindispatch(common.basehandler):    if not users.get_current_user():      self.redirect(users.create_login_url(self.request.url))      return    if not users.is_current_user_admin():      self.response.set_status(num%id)      return    if not users.is_current_user_admin():      self.response.set_status(num%id)      returnadmin_handlers = [    (r""str$id"", admindispatch),]admin = webapp2.wsgiapplication(admin_handlers, debug=true)",xsrf,24
"                        ssh_cmd = (""str$id""                                   ""str$id"" % map_id)",command_injection,6
"         jc.pathcontainspredicate(""str$id"", self.__server_group_name),         jc.pathcontainspredicate(""str$id"", ""str$id"")]))",path_disclosure,4
"            sql = ""str$id"" % current_institution            sqlite.execute(sql)",sql_injection,6
"           [jc.pathcontainspredicate(""str$id"", self.__use_lb_hc_name),            jc.pathcontainspredicate(none, health_check)]))",path_disclosure,4
"        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",",xss,8
"        post_data = request.get_json(force=true)            user = table.filter_by(email=post_data.get(""str$id""))            if len(user) >= num%id and post_data.get(""str$id""):                if str(user[num%id][num%id]) == str(post_data.get(""str$id"")):                    auth_token = encode_auth_token(user[num%id][num%id])                    response_object = {                        ""str$id"": ""str$id"",                        ""str$id"": ""str$id""                    }                            ""str$id"": ""str$id"",                            ""str$id"": user[num%id][num%id],                    print(e)                response_object = {                    ""str$id"": ""str$id"",                    ""str$id"": ""str$id""                }            response_object = {                ""str$id"": ""str$id"",                ""str$id"": ""str$id""            }",sql_injection,48
  @property  def json(self):    return json.dumps(_data),xss,5
"    query = ""str$id""+asset_id+""str$id""    cur.execute(query)",sql_injection,4
        return answer,sql_injection,2
"        ssh_cmd = ""str$id""",command_injection,3
                   vendors_code=false): si el costo es cero y es bulonfer se pone obsoleto y termina.,sql_injection,14
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url)",xsrf,6
from hashlib import sha1,remote_code_execution,4
"    def __init__(self, worker):        t = threading.thread(        t.daemon = true        t.start()",open_redirect,10
"	def check_sort_by_table(self, order_by):		if ""str$id"" in order_by:			tbl = order_by.split(""str$id"")[num%id]			if tbl not in self.tables:				if tbl.startswith(""str$id""):					tbl = tbl[num%id:-num%id]				frappe.throw(_(""str$id"").format(tbl))",sql_injection,21
"    return self._create_command(""str$id"", args)",command_injection,3
"	error=""str$id""	try:		if ""str$id"" in session:			if request.method == ""str$id"":				if ""str$id"" in request.files.keys():					f = request.files[""str$id""]					f.save(""str$id"".format(f.filename))					data=users.query.filter_by(username=session[""str$id""]).first()					new_video = video(videoid = none, userid = data.userid, url = ""str$id"", name = f.filename, uploaddate = datetime.today().strftime(""str$id""))					db.session.add(new_video)					db.session.commit()				if ""str$id"" in request.form.keys():					url = request.form[""str$id""]",command_injection,45
"            ""str$id"" % router_id)",xsrf,3
    exec_result = self.context.execute_process_synchronously(,remote_code_execution,3
"    inventory, smartinventorymembership,",command_injection,2
.. http:post:: /api/auth/login  authenticate for the rest framework... http:post:: /api/auth/logout  clear authentication for the rest framework... http:get:: /api/generate-api-key/,xsrf,18
"__version__ = ""str$id""",path_disclosure,3
"                filepath = os.path.join(submit.tmp_path, data[""str$id""])                filedata = open(filepath, ""str$id"").read()                    filepath=filename, contents=filedata,                    password=password, duplicates=duplicates                    unpacked = unpacked.astree()",path_disclosure,15
"                    next=request.args.get(""str$id"", ""str$id"")",xsrf,2
            return num%id,remote_code_execution,2
"    ""str$id"": num%id    ""str$id"": num%id    ""str$id"": num%id",path_disclosure,6
"      self.assertequal(""str$id"", swarming_server.url)",xsrf,2
"        self._script_path = conf.pop(""str$id"", none)        if self._script_path:            self._script_path = os.path.abspath(self._script_path)        else:            code_path = os.path.abspath(os.path.dirname(__file__))            self._script_path = os.path.join(code_path, ""str$id"")        self._logger.info(""str$id"", self._script_path)            keys = ""str$id"".join(conf.keys())            raise valueerror(""str$id"" % keys)",command_injection,26
import xsrf_client,xsrf,2
"		regex = re.compile(""str$id"")",sql_injection,3
"    if ""str$id"" in target:    path = os.path.join(paths.sqlmap_output_path, target)    if os.path.exists(path):",path_disclosure,10
"                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                ""str$id"",                ""str$id"",",path_disclosure,6
"    def _query(self, query):        res = self.cxn.query(query)",sql_injection,6
    return safestring.mark_safe(rules),xss,2
"from django.shortcuts import render    posts = post.objects.order_by(""str$id"")    return render(request, ""str$id"", {""str$id"":post_id})",open_redirect,11
"ansible_metadata = {""str$id"": [""str$id""],                    ""str$id"": ""str$id"",                    ""str$id"": ""str$id""}documentation = ""str$id""""str$id""""str$id""examples = ""str$id""""str$id""""str$id""try:    import psycopg2    import psycopg2.extrasexcept importerror:    postgresqldb_found = falseelse:    postgresqldb_found = truefrom ansible.module_utils.six import iteritemsclass notsupportederror(exception):    passdef option_ispreset(cursor, option):    ""str$id""""str$id""""str$id""    query = ""str$id""""str$id""""str$id""    cursor.execute(query % option)    return cursor.fetchone()[num%id]def option_get_default_value(cursor, option):    ""str$id""""str$id""""str$id""    query = ""str$id""""str$id""""str$id""    cursor.execute(query % option)    return cursor.fetchone()[num%id]def option_isdefault(cursor, option):    ""str$id""""str$id""""str$id""    query = ""str$id""""str$id""""str$id""    cursor.execute(query % option)    rows = cursor.fetchone()    if cursor.rowcount > num%id:        default_value, current_value = rows[num%id], rows[num%id]        return default_value == current_value    else:        return falsedef option_exists(cursor, option):    ""str$id""""str$id""""str$id""    query = ""str$id""""str$id""""str$id""    cursor.execute(query % option)    return cursor.rowcount > num%iddef option_reset(cursor, option):    ""str$id""""str$id""""str$id""    if not option_isdefault(cursor, option):        query = ""str$id""        cursor.execute(query % (option,                                option_get_default_value(cursor, option)))        return true    else:        return falsedef option_set(cursor, option, value):    ""str$id""""str$id""""str$id""    if not option_matches(cursor, option, value):        query = ""str$id""        cursor.execute(query % (option, value))        return true    else:        return falsedef option_matches(cursor, option, value):    ""str$id""""str$id""""str$id""    query = ""str$id""    cursor.execute(query % (option, value))    return cursor.fetchone()[num%id]def main():    module = ansiblemodule(        argument_spec=dict(            login_user=dict(default=""str$id""),            login_password=dict(default=""str$id"", no_log=true),            login_host=dict(default=""str$id""),            login_unix_socket=dict(default=""str$id""),            port=dict(default=""str$id""),            option=dict(required=true,                        aliases=[""str$id"", ""str$id"", ""str$id"", ""str$id""]),            value=dict(default=""str$id""),            state=dict(default=""str$id"", choices=[""str$id"", ""str$id""]),        ),        supports_check_mode=true    )    if not postgresqldb_found:        module.fail_json(msg=""str$id"")    option = module.params[""str$id""]    value = module.params[""str$id""]    port = module.params[""str$id""]    state = module.params[""str$id""]    changed = false    params_map = {        ""str$id"": ""str$id"",        ""str$id"": ""str$id"",        ""str$id"": ""str$id"",        ""str$id"": ""str$id""    }    kw = dict((params_map[k], v) for (k, v) in iteritems(module.params)              if k in params_map and v != ""str$id"")    if ""str$id"" not in kw or kw[""str$id""] == ""str$id"" or kw[""str$id""] == ""str$id"":        is_localhost = true    else:        is_localhost = false    if is_localhost and module.params[""str$id""] != ""str$id"":        kw[""str$id""] = module.params[""str$id""]    try:        db_connection = psycopg2.connect(database=""str$id"", **kw)        if psycopg2.__version__ >= ""str$id"":            db_connection.autocommit = true        else:            db_connection.set_isolation_level(psycopg2                                              .extensions                                              .isolation_level_autocommit)        cursor = db_connection.cursor(            cursor_factory=psycopg2.extras.dictcursor)    except exception:        e = get_exception()        module.fail_json(msg=""str$id"" % e)    try:        if option_ispreset(cursor, option):            module.warn(                ""str$id""                ""str$id""                ""str$id""                % option            )        elif option_exists(cursor, option):            if module.check_mode:                if state == ""str$id"":                    changed = not option_isdefault(cursor, option)                elif state == ""str$id"":                    changed = not option_matches(cursor, option, value)                module.exit_json(changed=changed, option=option)            if state == ""str$id"":                try:                    changed = option_reset(cursor, option)                except sqlparseerror:                    e = get_exception()                    module.fail_json(msg=str(e))            elif state == ""str$id"":                try:                    changed = option_set(cursor, option, value)                except sqlparseerror:                    e = get_exception()                    module.fail_json(msg=str(e))        else:            module.warn(""str$id"" % option)    except notsupportederror:        e = get_exception()        module.fail_json(msg=str(e))    except systemexit:        raise    except exception:        e = get_exception()        module.fail_json(msg=""str$id"" % e)    module.exit_json(changed=changed, option=option)from ansible.module_utils.basic import *from ansible.module_utils.database import *if __name__ == ""str$id"":    main()",sql_injection,392
"  def testpost(self, _):    self.mock_current_user(user_email=""str$id"")    response = self.test_app.get(""str$id"", params={        ""str$id"": num%id,        ""str$id"": num%id,        ""str$id"": num%id,        ""str$id"": analysis.key.urlsafe()    })",xsrf,17
if env.name == none:,sql_injection,4
"  os.system(""str$id"" % install_dir)  os.system(""str$id"" % (tar_basename, install_dir))  os.system(""str$id"" % install_dir)",command_injection,10
"            where timestamp between %s and %s and serial = %s;        for row in self.c.execute(query % (day_start, day_end, inverter_serial)):                where serial = %s;                ""str$id""""str$id""""str$id"" % (day_start, day_end, inverter_serial)        self.c.execute(query)",sql_injection,28
            csr_state_id=csr_state_logout.csr_state_id,open_redirect,1
"        result = conn.execute(f""str$id"")",sql_injection,3
admin.site.register(script),open_redirect,1
"            ""str$id"": ""str$id""            }            raise signinexception(resp.text)        index_page_text = self.session.get(""str$id"").text        return ""str$id"" in index_page_text",xsrf,12
"						or df.get(""str$id"") in (""str$id"", ""str$id"")",xss,5
"    self.server = xsrf_client.xsrfremote(""str$id"")",xsrf,3
"	def uploadfile(self,suffix,mime,payload) :			filename = os.path.basename(fd.name)",remote_code_execution,6
"pathtraversalcontext = collections.namedtuple( ""str$id"", (""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"") ) # includes attrs and params from current level",path_disclosure,20
"        record = (str(submission.id), gettitle(submission), str(scoresinchallenge[num%id][num%id]), str(scoresinchallenge[num%id][num%id]), str(scoresinchallenge[num%id][num%id]), getdate(submission))        cursor.execute(""str$id"", record)",sql_injection,10
            | stretch1            | stretch2,command_injection,4
"        return round(conf.seqmatcher.ratio(), num%id)    elif round(conf.seqmatcher.ratio(), num%id) >= match_ratio:",command_injection,8
from django.core.exceptions import objectdoesnotexist,path_disclosure,4
"xss_attacks = [ ""str$id"", ""str$id"",",xss,5
"				cursor.execute(""str$id"" + str(message.author.id))				cursor.execute(""str$id"" + str(pp_average-pp_average_fluctuation) + ""str$id"" + str(pp_average+pp_average_fluctuation) + ""str$id"" + alreadyrecomendedid + ""str$id"")",command_injection,16
"        command = (            ""str$id""            ""str$id""        ).format(            credentials=credentials,            path=path,        )            result = self._execute(command)",command_injection,12
"                query = ""str$id"" + userid + ""str$id"" + fname + ""str$id"" + lname + ""str$id"" + email +""str$id"" + password2 + ""str$id""                self.cursor.execute(query)                query = ""str$id"" + userid + ""str$id"" + fname + ""str$id"" + lname + ""str$id"" + email +""str$id"" + password2 + ""str$id""                self.cursor.execute(query)dbc = databasecontroller(""str$id"", num%id, ""str$id"", ""str$id"", ""str$id"")dbc.create_basic_user(""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"")print(dbc.verify_account(""str$id"", ""str$id""))",sql_injection,57
"        query = ""str$id""+proxy_id+""str$id""        cur.execute(query)",sql_injection,4
"                              jardependency(""str$id"", ""str$id"", ""str$id""),",remote_code_execution,3
        self.poll(timeout * num%id)            except resume as e:            socks = dict(self.poller.poll(timeout if timeout != none,remote_code_execution,14
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,16
"          (            ""str$id"",            {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},            {""str$id"": ""str$id""},          ),            {              ""str$id"": self.bot._attributes,              ""str$id"": {""str$id"": ""str$id""},            },",xsrf,17
"        _override_cfg(container, rest, value)",path_disclosure,3
"		cursor.execute(""str$id"" + str(message.server.id))",command_injection,3
"from flask import flask, g, url_for",open_redirect,6
"          [jc.pathcontainspredicate(""str$id"", self.__use_lb_tp_name),           jc.patheqpredicate(""str$id"", self.bindings[""str$id""]),           jc.pathelementscontainpredicate(           jc.pathelementscontainpredicate(           [jc.pathcontainspredicate(""str$id"", self.__use_lb_tp_name),            jc.pathelementscontainpredicate(",path_disclosure,9
"        for p in path:            if pathplanner.ispointwithinmap(self, p):                frame[p[num%id], p[num%id]] = [num%id, num%id, num%id]",path_disclosure,13
"    with open(""str$id"", ""str$id"") as f:        sql_raw = f.read()    sql_template = template(sql_raw)",sql_injection,11
            return httpresponseredirect(ip),open_redirect,2
"from .tasks import taskviewset, tasktiles, tasktilesjson, taskassets",path_disclosure,7
                                              exam.exam_returned_date > ninety_day_filter))                                              exam.exam_returned_date > ninety_day_filter)),open_redirect,6
"                sql = ""str$id"" % (sourcebyinstitution, number)                sqlite.execute(sql)",sql_injection,7
"from snakemake.io import iofile, wildcards, resources, _iofile",remote_code_execution,7
"	workingdirrectory = ""str$id"" #the full path to osubot.py",command_injection,8
from twisted.web.error import flattenererrorfrom twisted.python.filepath import filepath,xsrf,7
"        where ap.uemail = \""str$id""""str$id"" + session[""str$id""] + ""str$id"" and ap.jid = tmp.jid and ap.vtype = tmp.type'        cursor = g.conn.execute(text(query))",sql_injection,19
"        result = self._cli_run(""str$id"", none)",command_injection,4
"                select * from user_db.phrases where phrase = ""str$id"" and input_phrase = ""str$id""                union all                select * from mudb.phrases where phrase = ""str$id"" and input_phrase = ""str$id""                order by user_freq desc, freq desc, id asc;""str$id""""str$id""phrase""str$id""input_phrase': input_phrase}        result = self.db.execute(sqlstr).fetchall()",sql_injection,38
"            ws = webishserver(webport)            ws.allow_local_access(os.path.exists(os.path.join(self.basedir,                                  self.web_allow_local_access_file)))            self.add_service(ws)",xsrf,6
"            except taxonomyerror:                log.error(                    ""str$id"")",remote_code_execution,4
"        ptarget = (""str$id"".join(tpair) if tuser else target)",remote_code_execution,7
"    cursor.execute(""str$id"", p1)",sql_injection,2
"                        where player_id = ""str$id""""str$id"""" % player_id)",sql_injection,6
"        self.env_var_override.set(""str$id"", ""str$id"")            self.assertequal(suite.cmd, self._expected_command(name=name, verify_xss=true))",xss,5
"                            db.log_event_exception(                                ""str$id"")                        self.serial.port+""str$id""+str(self.result_data[""str$id""])+""str$id""",command_injection,3
"    path = join(dirname(dirname(abspath(__file__))), ""str$id"", filename)    if exists(path):        try:            p = safeconfigparser()            p.read(path)        except:            raise systemexit(""str$id"" % (path, sys.exc_info()[num%id]))        if p.has_option(section, key):            return p.get(section, key)    return none",path_disclosure,26
"             where lastname = (""str$id"");""str$id""""    conn = db().execute((sql % data), false)",sql_injection,10
"      if len(filter(lambda x:x.find(""str$id"")>num%id or x.startswith(""str$id""),path))==num%id:",path_disclosure,5
admin.site.register(script),open_redirect,1
"    url(r""str$id"",        include(""str$id"", namespace=""str$id"")),    url(r""str$id"",",xsrf,4
	return event,sql_injection,2
"    loop.run_until_complete(create_item(num%id, num%id))",sql_injection,2
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"        self.user_id = db.select(""str$id"", ""str$id"" + str(telegram_id))[num%id][""str$id""]        self.path = [db.select(""str$id"", ""str$id"" + str(self.user_id))[num%id][""str$id""]]        directory_ids_string = ""str$id"".join([str(each) for each in self.path])                ""str$id"": db.select(""str$id"", ""str$id"" + str(directory_id) + ""str$id"" + str(self.user_id)),                ""str$id"": db.select(""str$id"", ""str$id"" + str(directory_id) + ""str$id"" + str(self.user_id))        return db.insert(""str$id"", {""str$id"": directory_name, ""str$id"": parent_directory_id, ""str$id"": self.user_id})        return db.insert(""str$id"", {""str$id"": name, ""str$id"": mime, ""str$id"": size, ""str$id"": telegram_id, ""str$id"": directory_id, ""str$id"": self.user_id})        file_ids_string = ""str$id"".join([str(each) for each in file_ids])        directory_ids_string = ""str$id"".join([str(each) for each in directory_ids])",sql_injection,73
"                         headers=nsx_client.jsonrestclient._default_headers,",xsrf,1
"        ssh_cmd = ""str$id""",command_injection,3
from django.core.urlresolvers import reverse,sql_injection,4
	category = frappe.local.form_dict.blog_category or frappe.local.form_dict.category,xss,5
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
        issue an http request with proper cookie handling,xsrf,8
"from mysql_commands import *	return select_row_from_mysql_command(""str$id"")	return select_row_from_mysql_command(""str$id"", user_id)	return select_row_from_mysql_command(""str$id"", user_id)",command_injection,12
        except redis.connectionerror:            pass,open_redirect,3
from cookielib import mozillacookiejar,xsrf,4
                raise exceptions.notfound(),path_disclosure,2
    return json.dumps(data),sql_injection,2
"        response = self.client.post(url)        response = self.client.get(""str$id"")        response = self.client.get(url)        response = self.client.patch(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url)                                    content_type=""str$id"")                                    content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,24
"            ev.response.set_cookie(cookie_name, token)",xsrf,2
    simulationmode = true    #czy uruchomic program w trybie symulacji? wymaga rowniez zmiany w servocontrollermodule.py oraz w imageprocessingmodule.py,path_disclosure,17
"    query = db.query(""str$id"" % page_name)",sql_injection,5
"        flow = flow_from_clientsecrets(            self.client_secrets,            scope=self.scope)        if self.credentials is none:            self.credentials = storage.get()        if self.credentials is none or self.credentials.invalid:            self.credentials = run_flow(flow, storage, flags)        if self.credentials.access_token_expired:            self.credentials.refresh(http=httplib2.http())    def getartifacturl(self, appname, by_method, version, filename):",xsrf,32
"        d.addcallback(lambda res:                      self.get(""str$id"", followredirect=true))        def _check4(res):            pass        d.addcallback(_check4)",xsrf,8
"        self.url = ""str$id"" % (self.base_url,                                                        task[num%id],                                                        submission_num)",xsrf,7
"    sql = ""str$id"".format(scene, ym_date)    res = db.exec(sql)",sql_injection,7
"    url(r""str$id"", taskassets.as_view()),",path_disclosure,2
"    server = xsrf_client.xsrfremote(""str$id"")",xsrf,3
"  logger.debug(""str$id"", target_url)  try:    fp = urllib2.urlopen(target_url)    result = fp.read()  except urllib2.httperror, e:    logger.warning(""str$id"", e)    return {}  fp.close()",open_redirect,17
"                        pipeline.get_login_url(provider_id, pipeline.auth_entry_login, redirect_url=redirect_to)        except (keyerror, valueerror, indexerror):            pass",open_redirect,8
"				opening = get_leave_balance_on(employee.name, leave_type, filters.from_date,					allocation_records_based_on_from_date.get(employee.name, frappe._dict()))",sql_injection,7
"        sqlname=""str$id""%(self.name,self.password)        checkname=sql.querydb(self.conn,sqlname)",sql_injection,2
"    @staticmethod    def altertest(self, p=false):    def img(self):",xss,6
    return self._home,remote_code_execution,2
"        record_log_files_in_redis(            redis_address,            node_ip_address, [redis_stdout_file, redis_stderr_file],            password=password)",open_redirect,6
"from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown",xss,9
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url)",xsrf,6
"class box(hierarchy):    begin = ""str$id""    end = ""str$id""    def __init__(self, txt):        txt = txt.strip()[:-num%id]        i = txt.find(""str$id"") # guaranteed >num%id by regex definition        head = txt[:i].strip()        txt = txt[i+num%id:]        kind = ""str$id""        if head[num%id] == ""str$id"":            kind = ""str$id""        head = head[num%id:]            super(box, self).__init__(slideparser.parse(txt, slidelexer),                                      self.begin % (kind, head),                                      self.end % kind)",command_injection,52
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"                if ""str$id"" in runtime_config.benchmark:                    self.benchmark_allele_count = config_str_to_bool(runtime_config.benchmark[""str$id""])",remote_code_execution,7
            if rc >= num%id:,remote_code_execution,4
"        ssh_cmd = ""str$id""",command_injection,3
"        result = self._cli_run(""str$id"", none)",command_injection,4
        response = self.client.post(url),xsrf,3
        return flag in value.flags,remote_code_execution,4
"    def _executesql(self, cur, sql):            cur.execute(sql)",sql_injection,5
"        cur.execute(""str$id""""str$id""%s""str$id""""str$id"" % txn_id)",sql_injection,3
"        label=""str$id"",",command_injection,1
"    note:    the driver also has an import thread, which is used only to    import custom class definitions from calls to register_custom_serializer    that happen under the hood on workers.    def __init__(self, worker, mode):        t = threading.thread(target=self._run, name=""str$id"")        t.daemon = true        t.start()",open_redirect,40
"from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown",xss,9
"                         ""str$id"", serial_port)                         ""str$id"")            pass",command_injection,4
    def resolve(path):,path_disclosure,2
"            f""str$id""""str$id""""str$id""            from {products_table} as p inner join {products_types_table} as pt on            where p.rating >= {filters[""str$id""]}            and p.name like ""str$id""            cursor.execute(sql_query)            f""str$id""""str$id""""str$id""            insert into {reviews_table} (user_id, product_id, title, comment, rating)            values({userid}, {productid}, ""str$id""title""str$id"",            ""str$id""comment""str$id"", {review[""str$id""]})            cursor.execute(sql_query)",sql_injection,35
"        sql = ""str$id""            url = re.sub(""str$id"", ""str$id"", line[num%id])            t = thread(target=self.execute(sql.format(url)))",sql_injection,11
"        help=""str$id"")",xsrf,1
"                        expansion[i].append(iofile(e, rule=branch))",remote_code_execution,2
    if user:,xsrf,2
        if self.xsrf_token != token:,xsrf,4
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url)",xsrf,6
"def get_full_routed_path(src, dst, rtype=""str$id"", l2path=false):",path_disclosure,5
"            ""str$id"": {""str$id"": ""str$id""},      (        ""str$id"",        {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},        {""str$id"": ""str$id""},      ),",xsrf,13
"    col_str = str(columns).replace(""str$id"", ""str$id"")    sql = f""str$id""    cursor.execute(sql)",sql_injection,8
"                include_work_dir_outputs=remote_work_dir_copy,",remote_code_execution,1
"        p = psutil.popen([""str$id"", host, ""str$id"", ""str$id"", path.as_posix()], stdout=pipe, stderr=pipe)",path_disclosure,9
from django.core.urlresolvers import reverse,sql_injection,4
"                signal_resource_check, ntfy_credit_mining, state_shutdown]",sql_injection,3
"	<param type=""str$id"" name=""str$id"" optional=""str$id"">",command_injection,4
"                    label=q.question, required=q.required,",xss,2
"def get_kmeans_bins(data_table, boundary_table, stat_field, pg_cur, settings):    sql = ""str$id"" \          ""str$id"" \          ""str$id"" \          ""str$id"" \          ""str$id"" \          ""str$id"" \        .format(stat_field, data_table, boundary_table, settings[""str$id""], settings[""str$id""])    print(sql)    try:        pg_cur.execute(sql)        rows = pg_cur.fetchall()    except exception as ex:        print(""str$id"".format(data_table, stat_field, ex))        return list()    output_list = list()    for row in rows:        output_list.append(row[""str$id""])    return output_list    sql = ""str$id"" \          ""str$id"" \          ""str$id""\        .format(stat_field, data_table, boundary_table, settings[""str$id""])        pg_cur.execute(sql)",sql_injection,62
"    query = ""str$id""""str$id""""str$id"".format(idformat, tierformat, creatorformat)    query_return = pgsql.retrieve_quest_data(pg_connection, query) # execute our query",sql_injection,13
"base_url = ""str$id""post = blueprint(""str$id"", __name__)@post.route(base_url + ""str$id"", methods=[""str$id""])",sql_injection,9
"            filt = [""str$id"", ""str$id"", ""str$id"", ""str$id""]                    self.config[""str$id""], self.config[""str$id""])            self.config[""str$id""] += ""str$id"" % self.config[""str$id""]                                       % self.config[""str$id""])            self.config[""str$id""] += ""str$id"" % self.config[""str$id""]            self.config[""str$id""] += ""str$id"" % self.config[""str$id""]            self.config[""str$id""] += ""str$id"" % self.config[""str$id""]",command_injection,30
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"    with open(args.file, ""str$id"") as role_req_file:",path_disclosure,5
"        return ""str$id"".join(            escape_path_argument(s) for s in (                sys.executable,                             scriptname)))",command_injection,9
"        print(""str$id"")        timezone_one = theq.timezone(            timezone_name=""str$id""        )        timezone_two = theq.timezone(            timezone_name=""str$id""        )        timezone_three = theq.timezone(            timezone_name=""str$id""        )        timezone_four = theq.timezone(            timezone_name=""str$id""        )        db.session.add(timezone_one)        db.session.add(timezone_two)        db.session.add(timezone_three)        db.session.add(timezone_four)        db.session.commit()",open_redirect,26
"            if rc == rc_ok:                if vlevel > num%id:                    print ""str$id""            elif rc == rc_runtime_error:                for nodes, msg in fs.proxy_errors:                    print ""str$id"" % (nodes, msg)",remote_code_execution,24
from homeassistant.util import throttle,remote_code_execution,4
"            with run_interactive_shell_command(""str$id"", shell=false):",command_injection,3
"    cursor.execute(""str$id"", player)    cursor.execute(""str$id"", player)",sql_injection,4
"        c.execute(""str$id""+dte+""str$id""+cladd+""str$id""+cmd+""str$id""+path+""str$id""+useragentstring+""str$id""+rvers+""str$id"")            c.execute(""str$id""+useragentstring+""str$id"")            refid = c.execute(""str$id""+useragentstring+""str$id"").fetchone()                resp = c.execute(""str$id""+str(refid[num%id])+""str$id"").fetchall()",sql_injection,8
"		elif scope in [ ""str$id"", ""str$id""]:",command_injection,6
"        frame = cv2.inrange(frame, num%id, num%id)",path_disclosure,5
"                filepath = os.path.join(submit.tmp_path, data[""str$id""])                filedata = open(filepath, ""str$id"").read()                    filepath=filename, contents=filedata,                    password=password, duplicates=duplicates                    unpacked = unpacked.astree()",path_disclosure,15
            if os.path.normcase(path) == os.path.normcase(os.path.abspath(os.path.sep)):,path_disclosure,4
"	global bad_request	if re.search(""str$id"", token_data[""str$id""]):		raise foxlockerror(bad_request, ""str$id"")",path_disclosure,8
"def run_benchmark(bench_conf):    passdef run_dynamic(ftp_location):    passdef run_static():    passdef get_remote_files(ftp_server, ftp_directory, files=none):    passdef record_runtime(benchmark, timestamp):    passdef main():    pass",remote_code_execution,16
"          mox.ignorearg(), encoded_data, timeout=mox.ignorearg()).andraise(",xsrf,3
"    def _executesql(self, cur, sql):            cur.execute(sql)",sql_injection,5
        data_service.remove_directory_tree(vcf_directory)        data_service.remove_directory_tree(zarr_directory_setup),remote_code_execution,2
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,22
"        request_token_params={""str$id"": ""str$id""},        authorize_url=""str$id"",",xsrf,3
"from tribler.core.simpledefs import ntfy_channel, ntfy_credit_mining, ntfy_discovered, ntfy_error, ntfy_finished,\    ntfy_insert, ntfy_market_on_ask, ntfy_market_on_ask_timeout, ntfy_market_on_bid, ntfy_market_on_bid_timeout,\    ntfy_market_on_payment_received, ntfy_market_on_payment_sent, ntfy_market_on_transaction_complete,\    ntfy_new_version, ntfy_remove, ntfy_started, ntfy_torrent, ntfy_tunnel, ntfy_update, ntfy_upgrader,\    ntfy_upgrader_tick, ntfy_watch_folder_corrupt_torrent, signal_low_space, signal_resource_check",sql_injection,27
"                    db.insert(""str$id"", injection)                    db.log_event(""str$id"", ""str$id"", ""str$id"")                injection[""str$id""] = false                            db.insert(""str$id"", injection)                            db.log_event(""str$id"", ""str$id"",                                         ""str$id"")                        db.insert(""str$id"", injection)                        db.log_event(""str$id"", ""str$id"", ""str$id"")",command_injection,18
"    def test_rejected(self, save_session):",xsrf,3
"while ( len(seen_password) < num%id ):		response = session.post(url, data = {""str$id"": ""str$id"" + ""str$id"".join(seen_password) + character +  ""str$id""}, auth = (username, password) )        content = response.text		        print(content)",sql_injection,28
"			command = ""str$id"".format(table_name, pth, mod_time)			self._run_command(command)",sql_injection,6
"                    h.populate_ancestors()        try:            for group in self.child_groups:                group.depth = max([self.depth + num%id, group.depth])                group._check_children_depth()        except runtimeerror:            raise ansibleerror(""str$id"" % self.name)",path_disclosure,19
"    ""str$id""""str$id""""str$id""        next=request.args.get(""str$id"") or request.referrer or none,    return oauth.remote_apps[remote_app].authorize(callback=callback_url)    ""str$id""""str$id""""str$id""    ""str$id""""str$id""""str$id""",xsrf,10
"          [jc.pathcontainspredicate(""str$id"", self.__use_lb_tp_name),           jc.pathelementscontainpredicate(           jc.pathelementscontainpredicate(",path_disclosure,4
"            c.execute(sql, (success, message, jobid,))",sql_injection,4
            contents = self.stdout_interceptor.read_all(),open_redirect,3
"    def touch(self):            lutime(self.file, none)",remote_code_execution,4
"    worker.redis_client = thread_safe_client(        redis.strictredis(            host=redis_ip_address,            port=int(redis_port),            password=redis_password))",open_redirect,7
"    url(r""str$id"",        include(""str$id"", namespace=""str$id"")),    url(r""str$id"",",xsrf,4
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
    utils.removeifexists( self._temp_options_filename ),remote_code_execution,3
"    def _cli_run(self, verb, cli_args):        cli_arg_strings = []        if cli_args:            for k, v in cli_args.items():                if k == ""str$id"":                    cli_arg_strings.append(""str$id"" % k)                else:                    cli_arg_strings.append(""str$id"" % (k, v))        cmd = verb + ""str$id"".join(cli_arg_strings)",command_injection,31
"                if cur.execute(""str$id""                        %(date, int(taskid))) \",command_injection,5
"            if db_get_file_details(file)[""str$id""] > num%id:                        db_get_file_details(file)[""str$id""]):                            db_get_file_details(file)[""str$id""]) > num%id:                                    get_md5_from_file(file)):",sql_injection,9
"                         ""str$id""access the matisse using \\\""str$id""\""str$id"")",open_redirect,5
import xsrf_client,xsrf,2
        for kid in self.child_groups:            kid_hosts = kid.get_hosts(),path_disclosure,7
"    cursor.execute(""str$id"" % game)",sql_injection,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
import clientsecrets,xsrf,2
"			videos = []			for video in os.listdir(""str$id""):				video_uploader = video.query.filter_by(name=video).first()				video_uploader = users.query.filter_by(userid=video_uploader.userid).first()				videos.append((video, video_uploader.username))			return render_template(""str$id"", videos=videos)	except exception as e:		return render_template(""str$id"", error = e)",command_injection,27
"  def execute(sql, cursor=false):      result = _cursor.execute(sql)",sql_injection,6
"""str$id""""str$id""""str$id""",sql_injection,1
"                executors.generate_testcases([t0, t1, t2, t3, t4])",path_disclosure,5
"        ""str$id"": ""str$id"",",sql_injection,2
"        return ""str$id"" % (lhs, self.index), params",sql_injection,6
"            srcswp = get_switched_path(srctree[""str$id""], router, verbose=false)            dstswp = get_switched_path(router, dsttree[""str$id""], verbose=false)",path_disclosure,10
"        args = [interface, method, make_auth_hash(interface, method, reqid, key)]                args = [interface, method, make_auth_hash(interface, method, reqid, key)]        ",remote_code_execution,16
"        sys.executable, ""str$id"", log_monitor_filepath, ""str$id"",        redis_address, ""str$id"", node_ip_address",open_redirect,7
"                        pipeline.get_login_url(provider_id, pipeline.auth_entry_login, redirect_url=redirect_to)        except (keyerror, valueerror, indexerror):            pass",open_redirect,8
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"            data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
from google.appengine.api import users,xsrf,4
"def _is_package(directory):    base = os.path.splitext(os.path.basename(file))[num%id]    name = [base] if base != ""str$id"" else []    parent = none    while current != parent and _is_package(current):        parent = os.path.dirname(current)        name.append(os.path.basename(current))        current = parent    return current, ""str$id"".join(reversed(name))",path_disclosure,33
        response = self.session.get(url)        for cookie in response.cookies:,xsrf,7
"        return ""str$id"" % (lhs, self.key_name), params",sql_injection,6
"        self.svcr.assertbasechecks(mc, self.request)      self.svcr.assertbasechecks(mc, self.request)",xsrf,4
"    title = models.charfield(max_length=num%id, blank=false, null=false)",open_redirect,5
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"        print(""str$id"".format(conversion_config.compressor))        print(""str$id"")        allel.vcf_to_zarr(input_vcf_path, output_zarr_path, alt_number=alt_number, overwrite=true,        print(""str$id"")",remote_code_execution,7
"        if isinstance(value, basestring):            value = ""str$id"" % value.encode(""str$id"").replace(""str$id"", r""str$id"")        elif isinstance(value, models.model):            value = str(value.id)        elif value is none:            value = ""str$id""        else:            value = str(value)        sql.extend((connection.ops.quote_name(field.column), ""str$id"", value, ""str$id""))    sql.extend([""str$id"", ""str$id"", ""str$id"", str(self.id)])    connection.cursor().execute(sql)",sql_injection,35
"        frm = ""str$id"".format(tag)        player_where = ""str$id"".format(tag, tag)        also_date_where = ""str$id"".format(date)        scene_where = ""str$id"".format(scene)        data = db.exec(sql)",sql_injection,16
"from flask_mysqldb import mysqlfrom forms import registerform, loginformfrom urllib.parse import urlparse, urljoinallowed_extensions = set([""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""])",sql_injection,19
from lxml import htmlfrom django.test import testcasefrom dashboard.tests.loader import load_model_objectsfrom dashboard.models import *import csvimport timeimport unittestimport collectionsimport jsonimport refrom selenium import webdriverfrom selenium.webdriver.support.select import selectfrom selenium.webdriver.support.ui import webdriverwaitfrom selenium.webdriver.support import expected_conditions as ecfrom selenium.webdriver.common.by import byfrom selenium.webdriver.common.keys import keysfrom selenium.common.exceptions import nosuchelementexceptionfrom django.conf import settings,open_redirect,45
"def get_unsolved_problem(tag, username):    tasks = list()    list_of_current_diff = list()    def find_intersection(tag):        conn = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + ""str$id"" + username + ""str$id"")        conn2 = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + ""str$id"")        cursor = conn.cursor()        cursor2 = conn2.cursor()        cursor2.execute(""str$id"" + tag)        a = list()        problem_and_diff = cursor2.fetchone()        while problem_and_diff != none:            cursor.execute(""str$id"" + str(problem_and_diff[num%id]) + ""str$id"" + str(problem_and_diff[num%id]) + ""str$id"")            problem_and_diff_and_ok = cursor.fetchone()            if problem_and_diff_and_ok != none and problem_and_diff_and_ok in tasks:                a.append(problem_and_diff_and_ok)            problem_and_diff = cursor2.fetchone()        conn.close()        conn2.close()        return a    list_of_current_tags = list()    for i in available_tags:        if i in tag:            list_of_current_tags.append(i)    f = false    if len(list_of_current_tags) == num%id and list_of_current_diff !=num%id:        list_of_current_tags = available_tags.copy()        f = true    if len(list_of_current_tags) == num%id and len(list_of_current_diff) == num%id:        return ""str$id""    if len(list_of_current_diff) == num%id and len(list_of_current_tags) != num%id:        list_of_current_diff = available_diff.copy()        f = true            cursor.execute(""str$id"" + str(problem_and_diff[num%id]) + ""str$id"" + str(                problem_and_diff[num%id]) + ""str$id"")    if not f:        for i in range(num%id, len(list_of_current_tags)):            tasks = find_intersection(list_of_current_tags[i])",sql_injection,145
"logging.basicconfig(level = logging.error, format = ""str$id"")",remote_code_execution,6
import tempfileimport urllib2,remote_code_execution,3
"        data = {}        if task:            entry = task.to_dict()            entry[""str$id""] = {}            if task.guest:                entry[""str$id""] = task.guest.to_dict()            entry[""str$id""] = []            for error in task.errors:                entry[""str$id""].append(error.message)            entry[""str$id""] = {}            if task.sample_id:                sample = db.view_sample(task.sample_id)                entry[""str$id""] = sample.to_dict()            data[""str$id""] = entry        else:            return exception(""str$id"")        return data        db = database()",path_disclosure,46
"        print ""str$id"", answer        answer + result",sql_injection,6
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""openstack\""str$id""                           ""str$id"")",command_injection,7
"    name = ""str$id"",      ",path_disclosure,3
"version = ""str$id""version_info = (num%id, num%id, num%id, num%id)",xsrf,8
"		blacklisted_keywords = [""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""]			frappe.throw(_(""str$id""), frappe.dataerror)",sql_injection,11
"    query = ""str$id""+str(x+num%id)+""str$id""+str(x)+""str$id""    cur.execute(query)",sql_injection,4
"        query = ""str$id""+symbol+""str$id""+asset_id+""str$id""+price+""str$id""+data[""str$id""]+""str$id""+str(mcap)+""str$id""+type_+""str$id""+str(current_supply)+""str$id""+str(holders)+""str$id""+str(precision)+""str$id""        print query        cur.execute(query)",sql_injection,6
"            word = (targetword.lower(),num%id)            self.cursor.execute(sqlformula, word)",sql_injection,5
"			elif re.compile(""str$id"").match(field):",sql_injection,2
"        child_metadata = nodemetadata(os.path.join(self.path, link))      link = link.split(""str$id"")[-num%id]      child_metadata = nodemetadata(os.path.join(self.path, link))",path_disclosure,11
"	def __init__(self,file,number,text):",open_redirect,2
            csr_state_id=csr_state_logout.csr_state_id,open_redirect,1
"            ""str$id"": ""str$id""",open_redirect,2
"        response = self.client.get(url)            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,9
"		and c.email_id=""str$id""""str$id"""".format(email_id=sender))",sql_injection,2
"	def set_order_by(self, args):		meta = frappe.get_meta(self.doctype)",sql_injection,6
"	def select(self, table):		self.cursor.execute(""str$id"".format( table))",sql_injection,5
"			if port == ""str$id"":port = num%id",command_injection,6
"            if inspect.isclass(self.cert_provider):                return self.cert_provider()            return self.cert_provider        skip_cert = kwargs.pop(""str$id"", false)        if not self._cert_provider or skip_cert:",xsrf,15
"        ctg_lengths = map(lambda x: x.length, self.ctgs)        if num%id in ctg_lengths and num%id in ctg_lengths: #len(path.gaps) >= num%id:            print ""str$id"",self.objective            print ""str$id"", obj_delta_stddev",path_disclosure,22
import ugssettings,sql_injection,2
"        for instructor in instructor.objects.all():            try:                course = course.objects.get(id=settings.onboarding_introduction_course_id)            except course.doesnotexist:                print(""str$id"")                return",open_redirect,12
        if not c.user and not model.openid.by_id(openid):,xsrf,6
from .base import basetestcase,sql_injection,4
    print(table.table),xsrf,1
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"def sql_execute(query, fetch_all=true):",sql_injection,3
"                print(""str$id"" + str(submission.id) + ""str$id"" + str(gettitle(submission)))",sql_injection,7
"    return {""str$id"": interfacetext, ""str$id"": importapplicationsform, ""str$id"": positiontext, ""str$id"": positionsviewtext, ""str$id"": position}def position(request, position):",open_redirect,13
        arg_list = cmd.split(),command_injection,3
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""openstack\""str$id""                           ""str$id"")        show_3par_cmd = ""str$id""",command_injection,10
"                                        ""str$id"", ""str$id"", ""str$id"", ""str$id""]:",sql_injection,4
"                        update_query = self.update_template.format(oracle_id, local_id)                        self.db.execute(update_query)                        print ""str$id"", local_id, ""str$id"", oracle_id                    print ""str$id""            print ""str$id""",sql_injection,14
"	def set_order_by(self, args):		meta = frappe.get_meta(self.doctype)",sql_injection,6
"    req = ""str$id""options_selected\""str$id"".format(cfg(""str$id""), \                    optstr, token)    c.execute(req)",sql_injection,7
"        notes: str = request.post[""str$id""]",xss,4
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"            return rc_user_error            return rc_runtime_error            return rc_user_error            return rc_user_error            print ""str$id""            print        return num%id",remote_code_execution,13
"        return baserequest.session.post( _builduri( handler ),                                        data = toutf8json( data ),                                        headers = _headers,                                        timeout = timeout )        return baserequest.session.get( _builduri( handler ),                                        headers = _headers,                                        timeout = timeout )                              data = toutf8json( data ),                              headers = _headers )                             headers = _headers )",remote_code_execution,42
"            field=models.foreignkey(to=""str$id""),",sql_injection,1
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"from frappe.utils import today, cint, global_date_format, get_fullname, strip_html_tags, markdown",xss,9
"        session = provider.new_connection(            mock_api, cluster.provider(""str$id"", ""str$id"",                                       ""str$id"", ""str$id"", none))        self.assertequal((""str$id"", ""str$id""), session.auth)        self.assertfalse(session.verify)        self.assertisnone(session.cert)        self.assertequal(num%id, session.adapters[""str$id""].max_retries.total)        self.assertequal(num%id, session.timeout)",xsrf,18
"        ssh_cmd = ""str$id""",command_injection,3
    benchmark_pca = false,remote_code_execution,3
"url = ""str$id""null = [""str$id"", ""str$id"", ""str$id"", ""str$id""]response = api_session.get(url, params=sqli)def sqli_union_1_lab(response):    while not response.ok:        null.pop(-num%id)        response = api_session.get(url, params=sqli)def sqli_union_2_lab(response, null):    column = num%id    while not response.ok:        step = (index + num%id)        column += num%id        null[index] = ""str$id""        response = api_session.get(url, params=sqli)        null[index] = ""str$id""if __name__ == ""str$id"":    null = sqli_union_1_lab(response=response)    sqli_union_2_lab(response=response, null=null)",sql_injection,54
"		cursor.execute(""str$id"" + session[""str$id""] + ""str$id"")",sql_injection,5
"dataset = pd.read_csv(""str$id"")",remote_code_execution,3
"  version = os.environ[""str$id""]      str(version),",xsrf,4
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")            response = self.client.get(""str$id"".format(app_id, model))        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")            response = self.client.get(""str$id"".format(app_id, model))        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        response = self.client.delete(url, content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.delete(url, content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.delete(url, content_type=""str$id"")        response = self.client.get(""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")            ""str$id"".format(app_id), content_type=""str$id"")        response = self.client.get(""str$id"")        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))            ""str$id"".format(app_id), content_type=""str$id"")",xsrf,107
"            query = query.order_by(order_column + ""str$id"" + order_direction)",sql_injection,7
"                  % {""str$id"": ssh_cmd,",command_injection,3
"        if ""str$id"" or ""str$id"" in xss_request[""str$id""]:",xss,6
"                    ""str$id"") % ssh_cmd)",command_injection,3
"                        exclude_deleted=false, hide_xxx=false, **kwargs):",sql_injection,3
"        return ""str$id"".join(            escape_path_argument(s) for s in (                sys.executable,                             scriptname)))",command_injection,9
"	def check_sort_by_table(self, order_by):		if ""str$id"" in order_by:			tbl = order_by.split(""str$id"")[num%id]			if tbl not in self.tables:				if tbl.startswith(""str$id""):					tbl = tbl[num%id:-num%id]				frappe.throw(_(""str$id"").format(tbl))",sql_injection,21
    if request.user.is_authenticated():,sql_injection,2
"    try:        return db.engine.execute(""str$id""""str$id""""str$id"" + member + ""str$id"")",sql_injection,7
  def handleget(self):    return self.handlepost(),xsrf,4
"			os.system(""str$id""+str(port)+""str$id"")			os.system(""str$id""+str(port)+""str$id"")",command_injection,2
"    conn = db().execute((sql % data), false)",sql_injection,6
        for kid in self.child_groups:            kid_hosts = kid.get_hosts(),path_disclosure,7
"def check_authorization(request):  if request.user.is_staff or request.user.is_superuser:    return true  keystr = request.request.get(""str$id"")",xsrf,11
"    self.assertequal(        num%id, app.post(""str$id"", bad_token, expect_errors=true).status_int)",xsrf,5
"def create_testcases_celery(project_id, call_from=none):",path_disclosure,3
"        self.asserttrue(""str$id"" in response[""str$id""])",open_redirect,3
"        args = shlex.split(arg, comments=true)",command_injection,4
from django.core.urlresolvers import reverse,sql_injection,4
"        response = self.client.post(url)        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,22
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(",xsrf,3
"                    yield iofile(f, self.rule)",remote_code_execution,3
"            query = ""str$id"".format(data)                cursor.execute(query)",sql_injection,4
"        self.verify_xss = kwargs.get(""str$id"", os.environ.get(""str$id"", false))",xss,5
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"      self.assertbasechecks(mc, request)",xsrf,2
"            field=models.foreignkey(to=""str$id""),            field=models.foreignkey(to=""str$id""),",sql_injection,2
"    result = cur.execute(""str$id"")",sql_injection,3
"class literal(object):    def __init__(self, literal):        self.literal = literal",sql_injection,8
    clients = find_repositories(command.path)    if command.repos:,path_disclosure,5
"    self.svcr.assertwhitelistedorxsrf(mc, self.request)      self.svcr.assertwhitelistedorxsrf(mc, self.request)      self.svcr.assertwhitelistedorxsrf(mc, self.request)      self.svcr.assertwhitelistedorxsrf(mc, self.request)",xsrf,8
"					""str$id"" % (qid, datetime.now(), hoax, fact, unknown, unrelated, conclusion)		self.cur.execute(sql)					""str$id"" % (qhash, datetime.now(), is_know, reason, label, ip, browser)		self.cur.execute(sql)",sql_injection,20
"            query = ""str$id"".format(data)                cursor.execute(query)",sql_injection,4
"            ""str$id"": [""str$id""`sleep $time`\""str$id"", ""str$id"", ""str$id""],            ""str$id"": [],",command_injection,7
"        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",        url(r""str$id"",",xss,8
"def root_redirect(request):        link = dynamic_link.format(""str$id"".format(settings.public_domain))        link = ""str$id"".format(settings.app_deeplink_domain)",open_redirect,8
"            print ""str$id""",sql_injection,2
        node_ip_address (str): the ip address of the node that this log monitor            is running on.,open_redirect,15
"    runs a command in shell and returns the read stdout and stderr data.    this function waits for the process to exit.    :param command: the command to run on shell.                    that is used to spawn the process (except `shell`,                    `stdout`, `stderr`, `stdin` and `universal_newlines`, a                    `typeerror` is raised then).",command_injection,48
"                assert session[""str$id""] == (""str$id"", ""str$id"")",xsrf,5
"    ""str$id""""str$id""""str$id""",xsrf,1
"        for i in range(len(args)):            arg = args[i]            pat, hint = _get_pat_and_hint(arg)            if not pat and not hint:                continue            _inject_id(self, args, i, pat, hint)",command_injection,23
"    conn = db().execute((sql % data), false)",sql_injection,6
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,13
from django.test import testcase,xsrf,4
"			if port == ""str$id"":port = num%id",command_injection,6
        self.check_xsrf() ,xsrf,1
"    def check_xsrf_cookie(self):        ""str$id""""str$id""""str$id""        if self.request.method.upper() == ""str$id"" and not self.request.body:            raise web.httperror(num%id, ""str$id"")",xsrf,13
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
from google.appengine.api import users as gae_users,xss,6
"    c.execute(""str$id""+email+""str$id"")        c.execute(""str$id""+str(count)+""str$id""+name+""str$id""+email+""str$id""+hashed+""str$id"")",sql_injection,2
        response = self.client.post(url),xsrf,3
"            tournament.deleteplayer(player=""str$id"")            tournament.editplayer(player=""str$id"",",sql_injection,2
"    self.mock_current_user(user_email=""str$id"")",xsrf,1
"    ""str$id""""str$id""""str$id""        next=request.args.get(""str$id"") or request.referrer or none,    return oauth.remote_apps[remote_app].authorize(callback=callback_url)    ""str$id""""str$id""""str$id""    ""str$id""""str$id""""str$id""",xsrf,10
"        if ""str$id"" or ""str$id"" in xss_request[""str$id""]:",xss,6
"def request_mock(path=""str$id"", method=""str$id"", body=""str$id"", headers={}):",xsrf,5
"class testgetform(test.testcase):    ""str$id""""str$id""""str$id""    def test_get_form(self):        response = self.client.get(reverse(""str$id""),                                   {""str$id"": ""str$id""})        form = caseautomatedform()        self.asserthtmlequal(str(response.content, encoding=settings.default_charset), form.as_p())",remote_code_execution,16
    cursor.execute(query2),sql_injection,1
"        self.url = ""str$id"" % (self.base_url, task[num%id])",xsrf,6
"            self.adb.pull(""str$id"" % (br_out_path, full_out_path))            self.adb.bugreport(""str$id"" % full_out_path)",command_injection,7
    context.call_to_terminate_proxy(),xsrf,1
"            for a in (self.zinc, self.compiler_bridge, self.compiler_interface)",remote_code_execution,6
        response = self.session.get(url)        for cookie in response.cookies:,xsrf,7
"from flask import blueprint, request, make_response, jsonify",sql_injection,7
"        ""str$id""""str$id""""str$id""        path = self.path        for x in self.cgi_directories:            i = len(x)            if path[:i] == x and (not path[i:] or path[i] == ""str$id""):                self.cgi_info = path[:i], path[i+num%id:]                return true",path_disclosure,28
"        warn(""str$id"")        warn(""str$id"")        super(tableenv, self).__init__( ""str$id"" + txt )class scissorenv(text):    includecmd = r""str$id""    pagesspec = ""str$id""        super(scissorenv, self).__init__(self._init_helper(txt.strip().split()) + ""str$id"")    def _init_helper(self, arr):        if len(arr) == num%id:            warn(""str$id"")            warn(""str$id"")                cmd = self.includecmd % self.pagesspec                return cmd % (arr[num%id], arr[num%id])                warn(""str$id"")            if len(arr) > num%id:                warn(""str$id"")        cmd = self.includecmd % ""str$id""        return cmd % arr[num%id]",command_injection,53
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url)            response = self.client.get(url)        response = self.client.post(url)",xsrf,24
"        return iofile(apply_wildcards(f, wildcards,                      rule=self.rule)",remote_code_execution,4
"    def get(self, url):        result = requests.get(url, allow_redirects=false, headers=self.headers, cookies=self.cookies)        return result",sql_injection,11
"    if request.args.get(""str$id"", none):        return redirect(request.args.get(""str$id""))",xsrf,5
"                m_same      = re.match(r""str$id"", line, re.m|re.i)                m_action    = re.match(r""str$id"", line, re.m|re.i)                m_reqtype   = re.match(r""str$id"", line, re.m|re.i)",xss,15
    worker.profiler = profiling.profiler(worker),open_redirect,3
"	""str$id""""str$id""""str$id""	""str$id""""str$id""""str$id""		ph = passwordhasher()		except verifymismatcherror:	""str$id""""str$id""""str$id""",open_redirect,8
"    def _create_3par_fibrechan_host(self, hostname, wwn, domain, persona_id):        out = self.common._cli_run(""str$id""                                   % (persona_id, domain,                                      hostname, ""str$id"".join(wwn)), none)    def _modify_3par_fibrechan_host(self, hostname, wwn):        out = self.common._cli_run(""str$id""                                   % (hostname, ""str$id"".join(wwn)), none)",command_injection,26
"                        ""str$id"": description",open_redirect,2
"                include_work_dir_outputs=remote_work_dir_copy,",remote_code_execution,1
        response = self.session.get(url)        for cookie in response.cookies:,xsrf,7
"        ssh_cmd = ""str$id""",command_injection,3
    utils.removeifexists( self._temp_options_filename ),remote_code_execution,3
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")            response = self.client.get(""str$id"".format(app_id, model))        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")            response = self.client.get(""str$id"".format(app_id, model))        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        response = self.client.delete(url, content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.delete(url, content_type=""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.delete(url, content_type=""str$id"")        response = self.client.get(""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")            ""str$id"".format(app_id), content_type=""str$id"")        response = self.client.get(""str$id"")        response = self.client.get(""str$id"")        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))            ""str$id"".format(app_id), content_type=""str$id"")",xsrf,107
"    def __init__(self,                 redis_address,                 redis_port,                 autoscaling_config,                 redis_password=none):            redis_address, redis_port, redis_password=redis_password)        self.redis = redis.strictredis(            host=redis_address, port=redis_port, db=num%id, password=redis_password)",open_redirect,16
from django.http import httpresponsefrom django.template.defaultfilters import slugify,xsrf,7
  if (not users.is_current_user_admin() or,xsrf,4
"    )    select        user_id,        avg(danceability),        avg(energy),        avg(loudness),        avg(acousticness),        avg(instrumentalness),        avg(liveness),        avg(valence)    from all_songs_analysis    ""str$id""' % (users_tmp)        cursor.execute(sql)",sql_injection,16
"  querystring = ""str$id"".format(calendarid)",sql_injection,3
from pyquery import pyquery,xss,4
"                if obj:                    c.execute(query, obj)                else:                    c.execute(query)",sql_injection,6
        result = -num%id,remote_code_execution,3
"                 ""str$id"".format(today))            cursor = db.execute_query(query)                 ""str$id""                 ""str$id"".format(today, config.my_telegram))            cursor = db.execute_query(query)",sql_injection,10
"                if t is str:                    where_clause += ""str$id"" % (where_or_and(where_clause),                                                     f.upper(),                                                     request.get.get(f))                elif t is int:                    where_clause += ""str$id"" % (where_or_and(where_clause),                                                   f.upper(),                                                   request.get.get(f))        cursor.execute(sql_request)",sql_injection,23
"        result = self.common._cli_run(""str$id"" % hostname, none)",command_injection,6
"    ""str$id""""find single keywords in the fulltext",remote_code_execution,6
    context.call_to_terminate_proxy(),xsrf,1
"    dim = num%id            b.append(l*dim+m)    print a    traversematrix(a,num%id,num%id,dim,dim,path)       ",path_disclosure,7
"    def _create_3par_fibrechan_host(self, hostname, wwn, domain, persona_id):        out = self.common._cli_run(""str$id""                                   % (persona_id, domain,                                      hostname, ""str$id"".join(wwn)), none)    def _modify_3par_fibrechan_host(self, hostname, wwn):        out = self.common._cli_run(""str$id""                                   % (hostname, ""str$id"".join(wwn)), none)",command_injection,26
"            ""str$id"": {""str$id"": ""str$id""},      (        ""str$id"",        {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},        {""str$id"": ""str$id""},      ),",xsrf,13
"                ""str$id"",(tuple(location_ids),tuple(location_ids),tuple(ids),tuple(states),)            )",sql_injection,2
"                              jardependency(""str$id"", ""str$id"", ""str$id"")",remote_code_execution,3
        self.xsrf_token_data = self.verify_xsrf_token(),xsrf,3
"import base64 ,time ,selenium ,os ,urllib ,sys ,threading ,configparserfrom selenium import webdriverfrom pil import image",command_injection,15
"        t_sql_insert=""str$id""        sql_insert=t_sql_insert.format(name=self.name,psw=self.password,\                email=self.email,country=self.country)        sqlname=""str$id""%(self.name)        checkname=sql.querydb(self.conn,sqlname)            sql.insertdb(self.conn,sql_insert)        sqlname=""str$id""%(self.name)        userid=sql.querydb(self.conn,sqlname)        sqltext=""str$id""        allposts=sql.querydb(self.conn,sqltext)        sqltext=""str$id""        allposts=sql.querydb(self.conn,sqltext)        sqltext=""str$id""%(userid)        information=sql.querydb(self.conn,sqltext)                set name=""str$id"",password=""str$id"",email=""str$id"",country=""str$id"" \                where userid=""str$id"";""str$id""select count(*) from users where name=""str$id"";""str$id""insert into friends values(%d,%d);""str$id""delete from friends where userid=%d and friendid=%d;""str$id""%(userid)        result=sql.querydb(self.conn,sqltext)                where users.userid=friends.friendid and friends.userid=%d) as follow \                from users where users.name=""str$id"";""%(userid,username)        result=sql.querydb(self.conn,sqltext)",sql_injection,46
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"            sql = ""str$id"".format(url)            res = self.db.exec(sql)",sql_injection,6
            redirect_output=self._ray_params.redirect_worker_output),open_redirect,1
"from snakemake.io import protected, temp, temporary, expand, dynamic, glob_wildcards, flag, not_iterable, touch",remote_code_execution,12
    where parent_id in ({list_root_ids}),sql_injection,4
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,19
"def record_log_files_in_redis(redis_address,                              node_ip_address,                              log_files,                              password=none):    ""str$id""""str$id""""str$id""    for log_file in log_files:        if log_file is not none:            redis_ip_address, redis_port = redis_address.split(""str$id"")            redis_client = redis.strictredis(                host=redis_ip_address, port=redis_port, password=password)            log_file_list_key = ""str$id"".format(node_ip_address)            redis_client.rpush(log_file_list_key, log_file.name)",open_redirect,30
"    benchmark_exec_parser.add_argument(""str$id"", type=str, default=""str$id"", metavar=""str$id"",",remote_code_execution,4
"                        db.log_event_exception(                            ""str$id"")                    self.serial.port+""str$id""+str(self.result_data[""str$id""])+""str$id""",command_injection,3
"        credentials = ""str$id""            credentials += self._formatcredentials(src_data, name=""str$id"")            credentials += self._formatcredentials(dst_data, name=""str$id"")        command = (            ""str$id""            ""str$id""            ""str$id""            ""str$id""        ).format(            credentials=credentials,            src=src,            dst=dst,        logging.info(sanitize(command))",command_injection,23
"            error = ""str$id""            self.get(error)",xsrf,4
            csr_state_id=csr_state_logout.csr_state_id,open_redirect,1
"    insert into `zebaylistings`    values(""str$id"", ""str$id"", {qty}, {price}, ""str$id"", {hit_count}, {watch_count}, {question_count})    ""str$id"""".format(sku=sku, ebay_id=ebay_id, qty=qty, price=price, site=site,               hit_count=hits, watch_count=watches, question_count=questions)    frappe.db.sql(sql, auto_commit=true)",sql_injection,21
"        token = re.findall(r""str$id"", resp.headers.get(""str$id""))[num%id]",xsrf,4
"    os.system( ""str$id""""str$id""\""str$id"" )",remote_code_execution,3
"        errata_query = ""str$id""        errata_query += ""str$id""        errata_query += ""str$id""        errata_query += ""str$id""        errata_query += ""str$id""",sql_injection,15
"    def execute(self):        ""str$id""""str$id""""str$id""        self._out = self.execute_queued()",remote_code_execution,6
"    def test_hinted_login_dialog_disabled(self):        response = self.client.get(reverse(""str$id""), params, http_accept=""str$id"")            ""str$id"",",open_redirect,8
            return false,path_disclosure,2
"    where job in (""str$id"", ""str$id"")    where job = ""str$id""    where job = ""str$id""    where job = ""str$id"") as j1    where job = ""str$id"") as j2",sql_injection,25
"            ""str$id"" % uuid)",xsrf,3
"        from_date=context.get(""str$id"",false)        to_date=context.get(""str$id"",false)        date_str=false            date_str=""str$id""%(from_date,to_date)            date_str=""str$id""%(from_date)            date_str=""str$id""%(to_date)",sql_injection,6
"    old_query = ""str$id"".format(mac_addr, domain)    cursor.execute(old_query)",sql_injection,5
"        return baserequest.session.post( _builduri( handler ),                                        data = toutf8json( data ),                                        headers = _headers,                                        timeout = timeout )        return baserequest.session.get( _builduri( handler ),                                        headers = _headers,                                        timeout = timeout )                              data = toutf8json( data ),                              headers = _headers )                             headers = _headers )",remote_code_execution,42
"    def touch(self):            lutime(self.file, none)",remote_code_execution,4
"    query = db.query(""str$id"" % page_name)",sql_injection,5
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id"")        show_host_cmd = ""str$id""",command_injection,10
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,9
"        result = self.common._cli_run(""str$id"", none)",command_injection,4
"            plugin_path = self.get_path_to(""str$id"", ""str$id"", ""str$id"",                                           ""str$id"" % src)            args.append(plugin_path)            args.append(inventory_update.get_actual_source_path())            handle, path = tempfile.mkstemp(dir=private_data_dir)            os.chmod(path, stat.s_irusr | stat.s_iwusr | stat.s_ixusr)            args.append(path)            args.append(""str$id"")        args.append(""str$id"" % inventory_update.verbosity)        if settings.debug:            args.append(""str$id"")        return args        if inventory_update.source == ""str$id"" and inventory_update.source_project_update:        return self.get_path_to(""str$id"", ""str$id"", ""str$id"")",command_injection,40
"    return self._key_for_tool_version(""str$id"", self.version)",remote_code_execution,3
        pass,xsrf,1
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id""openstack\""str$id""                           ""str$id"")",command_injection,8
"    uploaded_benwa_dir = os.path.join(base, ""str$id"", ""str$id"")",open_redirect,5
	return event,sql_injection,2
from twisted.web.error import flattenererrorfrom twisted.python.filepath import filepath,xsrf,7
"    config.add_route(""str$id""         , append_format_pattern(""str$id"")         )",path_disclosure,4
"      params.insert(num%id, int(p, num%id))      params.insert(num%id, p)  if params[num%id] > num%id and params[num%id] > num%id:",path_disclosure,13
"    query = ""str$id""    data = execute_query(app, g, query)[num%id]    return jsonify(data)",sql_injection,10
"    exec(code_obj, instr_globals, instr_locals)",open_redirect,3
from django.utils import safestring,xss,4
"    self.assertin(""str$id"", os.environ)    with hermetic_environment_as(**{}):      self.assertnotin(""str$id"", os.environ)    self.assertin(""str$id"", os.environ)    with hermetic_environment_as(**dict(aaa=""str$id"")):      output = subprocess.check_output(""str$id"", shell=true).decode(""str$id"")      self.assertnotin(""str$id"", output)      self.assertin(""str$id"", os.environ)      self.assertequal(os.environ[""str$id""], ""str$id"")    self.assertin(""str$id"", os.environ)    self.assertnotin(""str$id"", os.environ)    with environment_as(**dict(xxx=unicode_char)):      with hermetic_environment_as(**dict(aaa=unicode_char)):",remote_code_execution,28
"            order = u""str$id"" % fuzzy_search",sql_injection,5
"        self.url = ""str$id"" % (self.base_url, task[num%id])",xsrf,6
"    output = poll_result.output[num%id]    return output[-num%id] == ""str$id""",command_injection,7
"        ""str$id"",        ""str$id""",open_redirect,2
"                maint_int=armppi(num=num%id))                self.gic,",command_injection,2
"middleware_classes = (    ""str$id"",)",sql_injection,4
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)",xsrf,6
"    sql = ""str$id"".format(scene, player)    res = db.exec(sql)    sql = ""str$id"".format(scene, player)    res = db.exec(sql)",sql_injection,14
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
from datetime import timedelta,remote_code_execution,4
        response = self.client.post(url),xsrf,3
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"                (""str$id"", models.onetoonefield(parent_link=true, auto_created=true, primary_key=true, serialize=false, to=""str$id"")),",sql_injection,6
"                       ""str$id"", (row[num%id],))",sql_injection,2
"                and user_id = {num%id};""str$id"""".format(self.id)        total_mapping_time = db.engine.execute(sql)",sql_injection,7
"        self.test_app.get, ""str$id"", params={""str$id"": build_url})  def testcannotrerunincompletebuild(self, mock_fn):    master_name = ""str$id""",xsrf,10
"    def perform(self, query, obj=none):",sql_injection,4
"    tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")",open_redirect,5
"	def _raise_exception():		frappe.throw(_(""str$id""), frappe.dataerror)			_raise_exception()			_raise_exception()			_raise_exception()			_raise_exception()",sql_injection,8
"        if isinstance(value, basestring):            value = ""str$id"" % value.encode(""str$id"").replace(""str$id"", r""str$id"")        elif isinstance(value, models.model):            value = str(value.id)        elif value is none:            value = ""str$id""        else:            value = str(value)        sql.extend((connection.ops.quote_name(field.column), ""str$id"", value, ""str$id""))    sql.extend([""str$id"", ""str$id"", ""str$id"", str(self.id)])    connection.cursor().execute(sql)",sql_injection,35
"        debug(""str$id"", txt)        super(comment, self).__init__(""str$id"" + txt)        if config.effectiveconfig[""str$id""]:            return r""str$id"" + self.txt + ""str$id""            warn(""str$id"")    def __init__(self, txt):        super(url, self).__init__(r""str$id"" + txt + ""str$id"")    formats = [        ""str$id"",        ""str$id"",        ""str$id""        ]        txt = txt.strip().splitlines()",command_injection,34
    },path_disclosure,1
"            table = conn.execute(f""str$id"")            query = f""str$id""                table = conn.execute(f""str$id"")                query += f""str$id""            table = conn.execute(query)",sql_injection,15
"        ssh_cmd = (""str$id""                   % {""str$id"": chap_secret, ""str$id"": host_name})",command_injection,8
            group_exam_ind=num%id,open_redirect,1
"    def _run_ssh(self, command, check_exit_code=true, attempts=num%id):",command_injection,5
"                await cursor.execute(""str$id"" % name)",sql_injection,4
"         [jc.pathcontainspredicate(""str$id"", ""str$id"" % load_balancer_name),          jc.dict_subset(spec)]))",path_disclosure,5
"        self.asserttrue(            self.client.login(username=username, password=password))        url = ""str$id""        response = self.client.post(url, content_type=""str$id"")        self.assertequal(response.status_code, num%id)        self.assertequal(response.status_code, num%id)",xsrf,14
"                                                 ""str$id"": ""str$id"",",open_redirect,2
import citest.json_contract as jc,path_disclosure,4
    compiler_interface = self._zinc.compiler_interface    compiler_bridge = self._zinc.compiler_bridge    compiler_interface = relative_to_exec_root(compiler_interface)    compiler_bridge = relative_to_exec_root(compiler_bridge),remote_code_execution,12
"                    choices=(""str$id"", ""str$id"", ""str$id""),                    help=""str$id""                         ""str$id""                         ""str$id"")",command_injection,6
"        c.execute(""str$id""""str$id""{}""str$id""""str$id"".format(image_date))            c.execute(""str$id""""str$id""{}""str$id""{}""str$id""{}""str$id""""str$id"".format(image_date, url_base, copyright))",sql_injection,4
                     for attr in attrs]),path_disclosure,4
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_vlun_cmd = ""str$id""        show_vlun_cmd = ""str$id""",command_injection,15
"  def testgeneratetoken_anonusergetsnotoken(self):    self.assertequal(""str$id"", xsrf.generatetoken(0l, ""str$id""))",xsrf,5
"    parser.add_argument(        ""str$id"",        required=true,        type=str,        help=""str$id"")",open_redirect,5
      print response,path_disclosure,2
"    if login_session[""str$id""] != grudget.user_id:",open_redirect,4
        assert results[num%id].meta.highlight.content[num%id][:len(expected)] == expected,xss,4
"def print_error_messages_raylet(task_error_queue):        error, t = task_error_queue.get()            time.sleep(num%id)",open_redirect,7
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"    sql = ""str$id"".format(tag)    results = list(db.exec(sql))",sql_injection,6
"        print ""str$id"" + datestamp + d",path_disclosure,6
"""str$id""""str$id""""str$id""import datetimeimport loggingimport systhis_dir = os.path.dirname(os.path.abspath(__file__))sys.path.insert(num%id, os.path.join(this_dir, ""str$id""))from utils import netclass error(exception):  passdef _utcnow():  ""str$id""""str$id""""str$id""  return datetime.datetime.utcnow()class xsrfremote(object):  ""str$id""""str$id""""str$id""  token_resource = ""str$id""  def __init__(self, url, token_resource=none):    self.url = url.rstrip(""str$id"")    self.token = none    self.token_resource = token_resource or self.token_resource    self.expiration = none    self.xsrf_request_params = {}  def url_read(self, resource, **kwargs):    url = self.url + resource    if kwargs.get(""str$id"") == none:      return net.url_read(url, **kwargs)    if self.need_refresh():      self.refresh_token()    resp = self._url_read_post(url, **kwargs)    if resp is none:      raise error(""str$id"" % (url, self.expiration))    return resp  def url_read_json(self, resource, **kwargs):    url = self.url + resource    if kwargs.get(""str$id"") == none:      return net.url_read_json(url, **kwargs)    if self.need_refresh():      self.refresh_token()    resp = self._url_read_json_post(url, **kwargs)    if resp is none:      raise error(""str$id"" % (url, self.expiration))    return resp  def refresh_token(self):    ""str$id""""str$id""""str$id""    url = self.url + self.token_resource    resp = net.url_read_json(        url,        headers={""str$id"": ""str$id""},        data=self.xsrf_request_params)    if resp is none:      raise error(""str$id"" % url)    self.token = resp[""str$id""]    if resp.get(""str$id""):      exp = resp[""str$id""]      exp -= min(round(exp * num%id.num%id), num%id)      self.expiration = _utcnow() + datetime.timedelta(seconds=exp)    return self.token  def need_refresh(self):    ""str$id""""str$id""""str$id""    return (        not self.token or (self.expiration and self.expiration <= _utcnow()))  def _url_read_post(self, url, **kwargs):    headers = (kwargs.pop(""str$id"", none) or {}).copy()    headers[""str$id""] = self.token    return net.url_read(url, headers=headers, **kwargs)  def _url_read_json_post(self, url, **kwargs):    headers = (kwargs.pop(""str$id"", none) or {}).copy()    headers[""str$id""] = self.token    return net.url_read_json(url, headers=headers, ",xsrf,201
"""str$id"""" configuration variables for defining remote applications.",xsrf,7
"    bot.send_message(message.from_user.id, ""str$id"")",sql_injection,2
"         jc.pathcontainspredicate(""str$id"", self.__server_group_name),         jc.pathcontainspredicate(""str$id"", ""str$id"")]))",path_disclosure,4
        return command.execute(),remote_code_execution,2
"  os.system(""str$id"" % base)  os.system(""str$id"" % base)  os.system(""str$id"" % (base, base))  os.system(""str$id"" % base)  os.system(""str$id"" + filename)  install_opts = ""str$id"" % target  os.system(""str$id"" % (basename, install_opts))  os.system(""str$id"" % basename)",command_injection,28
"            self._cli_run(""str$id"" % (volume_name, growth_size),                          none)",command_injection,5
"        self.assertequal(self.client.post(url).status_code, num%id)        self.assertequal(self.client.put(url).status_code, num%id)        self.assertequal(self.client.patch(url).status_code, num%id)        self.assertequal(self.client.delete(url).status_code, num%id)        response = self.client.post(url)        response = self.client.post(url, content_type=""str$id"")            url, json.dumps(body), content_type=""str$id"")            url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")",xsrf,37
"            ssh_cmd = ""str$id"" % \                (host_name, vol_name)",command_injection,7
"            x = os.system(""str$id"" % {""str$id"": link, ""str$id"": mpv})            if x == num%id:            elif x == num%id:",remote_code_execution,16
        api = self.mock_nsx_clustered_api()        api._reinit_cluster(),xsrf,4
"    query = ""str$id""+str(x+num%id)+""str$id""+str(x)+""str$id""    cur.execute(query)",sql_injection,4
            group_exam_ind = num%id,open_redirect,3
        self.check_xsrf(),xsrf,1
"        target_subjects_of = self.target_objects_of()        return (target_nodes, target_classes,",path_disclosure,6
        print (e),sql_injection,2
"                        ssh_cmd = (""str$id""                                   ""str$id"" % map_id)",command_injection,6
"            f""str$id""""            delete from {carts_table}             where user_id={userid}            cursor.execute(sql_query)",sql_injection,7
"  resp = swarming_server.url_read_json(      ""str$id"" % params[""str$id""], data=params)",xsrf,7
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")",xsrf,7
"            data=jsonutils.dumps(data, sort_keys=true))",xsrf,2
"        path = os.path.join(self.namespace, key)",path_disclosure,4
"	<param type=""str$id"" name=""str$id"" optional=""str$id"">",command_injection,4
        display.verbosity = self.options.verbosity,remote_code_execution,3
"			self.addoutput(name, [device, partid, mountpoint,				size, fstype, options])			i += num%id		self.endoutput(header=[""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""], trimowner=false)",command_injection,18
"        ""str$id"": {""str$id"": ""str$id""},        ""str$id"": {""str$id"": ""str$id""},        ""str$id"": {""str$id"": ""str$id""},        ""str$id"": {""str$id"": ""str$id""}",sql_injection,12
"            self._node_ip_address,",open_redirect,1
"            print ""str$id""",remote_code_execution,2
        self.key_field = none,path_disclosure,3
"        log.debug(""str$id"".format(self.sr))",remote_code_execution,1
        cursor = db.cursor()        cursor.execute(flows),sql_injection,4
"    subprocess.call([""str$id"", cmd,",sql_injection,2
"        self._cli_run(""str$id"" % hostname, none)        out = self._cli_run(""str$id"" % (volume, hostname), none)",command_injection,11
"                cur.execute(""str$id"".format(symbol, interval) +",sql_injection,3
"        post_data = request.get_json(force=true)        response = table.save(answer_id, data=post_data)",sql_injection,7
auto_cross_reference = true,xss,3
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,12
"            method=""str$id""):",xsrf,1
"                    %s,                    %s,                    %s            ""str$id""""str$id""""str$id"" % (energy_used, power_used, ts)            self.c.execute(query)",sql_injection,9
"                (""str$id"", models.foreignkey(related_name=""str$id"", to=""str$id"")),",sql_injection,3
"""str$id""""bibclassify text extractor.",remote_code_execution,3
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"", content_type=""str$id"")",xsrf,7
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"                               help=""str$id"")",command_injection,1
"            position = create_position_form.save(commit=false)            d = parse_upload(position)            errors = d.get(""str$id"")                position = d.get(""str$id"")",open_redirect,12
    if user.is_authenticated():,sql_injection,2
"            ""str$id"": table.query(),",sql_injection,2
"        if new_class._meta.key_field is not none:            if new_class._meta.key_field not in field_attnames:                raise exception(""str$id"".format(new_class._meta.key_field))",path_disclosure,12
"            value = section_data[key]            self.icinga_lines.append((""str$id"" % (self.indent, key, self.value_to_icinga(value))))",remote_code_execution,8
mysql = mysql(app),sql_injection,3
class taskassets(tasknestedview):,path_disclosure,2
"            self.logger.info(""str$id"" % base)",sql_injection,3
            return;,open_redirect,1
"		command = ""str$id"".format(table_name, pth)		self._run_command(command)",sql_injection,5
"        show_vlun_cmd = ""str$id""",command_injection,3
"            elif segments[num%id] == ""str$id"":                d = vdrive.get_private_root()                name = ""str$id""",xsrf,10
"    def undot(self, path):        ret = []        for node in path.split(""str$id""):            if node in [""str$id"", ""str$id""]:                continue            if node == ""str$id"":                if ret:                    ret.pop()                continue            ret.append(node)        return ""str$id"".join(ret)        vpath = self.undot(vpath)",path_disclosure,30
        dbconn =  dbaseconn(),sql_injection,3
"        request_token_params={""str$id"": ""str$id""},        authorize_url=""str$id"",",xsrf,3
"                    query = ""str$id""+row[num%id]+ ""str$id"" + symbol+""str$id""+str(row[num%id])+""str$id""+str(float(price))+""str$id""+str(float(volume))+""str$id""+row[num%id]+""str$id""                    cur.execute(query)",sql_injection,7
"            query = ""str$id""+id_+""str$id""+data[num%id][""str$id""]+""str$id""+str(block_num)+""str$id""+str(trx_in_block)+""str$id""+str(op_in_trx)+""str$id""+account_id+""str$id""+str(op_type)+""str$id""+account_name+""str$id""            cur.execute(query)",sql_injection,4
"    [data, imagefiles] = get_inf_details(args.inf_file)            print(""str$id"" + str(attempts) + ""str$id"")        api.post_ad_using_data(data, imagefiles)        sleep(num%id)        print(""str$id"" + str(attempts) + ""str$id"")",xsrf,17
"        if iclient(ctx).getservicenamed(""str$id"").have_private_root():                       t.a(href=""str$id"")[""str$id""],",xsrf,3
        response = self.client.post(url),xsrf,3
        :exc:`.commanderror` should be used. note that if the checks fail then        :exc:`.checkfailure` exception is raised to the,command_injection,17
"    query = ""str$id""""str$id""\""str$id""    cursor.execute(query)    return json.dumps(data)",sql_injection,6
"                        pipeline.get_login_url(provider_id, pipeline.auth_entry_login, redirect_url=redirect_to)        except (keyerror, valueerror, indexerror):            pass",open_redirect,8
"    def get_full_path(self, filename, language=none, version_slug=none):",open_redirect,5
"                    yield iofile(f, self.rule)",remote_code_execution,3
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.delete(url + ""str$id"")        response = self.client.get(url)",xsrf,16
        parsed = vars(self.parse_known_args(nohelp=true)[num%id]),command_injection,3
"        self.set_header(""str$id"", ""str$id"")",xsrf,2
"          mox.ignorearg(), encoded_data, timeout=mox.ignorearg()).andraise(",xsrf,3
"from flask import flask, render_template, session,request,flash,redirect,url_for",xss,6
  return,xsrf,1
"    data = generic_search(keywords, tables, app, g)    return jsonify(data)        return render_template(""str$id"", queries=get_queries(app, g))    query = get_queries(app, g)[query_key]    (schema, data) = execute_query(app, g, query)",sql_injection,22
"    self.services = service_manager.services()        ""str$id"", ""str$id"", services=self.services)    mr = testing_helpers.makemonorailrequest()    mr.auth.user_id = num%id                      self.servlet.gatherpagedata, mr)",xsrf,14
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(""str$id"", content_type=""str$id"")",xsrf,7
"def download_raw_chems(stats):    response = httpresponse(content_type=""str$id"")    response[""str$id""] = ""str$id"" % (datetime.datetime.now().strftime(""str$id""))    writer = csv.writer(response)    writer.writerow([""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id""])    for rawchem in rawchem.objects.filter(dsstox_id=none):        writer.writerow([rawchem.extracted_text.data_document.data_group.id, rawchem.id, rawchem.raw_cas, rawchem.raw_chem_name, rawchem.rid if rawchem.rid else ""str$id"" ])    return re",open_redirect,34
"        return ""str$id"".join(            escape_path_argument(s) for s in (                sys.executable,                             scriptname)))",command_injection,9
"                    choices=(""str$id"", ""str$id"", ""str$id""),                    help=""str$id""                         ""str$id""                         ""str$id"")",command_injection,6
"    record_log_files_in_redis(        redis_address,        node_ip_address, [redis_stdout_file, redis_stderr_file],        password=password)",open_redirect,6
"        ssh_cmd = ""str$id"" % cmd",command_injection,5
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"                            db.log_event_exception(                                ""str$id"")                            self.debugger.dut.serial.port+""str$id"" +",command_injection,4
"        ""str$id"": int(page),        ""str$id"": int(perpage),        ""str$id"": int(rating),        ""str$id"": search",sql_injection,8
"						or df.get(""str$id"") in (""str$id"", ""str$id"")",xss,5
"                indexlist = self.findinstructionindex(instructions,""str$id"")                    indexlist = self.findinstructionindex(instructions,""str$id"")",path_disclosure,6
"            result = self.etcd.get(os.path.join(self.namespace, key))        path = os.path.join(self.namespace, key)",path_disclosure,8
"        show_vlun_cmd = ""str$id""",command_injection,3
"        self.url = ""str$id"" % (self.base_url, task_id)",xsrf,6
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,11
class testservicedefinition(unittest.testcase):,xsrf,2
"            ""str$id"": get_token(my_ads_page.text, ""str$id"")            }        if (""str$id"" not in resp.text):            raise deleteadexception(resp.text)        allads = self.get_all_ads()        [self.delete_ad(i) for t, i in allads if t.strip() == title.strip()]        upload one or more photos to kijiji concurrently using pool",xsrf,34
"				cursor.execute(""str$id"" + alreadyrecomendedid + ""str$id"" + str(message.author.id) + ""str$id"")",command_injection,9
"         [jc.pathcontainspredicate(""str$id"", ""str$id"" % load_balancer_name),          jc.dict_subset(spec)]))",path_disclosure,5
"        return ""str$id""    def read_all(self) -> str:",open_redirect,6
"            tname = identifier(self._table).as_string(            cname = identifier(column_name).as_string(                ""str$id"", tname, type(tname), str(tname)                ""str$id"", (tname, cname)",sql_injection,13
"            ""str$id"": {""str$id"": num%id},            ""str$id"": {""str$id"": num%id, ""str$id"": num%id}}",sql_injection,8
"                update people set karma = {num%id} where name = ""str$id""                ""str$id""'.format(karma, name))                karma, name))",sql_injection,14
"            out, err = self._run_ssh(""str$id"" % fc_map_id)",command_injection,6
"    result = cur.execute(""str$id"")",sql_injection,3
"                        ""str$id"" %int(taskid)) \",command_injection,3
    finished = false    while not finished:        for actor in actors:            actor.join(),xsrf,11
"    if trigger.group(num%id):    else:    karmalist = bot.db.execute(""str$id"" + str(top_limit)).fetchall()",sql_injection,8
"        assert escape_literal(""str$id"") == r""str$id""",sql_injection,4
"        cstring = url(""str$id"", password=pwd, \                host=host, database=name, username=user)        self.engine = create_engine(cstring, echo=false)        self.inspector = reflection.inspector.from_engine(self.engine)        self.__reflect_db()        self.conn = self.engine.connect()        self.conn.close()",sql_injection,20
from django.test import transactiontestcase,xsrf,4
"def check_time_based_attack(url):    arr = [""str$id"", ""str$id""%20and%20sleep(num%id);%num%id--%num%id""str$id""%20and%20sleep(num%id);%num%id--%num%id""str$id""this web server is vulnerable for time based attack.""str$id""the response time after boolean attack sleep(num%id) is: ""str$id""\n""str$id""this web server is potentially vulnerable for error based attack. "" \check_boolean_based_attack(local)check_stack_query(local)check__error_based_attack(local)",sql_injection,33
from bot_code import common,xsrf,4
        if len(pids) < num%id:,remote_code_execution,4
"    query = ""str$id""+asset_id+""str$id""    cur.execute(query)",sql_injection,4
"    def executesql(self, sql, connection=none, commit=false):",sql_injection,5
"    os.system(""str$id""+encpass+""str$id""+username)",remote_code_execution,1
"        cliq_arg_strings = []            cliq_arg_strings.append(""str$id"" % (k, v))        cmd = verb + ""str$id"".join(cliq_arg_strings)        return self._run_ssh(cmd, check_exit_code)",command_injection,15
"    temporarily fix: only works for sids with a length of < num%id.    if ""str$id"" in sid or ""str$id"" in sid:        return false    if len(sid) >= num%id:        return false    return true",command_injection,30
"        response = self.client.get(""str$id"")",xsrf,3
"				query = ""str$id""""select scope, device, mountpoint, size, fstype, options, partid ",command_injection,10
"            query = ""str$id"".format(data)                cursor.execute(query)",sql_injection,4
"            field=models.foreignkey(related_name=""str$id"", to=""str$id""),            field=models.foreignkey(to=""str$id""),",sql_injection,3
"        query = ""str$id"".format(email = member)        self.cursor.execute(query)",sql_injection,6
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"        cursor.execute(sql, none)",sql_injection,2
"    query = db.query(""str$id"" % page_name)",sql_injection,5
"            ssh_cmd = ""str$id"" % host",command_injection,5
"            ""str$id"".format(amount)    c.execute(query)    rows = c.fetchall()    response = ""str$id""  \",sql_injection,9
"        path = os.path.join(self.namespace, keyfilter)",path_disclosure,4
"      ""str$id"": coordinator.json,      ""str$id"": json.dumps(credentials.credentials.keys()),      ""str$id"": json.dumps(workflows),",xss,6
"                (""str$id"", models.foreignkey(to=""str$id"")),                (""str$id"", models.foreignkey(to=""str$id"")),",sql_injection,4
"        cursor.execute(""str$id""""str$id""%s:resignation""str$id""""str$id"" % (other_player_name,game))",sql_injection,3
"        check_output([""str$id"", ""str$id""])    results = check_output([""str$id"", ""str$id"", ""str$id""])    assert b""str$id"" in results.lower()",command_injection,11
"            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,13
"        out = self._cli_run(""str$id"", none)",command_injection,4
        response = self.client.get(url),xsrf,3
"    print(""str$id"", user.password_hash, password)",open_redirect,3
"    self.mock(bot_main, ""str$id"", lambda: self.server)",xsrf,4
"            print ""str$id""",sql_injection,2
"    sql = ""str$id"" \",sql_injection,4
"            f""str$id""""str$id""select t2.id as id_invoice , t2.transaction_date, sum(t3.price * t1.quantity) as montant from  invoice_products as t1 inner join invoices  as t2 on  t2.id = t1.invoice_id inner join  products  as t3 on  t3.id = t1.product_id  and t2.user_id= %s group by  t2.id, t2.transaction_date order by  t2.transaction_date desc""str$id""select i.transaction_date, ip.invoice_id, p.name, ip.quantity, p.price from invoice_products as ip, products as p, invoices as i where invoice_id = %s and ip.product_id = p.id and ip.invoice_id = i.id;""str$id""""str$id""            insert into {carts_table} (user_id, product_id, quantity)            values({userid}, {productid}, {cart[""str$id""]})            cursor.execute(sql_query)",sql_injection,81
"        resp = redirect(request.get.get(""str$id"", request.meta.get(""str$id"", ""str$id"")))",open_redirect,5
"        response = self.client.post(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,24
"    query = ""str$id""+asset_id+""str$id""    cur.execute(query)",sql_injection,4
        query = self.database.generate_update(self)            result = yield self.database.runquery(query)            yield self.database.runoperation(query),sql_injection,9
        linesplit = line.split(),sql_injection,3
"		start = random.randint(num%id, num%id)		end = randint.randint(num%id, num%id)",path_disclosure,8
  token_time = token_time or int(time.time()),xsrf,5
"		and c.email_id=""str$id""""str$id"""".format(email_id=sender))",sql_injection,2
"def createuser(login_session):    newuser = user(name=login_session[""str$id""], email=login_session[                   ""str$id""], picture=login_session[""str$id""])    session.add(newuser)    session.commit()    user = session.query(user).filter_by(email=login_session[""str$id""]).one()    return user.iddef getuserinfo(user_id):    user = session.query(user).filter_by(id=user_id).one()    return userdef getuserid(email):    try:        user = session.query(user).filter_by(email=email).one()        return user.id    except:        return none",open_redirect,31
"                    nglib.ngtree.add_child_ngtree(ngtree, rtree)",path_disclosure,2
"        result = self.common._cli_run(""str$id"" % hostname, none)",command_injection,6
"  def execute_and_fetch(sql, as_row=false):      cursor = dbmanager.execute(sql, cursor=true)",sql_injection,7
"            print ""str$id"" + datestamp + ""str$id""",path_disclosure,6
"            destination = ""str$id"" % (path, directory)            destination = ""str$id"" % (path, filename)",path_disclosure,12
"        sql = ""str$id"".format(scene)        res = self.db.exec(sql)",sql_injection,6
"    c.execute(""str$id""""str$id""""str$id""%(row[num%id].split(""str$id"")[-num%id], row[num%id], row[num%id].split(""str$id"")[-num%id], row[num%id]))",sql_injection,4
from django.http import httpresponse,open_redirect,4
            return all(len(h.args) == args_no or h.varargs for h in handlers),path_disclosure,10
"    old_reply = remoteirc.reply            remoteirc.reply = types.methodtype(_remote_reply, remoteirc)            remoteirc.reply = old_reply",remote_code_execution,10
"	def uploadfile(self,suffix,mime,payload) :			filename = os.path.basename(fd.name)",remote_code_execution,6
"        command = ""str$id"".format(credentials)            result = self._execute(command)",command_injection,6
        credentials : oauth2client credentials object    credentials = none,xsrf,8
"    version=""str$id"",",sql_injection,1
"        ""str$id""        cur.execute(query, (name))    except(psycopg2.databaseerror, e):",sql_injection,5
        response = self.client.get(url),xsrf,3
"        sqlstr = ""str$id""""str$id""""str$id"" %{""str$id"": input_phrase}        result = self.db.execute(sqlstr).fetchall()",sql_injection,8
"            http_x_deis_version=__version__.rsplit(""str$id"", num%id)[num%id]",xsrf,2
"    conn = db().execute((sql % data), false)",sql_injection,6
"		await client.change_presence(status=discord.status(""str$id""), game=discord.game(name=""str$id""))",command_injection,3
"                             vendors_code, date):",sql_injection,2
"            ssh_cmd = ""str$id"" % host",command_injection,5
"        return {            ""str$id"": files,            ""str$id"": submit.tmp_path,        }",path_disclosure,7
"        if request.args.get(""str$id"", none):            return redirect(request.args.get(""str$id""))",xsrf,5
"                selection = cursor.execute(""str$id""""str$id""""str$id"" + ""str$id""""str$id""\""str$id"")",sql_injection,5
"        copyflag = ""str$id"" if full_copy else ""str$id""        fc_map_cli_cmd = (""str$id""                          ""str$id"" %                          {""str$id"": source,                           ""str$id"": target,                           ""str$id"": copyflag})",command_injection,18
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,12
"                 f""str$id"")            cursor = db.execute_query(query)",sql_injection,4
"        ""str$id"": user.user,",sql_injection,2
"        if ""str$id"" in line:            ip = line.split()[-num%id].split(""str$id"")[-num%id]            if ip not in ips:                ips[ip] = num%id                print(ip)                sys.stdout.flush()            else:                ips[ip] += num%id            if ip not in banned and ips[ip] >= config.count:                banned.add(ip)                cmd = ""str$id"" % ip                print(cmd, file=sys.stderr)                sys.stderr.flush()                os.system(cmd)",command_injection,40
"    def check_xsrf_cookie(self):        ""str$id""""str$id""""str$id""        if self.request.method.upper() == ""str$id"" and not self.request.body:            raise web.httperror(num%id, ""str$id"")",xsrf,13
"    inserted = (list_id, cook_id, food_name, price, loc, image)    sql = ""str$id"".format(listing_table_name, str(inserted).encode(""str$id"", ""str$id""))    cur.execute(sql)",sql_injection,14
"            org_type=org_type,",sql_injection,1
"    def test_login(self):        resp = self.client.get(url_for(""str$id"", remote_app=""str$id""))        self.assertequal(            resp.location,            ""str$id""            ""str$id"" % quote_plus(url_for(                ""str$id"", remote_app=""str$id"", _external=true            ))",xsrf,16
"    ""str$id"": [""str$id"", ""str$id"", ""str$id"", none]",remote_code_execution,5
"  allowed_paths = (      ""str$id"",      ""str$id"",      ""str$id"",  )  def _path_allowed(self, path):    for p in self.allowed_paths:      if path.startswith(p):        return true    return false",xsrf,20
"        sql = ""str$id"" + str(bracket) + ""str$id""        result = self.db.exec(sql)",sql_injection,10
"from .common import get_and_check_project, get_tile_json",path_disclosure,5
"                timestamp=""str$id"",                 status=""str$id"",                 etoday=""str$id"",                etotal=""str$id""            where serial=""str$id"";        ""str$id""' % (ts, status, etoday, etotal, inverter_serial)        self.c.execute(query)",sql_injection,14
"    ""str$id"": [""str$id"", ""str$id"", ""str$id"", none]",remote_code_execution,5
"                ""str$id"" + code + ""str$id"" + \    db_cursor.execute(sql_command)",sql_injection,8
"            return rc_user_error            return rc_runtime_error            return rc_user_error            return rc_user_error            print ""str$id""            print        return num%id",remote_code_execution,13
min_time_between_updates = timedelta(seconds=num%id),remote_code_execution,3
"    ""str$id"""" disconnect user from remote application.",xsrf,6
    this function excepts the path to exist.,path_disclosure,7
"        self.filter_string = ""str$id"".format(self.name, value)",sql_injection,4
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
        response = self.client.post(url),xsrf,3
from m5.objects.device import piodevice,command_injection,4
    with tmp_suggest (followed_id) as,sql_injection,4
"from tribler.core.simpledefs import (ntfy_torrents, ntfy_playlists, ntfy_comments,                                     ntfy_modifications, ntfy_moderations, ntfy_markings, ntfy_mypreferences,                                     ntfy_activities, ntfy_reachable, ntfy_channelcast, ntfy_votecast, ntfy_dispersy,                                     ntfy_trackerinfo, ntfy_update, ntfy_insert, ntfy_delete, ntfy_tunnel,                                     ntfy_startup_tick, ntfy_close_tick, ntfy_upgrader,                                     signal_allchannel_community, signal_search_community, signal_torrent,                                     signal_channel, signal_channel_community, signal_rss_feed,                                     ntfy_watch_folder_corrupt_torrent, ntfy_new_version, ntfy_tribler,                                     ntfy_upgrader_tick, ntfy_torrent, ntfy_channel, ntfy_market_on_ask,                                     ntfy_market_on_bid, ntfy_market_on_transaction_complete,                                     ntfy_market_on_ask_timeout, ntfy_market_on_bid_timeout,                                     ntfy_market_iom_input_required, ntfy_market_on_payment_received,                                     ntfy_market_on_payment_sent, signal_resource_check, ntfy_credit_mining,                                     state_shutdown)",sql_injection,46
from anaconda_go.lib.helpers import get_working_directory,path_disclosure,4
"                        expansion[i].append(iofile(e, rule=branch))",remote_code_execution,2
"  cursor.execute(""str$id"" % content)",sql_injection,3
"            c.execute(""str$id"" + document.id + ""str$id"" + document.__class__.__name__ + ""str$id"" + edge.__class__.__name__ + ""str$id"" + edge.edgeid + ""str$id"" +                ""str$id"" + startnode1id + ""str$id"" + startnode2id + ""str$id"" + edge.endnode + ""str$id"" + edge.propertyownerid + ""str$id"" + edge.propertyname + ""str$id"" + str(edge.propertyvalue) + ""str$id""                ""str$id"" + propertytypename + ""str$id"")",sql_injection,48
"            text_lines = extractor.text_lines_from_url(entry,                                                       user_agent=make_user_agent_string(""str$id""))",remote_code_execution,4
"            self.update_package(package_id, security_classification, data_driven_application, version, author_email, notes, update_frequency, resources)",open_redirect,8
"			if re.compile(""str$id"").match(field):			if re.compile(""str$id"").match(field):",sql_injection,4
"        document.getelementbyid(""str$id"").innerhtml+=""str$id""+data+""str$id"";",xss,1
"            http_x_deis_version=__version__.rsplit(""str$id"", num%id)[num%id]",xsrf,2
"		cursor.execute(""str$id"" + session[""str$id""] + ""str$id"");",sql_injection,5
"def listen_error_messages_raylet(worker, task_error_queue):",open_redirect,3
"    ""str$id"",",xsrf,1
        file_block_size = num%id * num%id # num%id kib / chunk        file_block = bytes(),sql_injection,13
        response = self.client.post(url),xsrf,3
"    if not db.check(message.author.id, ""str$id"", db.user_table):        db.update(""str$id"".format(db.user_table, message.author.id, message.author))            db.update(""str$id"".format(db.user_table, msg[num%id], msg[num%id]))",sql_injection,11
"                        print ""str$id"",key                        print xss_request.text",xss,4
"            for step in path:                if isinstance(step, node):                    traverse_node(step, tcs)                if isinstance(step, edge):                    if step.type.name == ""str$id"":                        update_testcase_precondition(step, pre_condition)                    traverse_edge(step, tcs)            data.append({                ""str$id"": pre_condition,                ""str$id"": tcs            })",path_disclosure,26
"    item_name = request.args.get(""str$id"")    sql = ""str$id""""str$id""""str$id"".format(item_name)    cursor = mysql.connection.cursor()    cursor.execute(sql)    data = cursor.fetchall()",sql_injection,13
"            position = position.objects.get(id=request.session[""str$id""])            request.user.positions.add(position)@login_required(login_url=""str$id"", redirect_field_name=none)def positions(request):        sort_by = request.session[""str$id""]        sort_by = ""str$id""        if request.post.get(""str$id""):            sort_by = ""str$id""        elif request.post.get(""str$id""):            sort_by = ""str$id""        elif request.post.get(""str$id""):            sort_by = ""str$id""        elif request.post.get(""str$id""):",open_redirect,29
"        cmd = ""str$id"" % volume_name        out = self._cli_run(cmd, none)",command_injection,9
    with worker.lock:        error_messages = global_state.error_messages(worker.task_driver_id)        for error_message in error_messages:            logger.error(error_message)        for msg in worker.error_message_pubsub_client.listen():,open_redirect,14
"escape_re = re.compile(r""str$id"")    elif escape_re.match(col):",sql_injection,5
"                                               ""str$id"": ""str$id"",",open_redirect,2
"        if ""str$id"" in line:            ip = line.split()[-num%id].split(""str$id"")[-num%id]            if ip not in ips:                ips[ip] = num%id                print(ip)                sys.stdout.flush()            else:                ips[ip] += num%id            if ip not in banned and ips[ip] >= config.count:                banned.add(ip)                cmd = ""str$id"" % ip                print(cmd, file=sys.stderr)                sys.stderr.flush()                os.system(cmd)",command_injection,40
"                       ""str$id"" % player[num%id])                       ""str$id"" % player[num%id])",sql_injection,6
"        ophandlers.handledupop(op,                               self.symbols,                               self.stack,                               self.symid)",path_disclosure,4
"    def find_view(self, obj, unresolved_path):        sub_view_factory = queryadapter(obj, ihttprestsubviewfactory)        if sub_view_factory:            view = sub_view_factory.resolve(unresolved_path)        else:            view = queryadapter(obj, ihttprestview)        if not view:        return view",path_disclosure,23
"            ""str$id"": {""str$id"": ""str$id""},      (        ""str$id"",        {""str$id"": {}, ""str$id"": {""str$id"": ""str$id""}},        {""str$id"": ""str$id""},      ),",xsrf,13
"    def get_attachment(self, ident, encoding, filename=none, content_type=none):        deferred_result, req = self.get(""str$id"" % ident, params, as_json=false)",xsrf,14
"                            logging.info(""str$id"", str(answers), inserted)                    logging.info(""str$id"", sender)",sql_injection,5
import subprocess,sql_injection,2
"    runs a command in shell and provides stdout, stderr and stdin streams.    this function creates a context manager that sets up the process, returns    to caller, closes streams and waits for process to exit on leaving.    the process is opened in ``universal_newlines`` mode.    :param command: the command to run on shell.    :param kwargs:  additional keyword arguments to pass to ``subprocess.popen``                    that is used to spawn the process (except ``shell``,                    ``stdout``, ``stderr``, ``stdin`` and                    shell=true,",command_injection,74
"                update_stmt = (                    ""str$id""                    + ""str$id""                    + new_user_name                    + ""str$id""                    + ""str$id""                )                cursor.execute(update_stmt, (uid,))",sql_injection,15
"        query = ""str$id""+symbol+""str$id""+asset_id+""str$id""+price+""str$id""+data[""str$id""]+""str$id""+str(mcap)+""str$id""+type_+""str$id""+str(current_supply)+""str$id""+str(holders)+""str$id""+str(precision)+""str$id""        print query        cur.execute(query)",sql_injection,6
"            cls.recursiveupdate(cls.effectiveconfig, c)        try:            cls.recursiveupdate(cls.cmdlineconfig, yaml.load(general))        except:            pass",command_injection,7
"    conn = db().execute(sql, false)",sql_injection,4
"        ssh_cmd = ""str$id"" % pool",command_injection,5
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))",xsrf,3
"        cmd = ""str$id"" % src_name            cmd += ""str$id"" % snap_cpg            cmd += ""str$id""            cmd += cpg + ""str$id""        cmd += dest_name        self._cli_run(cmd, none)",command_injection,23
"    cur.execute(""str$id""{}\""str$id""{}\""str$id"".format(user, password))",sql_injection,2
"                insert_querry = ""str$id""""                                insert into extraschool_presta_stat                                    (date, activity_id, place_id, level, rancge, nbr_child, child_id)                                                                        select prestation_date, %s, placeid, level, %s, count(*), child_id                                    from                                     (select prestation_date, activityid, placeid, prestation_time, es, level, child_id                                        from                                        (select activityid, placeid, childid as child_id, prestation_date, prestation_time, es, l.leveltype as level                                        from extraschool_prestationtimes p                                        left join extraschool_activityoccurrence o on o.id = p.activity_occurrence_id                                         left join extraschool_child c on c.id = p.childid                                        left join extraschool_level l on l.id = c.levelid                                        where o.activityid = %s and                                                                                              p.prestation_time <= %s and                                              p.prestation_time =                                            (                                              select max(pp.prestation_time)                                              from extraschool_prestationtimes pp                                              left join extraschool_activityoccurrence oo                                                 on oo.id = pp.activity_occurrence_id                                              where oo.activityid = %s and                                                pp.prestation_date = p.prestation_date and                                                pp.prestation_time <= %s and                                                p.childid = pp.childid                                                    )                                        ) zz                                        where (zz.prestation_time >= %s and zz.prestation_time <= %s) or                                            (zz.prestation_time <= %s and es = ""str$id"")                                    ) qq                                    group by activityid, placeid, prestation_date, level, child_id",sql_injection,139
"    url_helper.urllib2.urlopen(mox.strcontains(url),",xsrf,1
"            print ""str$id""",sql_injection,2
"                       plasma_store_socket_name=none,                       redis_password=none):",open_redirect,2
"        self.assertisnone(self.client.logout())        self.assertequal(response.status_code, num%id)",xsrf,3
"from models import base_model, task, user",sql_injection,6
"        sql = ""str$id"" % coin        self.cursor.execute(sql)",sql_injection,6
"                            self._run_ssh(""str$id"" % map_id)                            self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)                        self._run_ssh(""str$id"" % map_id)",command_injection,15
"        try:            file_handle = open(file_path, ""str$id"")        except exception:            invoke_404()            return        file_data = file_handle.read()        file_handle.close()",sql_injection,13
"from validator import validate, vuser, vrequired, vmeetup, veditmeetup, vfloat, valueorblank, validip, vmenu, vcreatemeetup",xsrf,13
"        print (""str$id"", error)",sql_injection,3
"                s = ""str$id""            else:                s = ""str$id""            s += ""str$id"".format(obj.id)            return s                ""str$id"" if getattr(n[""str$id""], ""str$id"", ""str$id"") == ""str$id"" else ""str$id"",",path_disclosure,21
"        print (""str$id"".format(path))    def update_info(self, src_drive, path, update_owner=false):        src_item = src_drive.get_file_via_path(path)        dest_item = self.get_file_via_path(path)",path_disclosure,13
"        out = ""str$id""        try:            out += self.debugger.dut.serial.port+""str$id""        except attributeerror:            pass        out += (str(self.result_data[""str$id""])+""str$id"" +                self.result_data[""str$id""]+""str$id"" +                self.result_data[""str$id""])",command_injection,17
"        self.do_step(loginrequest(self.browser,                                  self.username,                                  self.password,                                  base_url=self.base_url))",xsrf,4
"    @throttle(min_time_between_updates)        ""str$id""""str$id""""str$id""        import pyatmo        self.station_data = pyatmo.weatherstationdata(self.auth)        if self.station is not none:            self.data = self.station_data.lastdata(                station=self.station, exclude=num%id)        else:            self.data = self.station_data.lastdata(exclude=num%id)",remote_code_execution,21
"      self.assertequal(botobj.remote, self.server)      self.assertequal(self.server, botobj._remote)    self.mock(bot_main, ""str$id"", lambda: self.server)",xsrf,8
"  usercheckquery = ""str$id"".format(username)",sql_injection,3
        parsed = vars(self.parse_known_args(nohelp=true)[num%id]),command_injection,3
"    c.execute(""str$id""""str$id""table""str$id""wallpapers""str$id""""str$id"")",sql_injection,1
"				windows = windows+{og_windows} , linux = linux+{og_linux}  , mac =mac+ {og_mac} , other_platform =other_platform+ {og_plat_other} where s_url = ""str$id"";"".\				og_windows = platform_dict[""str$id""] , og_linux = platform_dict[""str$id""] , og_mac = platform_dict[""str$id""] , og_plat_other = platform_dict[""str$id""] ,\				surl = short_url)		res_update = cursor.execute(counter_sql)",sql_injection,41
            object.count += num%id,open_redirect,3
"    user_engine.execute(        ""str$id"".        format(endpoint_url))",sql_injection,3
"    c.execute(""str$id"", (name,))",sql_injection,2
"    voters = db.execute(""str$id"".format(chan,action,target)).fetchone()",sql_injection,3
"def test_election_is_open(client,create_user, create_election_with_positions):    election = election.objects.create()    assert reverse(""str$id"") == request.url",open_redirect,10
"        query = ""str$id"".format(rno = rno)        self.cursor.execute(query)",sql_injection,6
"    too_long = len(ans) > max_ans_len    logging.info(""str$id"", str(ans), not too_long)    return not too_long",sql_injection,12
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"    db().execute(sql, true)",sql_injection,2
"        tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")        tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")",open_redirect,10
"    def gen_sql_insert(self, listing, cat_id):",sql_injection,4
"        return config.edituserconfig(arg[""str$id""])",command_injection,2
"        sql = ""str$id""""str$id""""str$id"".format(server_id)        self.cur.execute(sql)        sql = []        sql.append(""str$id""""str$id""""str$id"".format(username))        sql.append(""str$id""""str$id""""str$id"".format(username, server_id, role))        for query in sql:            self.cur.execute(query)        sql = ""str$id""""str$id""""str$id"".format(title, start_time, time_zone, server_id, description)        self.cur.execute(sql)        sql = ""str$id""""str$id""""str$id"".format(server_id)        self.cur.execute(sql)        sql = []        sql.append(""str$id""""str$id""""str$id"".format(username))        sql.append(""str$id""""str$id""""str$id"".format(username, event_id, attending))        for query in sql:            self.cur.execute(query)        sql = ""str$id""""str$id""""str$id"".format(event_id)        self.cur.execute(sql)        sql = ""str$id""""str$id""""str$id"".format(event_id)        affected_count = self.cur.execute(sql)",sql_injection,50
        response = redirect(destination),open_redirect,3
	category = frappe.local.form_dict.blog_category or frappe.local.form_dict.category,xss,5
"        order(str): the order to view the rows in.            where log.path like ""str$id""||articles.slug and            order by views {}            limit {}""str$id""'.format(order, limit)    rows = get_data(cur, query)",sql_injection,24
"        ""str$id"".format(name=name))",sql_injection,1
"base_url = ""str$id""forum = blueprint(""str$id"", __name__)@forum.route(base_url + ""str$id"", methods=[""str$id""])",sql_injection,9
"            ""str$id"" % (attachment_type, attachment_id))",xsrf,4
"    input_directory = ""str$id""    download_directory = input_directory + ""str$id""    temp_directory = ""str$id""    vcf_directory = ""str$id""    zarr_directory_setup = ""str$id""    zarr_directory_benchmark = ""str$id""",remote_code_execution,20
"    out = run_shell_command(""str$id"")[num%id]    out = run_shell_command(""str$id"")[num%id]",command_injection,6
"                insert into people(name,karma,shame) values(""str$id"",-num%id,num%id)                ""str$id""'.format(name))",sql_injection,5
    created_at = fields.datetime(required=true)    auth_token =fields.string()    role = fields.integer()    first_name = fields.string()    last_name = fields.string()    checked_in = fields.boolean(required=true),sql_injection,17
"    url_helper.urllib2.urlopen(mox.strcontains(url), mox.ignorearg(),",xsrf,2
you can also put the connection string into a setup.cfg file in the root of the project(the same one setup.py would use) like so:,path_disclosure,24
            csr_state_id=csr_state_logout.csr_state_id,open_redirect,1
"      self.flow.params[""str$id""] = request_handler.request.url        method(request_handler, *args, **kwargs)",xsrf,6
"        fc_ls_map_cmd = ""str$id"" % \            fc_map_id",command_injection,6
"    def filter(self, expression: bool) -> bool:",sql_injection,6
"                    sql = ""str$id"" % (sourcebyinstitution, number)                    sqlite.execute(sql)                sql = ""str$id"" % sourcebyinstitution                sqlite.execute(sql)",sql_injection,13
"    httpresponseredirect,",open_redirect,1
        if len(pids) < num%id:,remote_code_execution,4
"from snakemake.io import protected, temp, temporary, expand, dynamic, glob_wildcards, flag, not_iterable, touch",remote_code_execution,12
min_time_between_updates = timedelta(seconds=num%id),remote_code_execution,3
"        query = ""str$id""",sql_injection,3
"    sql = (""str$id""           ""str$id""           ) % namedialog    return {""str$id"": num%id}    sql = (""str$id""           ""str$id""           ) % dialogid, userid, permission    sql = (""str$id""           ""str$id""           ) % (dialogid, content, userid, section_id)    sql = (""str$id""           ""str$id""           ""str$id""           ) % dialogid    return sql_execute(sql)",sql_injection,39
"    def test_token_getter_setter(self, save_session):",xsrf,3
"	db = mysqldb.connect(host_name, user_name, user_pass, tabl_name)	c.execute(""str$id""""str$id""\""str$id"")	print ""str$id""print (get_player(""str$id""))print ""str$id""",sql_injection,11
"    sql = ""str$id"".format(scene)    res = db.exec(sql)",sql_injection,6
"    conn = db().execute((sql % data), false)",sql_injection,6
"                    (tname, cname, default_value.id, stage[num%id]),",sql_injection,4
"from beamr.interpreters import config, verbatimenv",command_injection,5
import redis,open_redirect,2
        self.proximity_map *= num%id#num%id,path_disclosure,3
"                ""str$id""+account_id+""str$id""+account_name+""str$id""+referrer+""str$id""+str(referrer_rewards_percentage)+""str$id""+lifetime_referrer+""str$id""+str(lifetime_referrer_fee_percentage)+""str$id""        cur.execute(query)",sql_injection,2
"    url_helper.urllib2.urlopen(url, mox.ignorearg(),                               timeout=mox.ignorearg()).andreturn(                                   stringio.stringio(response))",xsrf,4
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"        conn.execute(""str$id"" + i + ""str$id"")",sql_injection,5
"    def __init__(self, webport, local_access=false):",xsrf,4
"          mox.ignorearg(), encoded_data, timeout=mox.ignorearg()).andraise(",xsrf,3
"        if cur.execute(""str$id"" %tag):            cur.execute(""str$id""                    %(""str$id"".join(cols.keys()), ""str$id"".join(cols.values())))",command_injection,6
"    ""str$id"": os.urandom(num%id),     ""str$id"": true}",sql_injection,4
"        show_port_cmd = ""str$id""        show_port_i_cmd = ""str$id""        show_port_i_cmd = ""str$id""",command_injection,9
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id"")        show_host_cmd = ""str$id""",command_injection,10
"    all_users = storage.all(""str$id"").values()    verified_user = none    for user in all_users:        this_fbid = user.text_decrypt(user.fbid)        if fbid == this_fbid:            verified_user = user            break",sql_injection,21
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.get(url)",xsrf,6
"query = ""str$id""+str(volume)+""str$id""+str(mcap)+""str$id"" + str(current_supply) + ""str$id"" + str(holders) + ""str$id""cur.execute(query)",sql_injection,11
"        cr.execute(""str$id""""str$id""""str$id"" %(""str$id"".join(map(lambda x: ""str$id"" + str(x) + ""str$id"", j_ids))))        journal_ids = map(lambda x1: x1[num%id], cr.fetchall())",sql_injection,15
"    ""str$id""""extract keywords from the list of strings",remote_code_execution,7
            wait_for_socket_server(addr),remote_code_execution,1
"    db().execute((sql % data), true)    conn = db().execute((sql % data), false)",sql_injection,10
"        send = req.request(""str$id"", ""str$id"" + user_dork + ""str$id"" + str(page))        parser = beautifulsoup(send.data, features=""str$id"")            x = str(input(""str$id""))            print(str(result) + ""str$id"" + ""str$id"" + x + ""str$id"")",xss,26
"        value = u""str$id"".format(value)",sql_injection,3
"        self.cookies.save()        os.chmod(self.cookies.filename, num%id)",xsrf,3
        return [x for x in all_roles if x.name == role_name][num%id],command_injection,10
"        results = get_table_dict(""str$id"")",sql_injection,3
"        fields = [""str$id"", ""str$id"", ""str$id"", ""str$id"",""str$id"",]",open_redirect,6
"                             ""str$id"")",command_injection,1
"                    next=request.args.get(""str$id"", ""str$id"")",xsrf,2
"        if(order[num%id]):            query += ""str$id"" % order[num%id]            query += ""str$id"" % order[num%id]",sql_injection,11
"        if columntype == ""str$id"":            quote = ""str$id""        elif columntype == ""str$id"":            quote = ""str$id""        else:            assert false            quote = ""str$id""        sql += ""str$id""            sql += quote + parentobject.id + quote            sql += quote + str(getattr(documentobject, columnname)) + quote    database.execute(sql)",sql_injection,39
  if analysis.suspected_flake_build_number is none:,xsrf,4
"				opening = get_leave_balance_on(employee.name, leave_type, filters.from_date,					allocation_records_based_on_from_date.get(employee.name, frappe._dict()))",sql_injection,7
"class command(stack.commands.hostargumentprocessor,",command_injection,2
"        cursor.execute(            ""str$id""""str$id""{}""str$id""""str$id"".format(name))",sql_injection,2
"    if subprocess.call(""str$id"" % backdoor, shell=true) != num%id:",command_injection,7
"from jupyter_core.paths import jupyter_data_dirimport subprocesspem_file = os.path.join(jupyter_data_dir(), ""str$id"")c = get_config()c.notebookapp.ip = os.getenv(""str$id"", ""str$id"") or ""str$id""c.notebookapp.port = int(os.getenv(""str$id"", ""str$id"") or num%id)c.notebookapp.open_browser = falseif ""str$id"" in os.environ:    if not os.path.isfile(pem_file):        subprocess.check_call([""str$id"", ""str$id"", ""str$id"",             ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"", ""str$id"",            ""str$id"", ""str$id"",            ""str$id"", pem_file, ""str$id"", pem_file])    c.notebookapp.certfile = pem_fileif ""str$id"" in os.environ:    from ipython.lib import passwd    c.notebookapp.password = passwd(os.environ[""str$id""])    del os.environ[""str$id""]",xsrf,58
"                self.method, self.resource, self.request_http = self.request_line.split()",path_disclosure,5
"        where login=""str$id"";    ""str$id""' % data",sql_injection,5
            group_exam_ind=num%id,open_redirect,1
"            self.traverse_many(path, none, srcs, tgts, visitor)            self.traverse_one(path, none, self._src_prx, self._tgt_prx,                              visitor)    def traverse_one(self, path, attribute, source, target, visitor):",path_disclosure,17
"    return browser.do_request(aws_base_url + path, args, files)",xsrf,6
import citest.json_contract as jc,path_disclosure,4
"      name_matches_pred = jc.pathcontainspredicate(""str$id"", name)      is_stopping_pred = jc.patheqpredicate(""str$id"", ""str$id"")      clause.add_mapped_constraint(jc.if(name_matches_pred, is_stopping_pred))",path_disclosure,10
"    ""str$id"": ""str$id""",xsrf,2
"            self.uut.executable = ""str$id""",command_injection,3
"                and user_id = {num%id};""str$id"""".format(user.id)        total_validation_time = db.engine.execute(sql)",sql_injection,7
        response = self.client.get(url),xsrf,3
"                (""str$id"", models.foreignkey(to=""str$id"")),",sql_injection,2
"                    return f(*args, **kwargs)",xsrf,3
"    query = db.query(""str$id"" % page_name).namedresult()",sql_injection,5
"        out = self._cli_run(""str$id"", none)",command_injection,4
import pyshacl.consts,path_disclosure,2
"        text = self.get(url).text        version_check_1 = re.search(""str$id"", text, re.ignorecase)        if version_check_1:            return version_check_1.group(num%id)        result = self.get(check2_url).text        version_check_2 = re.search(""str$id"", result, re.ignorecase)        if version_check_2:            return version_check_2.group(num%id)",sql_injection,24
"        self.client.login(username=""str$id"", password=""str$id"")        response = self.client.post(url)        self.client.login(username=""str$id"", password=""str$id"")            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,13
"            img = cv2.resize(img, (num%id, num%id), interpolation=cv2.inter_nearest)",path_disclosure,6
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andreturn(",xsrf,6
"    flash(""str$id"")",open_redirect,1
            return q.one(),xsrf,2
"    redis_ip_address = get_ip_address(args.redis_address)    redis_port = get_port(args.redis_address)        redis_ip_address,        redis_port,",open_redirect,8
"        ssh_cmd = ""str$id"" % vdisk_name        ssh_cmd = ""str$id"" % vdisk_name",command_injection,10
"        text_query_str = str(text_query) # sqlobject chokes on unicode.        sql_query = ""str$id"" % text_query_str        return self.select(sql_query)",sql_injection,15
"        response = self.client.post(url)        response = self.client.get(url, content_type=""str$id"")",xsrf,7
"        cmd = ""str$id"" % host_name",command_injection,5
"    with open(""str$id"", ""str$id"") as f:        raw_sql = f.read()    t = template(raw_sql)",sql_injection,11
import citest.json_contract as jc,path_disclosure,4
"        self.asserttrue(            self.client.login(username=username, password=password))        response = self.client.delete(url)        self.assertfalse(            self.client.login(username=username, password=passwo",xsrf,9
        redis_password (str): the password of the redis server.,open_redirect,8
from django.http import httprequestfrom lxml import htmlfrom dashboard.models import *,open_redirect,10
"        response = self.client.post(url)            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,12
"                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                ""str$id"",                ""str$id"",",path_disclosure,6
"from const import *from model import *from utils import *import revealclass handler(basehandler):    ""str$id""""str$id""""str$id""    ignore_deactivation = true    repo_required = false    admin_required = true    def get(self):        xsrf_tool = xsrftool()        user = users.get_current_user()        self.render(            ""str$id"",            id=self.env.domain + ""str$id"",            xsrf_token=xsrf_tool.generate_token(                user.user_id(), ""str$id""))    def post(self):        xsrf_tool = xsrftool()        user = users.get_current_user()        if not (self.params.xsrf_token and xsrf_tool.verify_token(                    self.params.xsrf_token, user.user_id(),                    ""str$id"")):            self.error(num%id)            return false        action = (""str$id"", str(self.params.id))        self.redirect(""str$id"", id=self.params.id,                      signature=reveal.sign(action))",xsrf,64
"from .api import get_query_manager__all__ = (""str$id"",)opportunity_qm = models.opportunity.get_query_manager()opportunities = opportunity_qm.run(            for a in o.accounts    for o in opportunity_qm",sql_injection,18
    j2_env = environment(loader=filesystemloader(utils_dir)),xss,3
"from fieldvalues import faculty_status, fields_of_study, departments, careerareas,ipedssectornames",sql_injection,7
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""openstack\""str$id""                           ""str$id"")",command_injection,7
"from r2.lib.utils        import modhash, valid_hash, randstr ",xsrf,6
"    tk.enqueue_job(_send_mail, [users, ""str$id"", datarequest_dict], title=u""str$id"")",open_redirect,5
"    ""str$id""""str$id""""str$id""",remote_code_execution,1
"            url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url, content_type=""str$id"")        response = self.client.get(url)        response = self.client.get(url)",xsrf,13
"        (""str$id"", ""str$id""),",sql_injection,2
"    return db_execute(sql, true)      ""str$id"" + self.entry_id + ""str$id""     self.title, self.body = db_execute(sql, true)[num%id] # returns array      ""str$id"" + current_datestamp + \      ""str$id"" + current_datestamp + ""str$id""    db_execute(sql)    self.entry_id = str(db_execute(sql, true)[num%id][num%id]);     ",sql_injection,31
"	conn = mysql.connection	cur = conn.cursor()	cur.execute(""str$id""""str$id""""str$id"")	rv = cur.fetchall()	return render_template(""str$id"", subjects=rv)	if request.method == ""str$id"":		if ""str$id"" not in request.files:			flash(""str$id"")			return ""str$id""		file = request.files[""str$id""]		if file.filename == ""str$id"":			flash(""str$id"")			return ""str$id""		if file and allowed_file(file.filename):			filename = secure_filename(file.filename)			file.save(os.path.join(app.config[""str$id""], filename))			return redirect(url_for(""str$id"",												filename=filename))		return send_from_directory(app.config[""str$id""],								filename)	return render_template(""str$id"")",sql_injection,52
"        csessid = request.args.get(""str$id"")[num%id]            cmdarray = json.loads(request.args.get(""str$id"")[num%id])",xss,6
                q = q.order_by(announce.created.desc()),xsrf,3
"            self._node_ip_address,",open_redirect,1
        self._session.cookies.clear()        self._session.cookies.save(),xsrf,2
            socks = self.p.poll(),remote_code_execution,3
"            http_x_deis_version=""str$id""",xsrf,1
"			command = ""str$id"".format(table_name,																		utils.sqliteutils.escapetext(metadata),																		pth,																		mod_time)			self._run_command(command)",sql_injection,7
"for row in db.execute(""str$id""):",sql_injection,4
    bot.add_cog(database(bot)),command_injection,1
"    if ""str$id"" in target:    path = os.path.join(paths.sqlmap_output_path, target)    if os.path.exists(path):",path_disclosure,10
"                selection = cursor.execute(""str$id""""str$id""""str$id"" + tablename)",sql_injection,5
"            onboarding.invite_somebody: {                ""str$id"": true,                ""str$id"": {                    ""str$id"": ""str$id"",                    ""str$id"": ""str$id"",                    ""str$id"": ""str$id""                }            },",open_redirect,14
        return true    return false,open_redirect,4
"                        ssh_cmd = (""str$id""                                   ""str$id"" % map_id)",command_injection,6
        data = submit_manager.get_files(,path_disclosure,3
"  getusernameandpassword = ""str$id"".format(username)",sql_injection,3
"        where user_id=""str$id"";        where id=""str$id"";    ""str$id""' % (id, id)",sql_injection,8
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,10
import citest.json_contract as jc,path_disclosure,4
"          ""str$id"": {""str$id"": ""str$id""},",xsrf,3
"def get_table_dict(table):    database = sqlite3.connect(""str$id"")    cur = database.execute(""str$id"".format(table))    columns = [column[num%id] for column in cur.description]    results = []    for row in cur.fetchall():        results.append(dict(zip(columns, row)))    return results",sql_injection,26
"        if isinstance(value, basestring):            value = ""str$id"" % value.encode(""str$id"").replace(""str$id"", r""str$id"")        elif isinstance(value, models.model):            value = str(value.id)        elif value is none:            value = ""str$id""        else:            value = str(value)        sql.extend((connection.ops.quote_name(field.column), ""str$id"", value, ""str$id""))    sql.extend([""str$id"", ""str$id"", ""str$id"", str(self.id)])    connection.cursor().execute(sql)",sql_injection,35
"        self.url = ""str$id"" % (self.base_url,                                                 task_id, language_code)",xsrf,7
"        show_host_cmd = ""str$id""        create_host_cmd = (""str$id""                           ""str$id""openstack\""str$id""                           ""str$id"")        show_3par_cmd = ""str$id""",command_injection,11
"                    os.system(""str$id"" % (source, target))                    os.system(""str$id"" % (source, target))                    os.system(""str$id"" % source)                os.system(""str$id"" % (sources, target))                os.system(""str$id"" % (sources, target))",sql_injection,19
"    window=graphwin(""str$id"",width=num%id, height=num%id)    window.setcoords(num%id,num%id,num%id,num%id)",path_disclosure,3
"        return resource.getchild(self, path, request)        self.putchild(""str$id"", file(self._static_folder))        self.putchild(""str$id"", keysresource(self._services_factory))        self.putchild(attachmentsresource.base_url, attachmentsresource(self._services_factory))        self.putchild(""str$id"", contactsresource(self._services_factory))        self.putchild(""str$id"", featuresresource(portal))        self.putchild(""str$id"", tagsresource(self._services_factory))        self.putchild(""str$id"", mailsresource(self._services_factory))        self.putchild(""str$id"", mailresource(self._services_factory))        self.putchild(""str$id"", feedbackresource(self._services_factory))        self.putchild(""str$id"", usersettingsresource(self._services_factory))        self.putchild(loginresource.base_url, loginresource(self._services_factory, portal, disclaimer_banner=disclaimer_banner))        self.putchild(logoutresource.base_url, logoutresource(self._services_factory))",xsrf,30
"def simattack(paths, metric);",path_disclosure,3
"__version__ = ""str$id""",sql_injection,3
"  def __init__(self, binary_util, relpath, version, package_manager, yarnpkg_version):    self._relpath = relpath",command_injection,10
            raise notfound(),path_disclosure,2
def _get_org_id_and_type_from_request(request):,sql_injection,2
                dut_scp = scpclient(ssh.get_transport()),command_injection,3
"            object.save()            return link_redirect(request, pk)",open_redirect,4
from django.core.exceptions import validationerrorfrom .extracted_text import extractedtext,open_redirect,7
"        self.asserttrue(            self.client.login(username=username, password=password))        response = self.client.delete(url)        self.assertfalse(            self.client.login(username=username, password=passwo",xsrf,9
"	def check(self, url, payload, response, parameter):					self.found(injection_types, url, parameter, payload)					return true",xss,12
"app.register_blueprint(profile_module)    app.run(host=""str$id"", port=num%id, debug=false, threaded=true)",sql_injection,5
"            ssh_cmd = ""str$id"" % \                (host_name, vol_name)",command_injection,7
"        ssh_cmd = ""str$id"" % vdisk_name        ssh_cmd = ""str$id"" % vdisk_name",command_injection,10
"        conn.execute(""str$id"" + str(i) + ""str$id"")",sql_injection,5
"    subprocess.call([""str$id"", cmd,",sql_injection,2
        arg_list = cmd.split(),command_injection,3
"        board = board(board_txt)        walkman = walker()        row = num%id        walkman.walk(board, row, col, ""str$id"")",path_disclosure,13
"        csessid = request.args.get(""str$id"")[num%id]",xss,3
        return flag in value.flags,remote_code_execution,4
"        self.url = ""str$id"" % self.base_url                     ""str$id"": self.password,                     ""str$id"": ""str$id""}",xsrf,9
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")",xsrf,5
"def get_full_path(src, dst, rtype=""str$id""):",path_disclosure,4
"        try:            while true:                time.sleep(num%id)                self.flush_profile_data()        except attributeerror:            pass        ""str$id""""str$id""""str$id""",open_redirect,9
"                    ""str$id"",                    ""str$id"",                    ""str$id"",                    ""str$id"",                ""str$id"",                ""str$id"",",path_disclosure,6
"            db().execute((sql % data), true)        db().execute((sql % data), true)            db().execute((sql % data), true)",sql_injection,12
"    record_log_files_in_redis(        redis_address,        node_ip_address, [stdout_file, stderr_file],        password=redis_password)",open_redirect,6
"        ""str$id"" % (request.get(""str$id""), user and user.email()))",xsrf,6
"        self.asserttrue(            self.client.login(username=""str$id"", password=""str$id""))        response = self.client.post(url)",xsrf,6
"_safe_globals = {""str$id"":none}",remote_code_execution,3
"        newresult = request.querypage(payload)        if count:            for element in resultdict.values():                if element[num%id] == num%id:                        value = ""str$id"" % (conf.url, payload)                        value += ""str$id"" % payload                        value += ""str$id"" % payload                        value += ""str$id"" % payload",command_injection,34
"                         ""str$id"".format(tag))                cursor = db.execute_query(query)",sql_injection,4
"            xsrf_cookie = true,",xsrf,3
  def handlepost(self):  # pragma: no cover    return self.handleget(),xsrf,8
"        response = self.client.post(url, json.dumps(body), content_type=""str$id"")        response = self.client.get(url)",xsrf,8
"        ""str$id""""str$id""""str$id""",path_disclosure,1
        query_str = query_templ.format(**query_params)    return res,sql_injection,5
        print(q),sql_injection,1
"        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andraise(        mox.ignorearg(), mox.ignorearg(), timeout=mox.ignorearg()).andreturn(",xsrf,6
"        print(""str$id"".format(conversion_config.compressor))        print(""str$id"")        allel.vcf_to_zarr(input_vcf_path, output_zarr_path, alt_number=alt_number, overwrite=true,        print(""str$id"")",remote_code_execution,7
"            num%id. check for bad characters            num%id. check for reserved titles            checking for existing articles is done by django on database level            ""str$id""""            raise forms.validationerror(_(""str$id""))        cs = changeset.objects.filter(old_title=title).count()        if cs > num%id:                _(""str$id""), params={""str$id"": title},)",open_redirect,34
"            i.md = markdown(i.content, extensions=[                ""str$id"",                ""str$id"",                ""str$id"",            ])",xss,8
"        subprocess.run(cmd, shell=true, timeout=num%id, check=true)",command_injection,4
            if not user.is_authenticated():,sql_injection,3
        return command.execute(),remote_code_execution,2
"    httpresponseredirect,",open_redirect,1
"    user_id = sql_execute(sql, fetch_all=true)        values (""str$id"", ""str$id"", ""str$id"");",sql_injection,8
"	def search(self):				upc = ""str$id""		upcentry = self.upc_entry.get()		if(upcentry == ""str$id""):			emptyinputlabel = tk.label(self.statusbar, text=""str$id"", fg=""str$id"")			emptyinputlabel.pack()		if(self.upc_entry.get() != ""str$id""):			self.view_result_button = tk.button(self.navbar, text=""str$id"", 				font=self.controller.itemfont, command=lambda: self.controller.custom_frame())			self.view_result_button.pack(side=""str$id"", pady=num%id, padx=num%id)			upc = self.upc_entry.get()						result_not_found = tk.label(self, text=""str$id"", font=self.controller.itemfont)				result_not_found.pack()				self.view_result_button.config(state=""str$id"")				result_found_notification = tk.label(self, text=""str$id"", font=self.controller.itemfont)				result_found_notification.pack()				self.view_result_button.config(state=""str$id"")",sql_injection,47
"    ctx = ds.pathtraversalcontext( {}, {}, self._root, {}, none, none, none )",path_disclosure,11
"                assert session[""str$id""] == (""str$id"", ""str$id"")",xsrf,5
"        ssh_cmd = ""str$id""",command_injection,3
"            ""str$id"": forms.textarea,",open_redirect,2
"  def _check_token(request, *args, **kwargs):    check_authorization(request)    return viewfunc(request, *args, **kwargs)  return wraps(viewfunc)(_check_token)",xsrf,11
"    def modhash(self, rand=none, test=false):        return modhash(self, rand = rand, test = test)        return valid_hash(self, hash)",xsrf,15
"				cursor.execute(""str$id"" + str(message.server.id))					cursor.execute(""str$id"" + parameter + ""str$id"" + str(message.server.id))",command_injection,10
"    url(r""str$id"", taskassets.as_view()),",path_disclosure,2
"        response = self.client.post(url)        response = self.client.get(url, content_type=""str$id"")",xsrf,7
"        print(""str$id"" + str(self.kd))",path_disclosure,3
"    ""str$id""""str$id""""str$id""",xsrf,1
"    self.assertequal(        num%id, app.post(""str$id"", bad_token, expect_errors=true).status_int)",xsrf,5
